'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1434
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CSAccReporting"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CSAccReporting
    Inherits Global.System.Data.DataSet
    
    Private tableReportBLBudget As ReportBLBudgetDataTable
    
    Private tableTRN_APINV As TRN_APINVDataTable
    
    Private tableMST_VENDOR As MST_VENDORDataTable
    
    Private tableSMY_CUSTAGE As SMY_CUSTAGEDataTable
    
    Private tableMST_CUSTOMER As MST_CUSTOMERDataTable
    
    Private tableMST_COMPANY As MST_COMPANYDataTable
    
    Private tableSMY_STATEMENT As SMY_STATEMENTDataTable
    
    Private tableSMY_TRIAL_BALANCE As SMY_TRIAL_BALANCEDataTable
    
    Private tableReportBLPL As ReportBLPLDataTable
    
    Private tableSMY_INVPAYDETAIL As SMY_INVPAYDETAILDataTable
    
    Private tableInvoiceWithTax As InvoiceWithTaxDataTable
    
    Private tableSTKTAKELIST As STKTAKELISTDataTable
    
    Private tableMST_WAREHOUSE As MST_WAREHOUSEDataTable
    
    Private relationFK_TRN_ARINV_MST_CUSTOMER As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ReportBLBudget")) Is Nothing) Then
                MyBase.Tables.Add(New ReportBLBudgetDataTable(ds.Tables("ReportBLBudget")))
            End If
            If (Not (ds.Tables("TRN_APINV")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_APINVDataTable(ds.Tables("TRN_APINV")))
            End If
            If (Not (ds.Tables("MST_VENDOR")) Is Nothing) Then
                MyBase.Tables.Add(New MST_VENDORDataTable(ds.Tables("MST_VENDOR")))
            End If
            If (Not (ds.Tables("SMY_CUSTAGE")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_CUSTAGEDataTable(ds.Tables("SMY_CUSTAGE")))
            End If
            If (Not (ds.Tables("MST_CUSTOMER")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CUSTOMERDataTable(ds.Tables("MST_CUSTOMER")))
            End If
            If (Not (ds.Tables("MST_COMPANY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_COMPANYDataTable(ds.Tables("MST_COMPANY")))
            End If
            If (Not (ds.Tables("SMY_STATEMENT")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_STATEMENTDataTable(ds.Tables("SMY_STATEMENT")))
            End If
            If (Not (ds.Tables("SMY_TRIAL_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_TRIAL_BALANCEDataTable(ds.Tables("SMY_TRIAL_BALANCE")))
            End If
            If (Not (ds.Tables("ReportBLPL")) Is Nothing) Then
                MyBase.Tables.Add(New ReportBLPLDataTable(ds.Tables("ReportBLPL")))
            End If
            If (Not (ds.Tables("SMY_INVPAYDETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_INVPAYDETAILDataTable(ds.Tables("SMY_INVPAYDETAIL")))
            End If
            If (Not (ds.Tables("InvoiceWithTax")) Is Nothing) Then
                MyBase.Tables.Add(New InvoiceWithTaxDataTable(ds.Tables("InvoiceWithTax")))
            End If
            If (Not (ds.Tables("STKTAKELIST")) Is Nothing) Then
                MyBase.Tables.Add(New STKTAKELISTDataTable(ds.Tables("STKTAKELIST")))
            End If
            If (Not (ds.Tables("MST_WAREHOUSE")) Is Nothing) Then
                MyBase.Tables.Add(New MST_WAREHOUSEDataTable(ds.Tables("MST_WAREHOUSE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReportBLBudget() As ReportBLBudgetDataTable
        Get
            Return Me.tableReportBLBudget
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRN_APINV() As TRN_APINVDataTable
        Get
            Return Me.tableTRN_APINV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_VENDOR() As MST_VENDORDataTable
        Get
            Return Me.tableMST_VENDOR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SMY_CUSTAGE() As SMY_CUSTAGEDataTable
        Get
            Return Me.tableSMY_CUSTAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_CUSTOMER() As MST_CUSTOMERDataTable
        Get
            Return Me.tableMST_CUSTOMER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_COMPANY() As MST_COMPANYDataTable
        Get
            Return Me.tableMST_COMPANY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SMY_STATEMENT() As SMY_STATEMENTDataTable
        Get
            Return Me.tableSMY_STATEMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SMY_TRIAL_BALANCE() As SMY_TRIAL_BALANCEDataTable
        Get
            Return Me.tableSMY_TRIAL_BALANCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReportBLPL() As ReportBLPLDataTable
        Get
            Return Me.tableReportBLPL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SMY_INVPAYDETAIL() As SMY_INVPAYDETAILDataTable
        Get
            Return Me.tableSMY_INVPAYDETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InvoiceWithTax() As InvoiceWithTaxDataTable
        Get
            Return Me.tableInvoiceWithTax
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STKTAKELIST() As STKTAKELISTDataTable
        Get
            Return Me.tableSTKTAKELIST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_WAREHOUSE() As MST_WAREHOUSEDataTable
        Get
            Return Me.tableMST_WAREHOUSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CSAccReporting = CType(MyBase.Clone,CSAccReporting)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ReportBLBudget")) Is Nothing) Then
                MyBase.Tables.Add(New ReportBLBudgetDataTable(ds.Tables("ReportBLBudget")))
            End If
            If (Not (ds.Tables("TRN_APINV")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_APINVDataTable(ds.Tables("TRN_APINV")))
            End If
            If (Not (ds.Tables("MST_VENDOR")) Is Nothing) Then
                MyBase.Tables.Add(New MST_VENDORDataTable(ds.Tables("MST_VENDOR")))
            End If
            If (Not (ds.Tables("SMY_CUSTAGE")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_CUSTAGEDataTable(ds.Tables("SMY_CUSTAGE")))
            End If
            If (Not (ds.Tables("MST_CUSTOMER")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CUSTOMERDataTable(ds.Tables("MST_CUSTOMER")))
            End If
            If (Not (ds.Tables("MST_COMPANY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_COMPANYDataTable(ds.Tables("MST_COMPANY")))
            End If
            If (Not (ds.Tables("SMY_STATEMENT")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_STATEMENTDataTable(ds.Tables("SMY_STATEMENT")))
            End If
            If (Not (ds.Tables("SMY_TRIAL_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_TRIAL_BALANCEDataTable(ds.Tables("SMY_TRIAL_BALANCE")))
            End If
            If (Not (ds.Tables("ReportBLPL")) Is Nothing) Then
                MyBase.Tables.Add(New ReportBLPLDataTable(ds.Tables("ReportBLPL")))
            End If
            If (Not (ds.Tables("SMY_INVPAYDETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New SMY_INVPAYDETAILDataTable(ds.Tables("SMY_INVPAYDETAIL")))
            End If
            If (Not (ds.Tables("InvoiceWithTax")) Is Nothing) Then
                MyBase.Tables.Add(New InvoiceWithTaxDataTable(ds.Tables("InvoiceWithTax")))
            End If
            If (Not (ds.Tables("STKTAKELIST")) Is Nothing) Then
                MyBase.Tables.Add(New STKTAKELISTDataTable(ds.Tables("STKTAKELIST")))
            End If
            If (Not (ds.Tables("MST_WAREHOUSE")) Is Nothing) Then
                MyBase.Tables.Add(New MST_WAREHOUSEDataTable(ds.Tables("MST_WAREHOUSE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableReportBLBudget = CType(MyBase.Tables("ReportBLBudget"),ReportBLBudgetDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReportBLBudget) Is Nothing) Then
                Me.tableReportBLBudget.InitVars
            End If
        End If
        Me.tableTRN_APINV = CType(MyBase.Tables("TRN_APINV"),TRN_APINVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRN_APINV) Is Nothing) Then
                Me.tableTRN_APINV.InitVars
            End If
        End If
        Me.tableMST_VENDOR = CType(MyBase.Tables("MST_VENDOR"),MST_VENDORDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_VENDOR) Is Nothing) Then
                Me.tableMST_VENDOR.InitVars
            End If
        End If
        Me.tableSMY_CUSTAGE = CType(MyBase.Tables("SMY_CUSTAGE"),SMY_CUSTAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSMY_CUSTAGE) Is Nothing) Then
                Me.tableSMY_CUSTAGE.InitVars
            End If
        End If
        Me.tableMST_CUSTOMER = CType(MyBase.Tables("MST_CUSTOMER"),MST_CUSTOMERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_CUSTOMER) Is Nothing) Then
                Me.tableMST_CUSTOMER.InitVars
            End If
        End If
        Me.tableMST_COMPANY = CType(MyBase.Tables("MST_COMPANY"),MST_COMPANYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_COMPANY) Is Nothing) Then
                Me.tableMST_COMPANY.InitVars
            End If
        End If
        Me.tableSMY_STATEMENT = CType(MyBase.Tables("SMY_STATEMENT"),SMY_STATEMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSMY_STATEMENT) Is Nothing) Then
                Me.tableSMY_STATEMENT.InitVars
            End If
        End If
        Me.tableSMY_TRIAL_BALANCE = CType(MyBase.Tables("SMY_TRIAL_BALANCE"),SMY_TRIAL_BALANCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSMY_TRIAL_BALANCE) Is Nothing) Then
                Me.tableSMY_TRIAL_BALANCE.InitVars
            End If
        End If
        Me.tableReportBLPL = CType(MyBase.Tables("ReportBLPL"),ReportBLPLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReportBLPL) Is Nothing) Then
                Me.tableReportBLPL.InitVars
            End If
        End If
        Me.tableSMY_INVPAYDETAIL = CType(MyBase.Tables("SMY_INVPAYDETAIL"),SMY_INVPAYDETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSMY_INVPAYDETAIL) Is Nothing) Then
                Me.tableSMY_INVPAYDETAIL.InitVars
            End If
        End If
        Me.tableInvoiceWithTax = CType(MyBase.Tables("InvoiceWithTax"),InvoiceWithTaxDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInvoiceWithTax) Is Nothing) Then
                Me.tableInvoiceWithTax.InitVars
            End If
        End If
        Me.tableSTKTAKELIST = CType(MyBase.Tables("STKTAKELIST"),STKTAKELISTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTKTAKELIST) Is Nothing) Then
                Me.tableSTKTAKELIST.InitVars
            End If
        End If
        Me.tableMST_WAREHOUSE = CType(MyBase.Tables("MST_WAREHOUSE"),MST_WAREHOUSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_WAREHOUSE) Is Nothing) Then
                Me.tableMST_WAREHOUSE.InitVars
            End If
        End If
        Me.relationFK_TRN_ARINV_MST_CUSTOMER = Me.Relations("FK_TRN_ARINV_MST_CUSTOMER")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CSAccReporting"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CSAccReporting.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableReportBLBudget = New ReportBLBudgetDataTable
        MyBase.Tables.Add(Me.tableReportBLBudget)
        Me.tableTRN_APINV = New TRN_APINVDataTable(false)
        MyBase.Tables.Add(Me.tableTRN_APINV)
        Me.tableMST_VENDOR = New MST_VENDORDataTable
        MyBase.Tables.Add(Me.tableMST_VENDOR)
        Me.tableSMY_CUSTAGE = New SMY_CUSTAGEDataTable(false)
        MyBase.Tables.Add(Me.tableSMY_CUSTAGE)
        Me.tableMST_CUSTOMER = New MST_CUSTOMERDataTable
        MyBase.Tables.Add(Me.tableMST_CUSTOMER)
        Me.tableMST_COMPANY = New MST_COMPANYDataTable
        MyBase.Tables.Add(Me.tableMST_COMPANY)
        Me.tableSMY_STATEMENT = New SMY_STATEMENTDataTable(false)
        MyBase.Tables.Add(Me.tableSMY_STATEMENT)
        Me.tableSMY_TRIAL_BALANCE = New SMY_TRIAL_BALANCEDataTable(false)
        MyBase.Tables.Add(Me.tableSMY_TRIAL_BALANCE)
        Me.tableReportBLPL = New ReportBLPLDataTable(false)
        MyBase.Tables.Add(Me.tableReportBLPL)
        Me.tableSMY_INVPAYDETAIL = New SMY_INVPAYDETAILDataTable
        MyBase.Tables.Add(Me.tableSMY_INVPAYDETAIL)
        Me.tableInvoiceWithTax = New InvoiceWithTaxDataTable(false)
        MyBase.Tables.Add(Me.tableInvoiceWithTax)
        Me.tableSTKTAKELIST = New STKTAKELISTDataTable
        MyBase.Tables.Add(Me.tableSTKTAKELIST)
        Me.tableMST_WAREHOUSE = New MST_WAREHOUSEDataTable
        MyBase.Tables.Add(Me.tableMST_WAREHOUSE)
        Me.relationFK_TRN_ARINV_MST_CUSTOMER = New Global.System.Data.DataRelation("FK_TRN_ARINV_MST_CUSTOMER", New Global.System.Data.DataColumn() {Me.tableMST_CUSTOMER.CUSTOMER_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableSMY_STATEMENT.CUSTOMER_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_TRN_ARINV_MST_CUSTOMER)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReportBLBudget() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRN_APINV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_VENDOR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSMY_CUSTAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_CUSTOMER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_COMPANY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSMY_STATEMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSMY_TRIAL_BALANCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReportBLPL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSMY_INVPAYDETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInvoiceWithTax() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSTKTAKELIST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_WAREHOUSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CSAccReporting = New CSAccReporting
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.TRN_APINV.OWAMTColumn.Expression = "INVAMT - PAIDAMT"
        Me.SMY_CUSTAGE.DOMESTIC_AMTColumn.Expression = "(INVAMT * CURR_RATE) - (DISCAMT * CURR_RATE)"
        Me.SMY_CUSTAGE.DOMESTIC_PAIDColumn.Expression = "IsNull(PAIDAMT,0) * CURR_RATE"
        Me.SMY_CUSTAGE.DOMESTIC_OWColumn.Expression = "DOMESTIC_AMT - DOMESTIC_PAID"
        Me.SMY_CUSTAGE.OW_030Column.Expression = "IIF(AGE<=30, DOMESTIC_OW, 0)"
        Me.SMY_CUSTAGE.OW_060Column.Expression = "IIF(AGE > 30 AND AGE <=60, DOMESTIC_OW, 0)"
        Me.SMY_CUSTAGE.OW_090Column.Expression = "IIF(AGE > 61 AND AGE <=90, DOMESTIC_OW, 0)"
        Me.SMY_CUSTAGE.OW_120Column.Expression = "IIF(AGE >90 AND AGE <=120, DOMESTIC_OW, 0)"
        Me.SMY_CUSTAGE.OW_ABVColumn.Expression = "IIF(AGE > 120, DOMESTIC_OW, 0)"
        Me.SMY_STATEMENT.CUSTOMER_NAMEColumn.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).CUSTOMER_NAME"
        Me.SMY_STATEMENT.CUST_ADDR1Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR1"
        Me.SMY_STATEMENT.CUST_ADDR2Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR2"
        Me.SMY_STATEMENT.CUST_ADDR3Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR3"
        Me.SMY_STATEMENT.CUST_ADDR4Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR4"
        Me.SMY_STATEMENT.CUST_PHONEColumn.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).PHONE"
        Me.SMY_STATEMENT.CUST_FAXColumn.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).FAX"
        Me.SMY_STATEMENT.DOMESTIC_AMTColumn.Expression = "INVAMT * CURR_RATE"
        Me.SMY_STATEMENT.DOMESTIC_PAIDColumn.Expression = "ISNULL(PAIDAMT,0) * CURR_RATE"
        Me.SMY_STATEMENT.DOMESTIC_OWColumn.Expression = "DOMESTIC_AMT - DOMESTIC_PAID"
        Me.SMY_TRIAL_BALANCE.DEBIT_AMTColumn.Expression = "IIF(ACC_AMT>=0,ACC_AMT,0)"
        Me.SMY_TRIAL_BALANCE.CREDIT_AMTColumn.Expression = "IIF(ACC_AMT<0,ACC_AMT* -1,0)"
        Me.ReportBLPL.CMPYTOTALColumn.Expression = "TOTALAMT-LTOTALAMT"
        Me.ReportBLPL.CMPMTOTALColumn.Expression = "MTH_TOTALAMT-LMTH_TOTALAMT"
        Me.InvoiceWithTax.DOMESTIC_AMTColumn.Expression = "INVAMT * CURR_RATE"
        Me.InvoiceWithTax.DOMESTIC_TAX1Column.Expression = "TAX_AMT1 * CURR_RATE"
        Me.InvoiceWithTax.DOMESTIC_TAX2Column.Expression = "TAX_AMT2 * CURR_RATE"
    End Sub
    
    Public Delegate Sub ReportBLBudgetRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportBLBudgetRowChangeEvent)
    
    Public Delegate Sub TRN_APINVRowChangeEventHandler(ByVal sender As Object, ByVal e As TRN_APINVRowChangeEvent)
    
    Public Delegate Sub MST_VENDORRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_VENDORRowChangeEvent)
    
    Public Delegate Sub SMY_CUSTAGERowChangeEventHandler(ByVal sender As Object, ByVal e As SMY_CUSTAGERowChangeEvent)
    
    Public Delegate Sub MST_CUSTOMERRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_CUSTOMERRowChangeEvent)
    
    Public Delegate Sub MST_COMPANYRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_COMPANYRowChangeEvent)
    
    Public Delegate Sub SMY_STATEMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As SMY_STATEMENTRowChangeEvent)
    
    Public Delegate Sub SMY_TRIAL_BALANCERowChangeEventHandler(ByVal sender As Object, ByVal e As SMY_TRIAL_BALANCERowChangeEvent)
    
    Public Delegate Sub ReportBLPLRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportBLPLRowChangeEvent)
    
    Public Delegate Sub SMY_INVPAYDETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As SMY_INVPAYDETAILRowChangeEvent)
    
    Public Delegate Sub InvoiceWithTaxRowChangeEventHandler(ByVal sender As Object, ByVal e As InvoiceWithTaxRowChangeEvent)
    
    Public Delegate Sub STKTAKELISTRowChangeEventHandler(ByVal sender As Object, ByVal e As STKTAKELISTRowChangeEvent)
    
    Public Delegate Sub MST_WAREHOUSERowChangeEventHandler(ByVal sender As Object, ByVal e As MST_WAREHOUSERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReportBLBudgetDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRINTDESC As Global.System.Data.DataColumn
        
        Private columnTOTALAMT As Global.System.Data.DataColumn
        
        Private columnBUDGETAMT As Global.System.Data.DataColumn
        
        Private columnVARAMT As Global.System.Data.DataColumn
        
        Private columnRPTTYPE_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ReportBLBudget"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRINTDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINTDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGETAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGETAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VARAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPTTYPE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPTTYPE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReportBLBudgetRow
            Get
                Return CType(Me.Rows(index),ReportBLBudgetRow)
            End Get
        End Property
        
        Public Event ReportBLBudgetRowChanging As ReportBLBudgetRowChangeEventHandler
        
        Public Event ReportBLBudgetRowChanged As ReportBLBudgetRowChangeEventHandler
        
        Public Event ReportBLBudgetRowDeleting As ReportBLBudgetRowChangeEventHandler
        
        Public Event ReportBLBudgetRowDeleted As ReportBLBudgetRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReportBLBudgetRow(ByVal row As ReportBLBudgetRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReportBLBudgetRow(ByVal PRINTDESC As String, ByVal TOTALAMT As Decimal, ByVal BUDGETAMT As Decimal, ByVal VARAMT As Decimal, ByVal RPTTYPE_CODE As String) As ReportBLBudgetRow
            Dim rowReportBLBudgetRow As ReportBLBudgetRow = CType(Me.NewRow,ReportBLBudgetRow)
            Dim columnValuesArray() As Object = New Object() {PRINTDESC, TOTALAMT, BUDGETAMT, VARAMT, RPTTYPE_CODE}
            rowReportBLBudgetRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReportBLBudgetRow)
            Return rowReportBLBudgetRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReportBLBudgetDataTable = CType(MyBase.Clone,ReportBLBudgetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReportBLBudgetDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRINTDESC = MyBase.Columns("PRINTDESC")
            Me.columnTOTALAMT = MyBase.Columns("TOTALAMT")
            Me.columnBUDGETAMT = MyBase.Columns("BUDGETAMT")
            Me.columnVARAMT = MyBase.Columns("VARAMT")
            Me.columnRPTTYPE_CODE = MyBase.Columns("RPTTYPE_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRINTDESC = New Global.System.Data.DataColumn("PRINTDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINTDESC)
            Me.columnTOTALAMT = New Global.System.Data.DataColumn("TOTALAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALAMT)
            Me.columnBUDGETAMT = New Global.System.Data.DataColumn("BUDGETAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGETAMT)
            Me.columnVARAMT = New Global.System.Data.DataColumn("VARAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARAMT)
            Me.columnRPTTYPE_CODE = New Global.System.Data.DataColumn("RPTTYPE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPTTYPE_CODE)
            Me.columnPRINTDESC.ReadOnly = true
            Me.columnPRINTDESC.MaxLength = 50
            Me.columnTOTALAMT.ReadOnly = true
            Me.columnBUDGETAMT.ReadOnly = true
            Me.columnRPTTYPE_CODE.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReportBLBudgetRow() As ReportBLBudgetRow
            Return CType(Me.NewRow,ReportBLBudgetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReportBLBudgetRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReportBLBudgetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReportBLBudgetRowChangedEvent) Is Nothing) Then
                RaiseEvent ReportBLBudgetRowChanged(Me, New ReportBLBudgetRowChangeEvent(CType(e.Row,ReportBLBudgetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReportBLBudgetRowChangingEvent) Is Nothing) Then
                RaiseEvent ReportBLBudgetRowChanging(Me, New ReportBLBudgetRowChangeEvent(CType(e.Row,ReportBLBudgetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReportBLBudgetRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReportBLBudgetRowDeleted(Me, New ReportBLBudgetRowChangeEvent(CType(e.Row,ReportBLBudgetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReportBLBudgetRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReportBLBudgetRowDeleting(Me, New ReportBLBudgetRowChangeEvent(CType(e.Row,ReportBLBudgetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReportBLBudgetRow(ByVal row As ReportBLBudgetRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReportBLBudgetDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRN_APINVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnVENDOR_CODE As Global.System.Data.DataColumn
        
        Private columnVENDOR_NAME As Global.System.Data.DataColumn
        
        Private columnINVOICENO As Global.System.Data.DataColumn
        
        Private columnINVDATE As Global.System.Data.DataColumn
        
        Private columnDUEDATE As Global.System.Data.DataColumn
        
        Private columnINVAMT As Global.System.Data.DataColumn
        
        Private columnPAIDAMT As Global.System.Data.DataColumn
        
        Private columnDISCAMT As Global.System.Data.DataColumn
        
        Private columnPAIDDATE As Global.System.Data.DataColumn
        
        Private columnOWAMT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "TRN_APINV"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDOR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDOR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDOR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDOR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OWAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOWAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRN_APINVRow
            Get
                Return CType(Me.Rows(index),TRN_APINVRow)
            End Get
        End Property
        
        Public Event TRN_APINVRowChanging As TRN_APINVRowChangeEventHandler
        
        Public Event TRN_APINVRowChanged As TRN_APINVRowChangeEventHandler
        
        Public Event TRN_APINVRowDeleting As TRN_APINVRowChangeEventHandler
        
        Public Event TRN_APINVRowDeleted As TRN_APINVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRN_APINVRow(ByVal row As TRN_APINVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_APINVRow(ByVal VENDOR_CODE As String, ByVal VENDOR_NAME As String, ByVal INVOICENO As String, ByVal INVDATE As Date, ByVal DUEDATE As Date, ByVal INVAMT As Decimal, ByVal PAIDAMT As Decimal, ByVal DISCAMT As Decimal, ByVal PAIDDATE As Date, ByVal OWAMT As Decimal) As TRN_APINVRow
            Dim rowTRN_APINVRow As TRN_APINVRow = CType(Me.NewRow,TRN_APINVRow)
            Dim columnValuesArray() As Object = New Object() {VENDOR_CODE, VENDOR_NAME, INVOICENO, INVDATE, DUEDATE, INVAMT, PAIDAMT, DISCAMT, PAIDDATE, OWAMT}
            rowTRN_APINVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_APINVRow)
            Return rowTRN_APINVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_APINVRow(ByVal VENDOR_CODE As String, ByVal VENDOR_NAME As String, ByVal INVOICENO As String, ByVal INVDATE As Date, ByVal DUEDATE As Date, ByVal INVAMT As Decimal, ByVal PAIDAMT As Decimal, ByVal DISCAMT As Decimal, ByVal PAIDDATE As Date) As TRN_APINVRow
            Dim rowTRN_APINVRow As TRN_APINVRow = CType(Me.NewRow,TRN_APINVRow)
            Dim columnValuesArray() As Object = New Object() {VENDOR_CODE, VENDOR_NAME, INVOICENO, INVDATE, DUEDATE, INVAMT, PAIDAMT, DISCAMT, PAIDDATE, Nothing}
            rowTRN_APINVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_APINVRow)
            Return rowTRN_APINVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRN_APINVDataTable = CType(MyBase.Clone,TRN_APINVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRN_APINVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVENDOR_CODE = MyBase.Columns("VENDOR_CODE")
            Me.columnVENDOR_NAME = MyBase.Columns("VENDOR_NAME")
            Me.columnINVOICENO = MyBase.Columns("INVOICENO")
            Me.columnINVDATE = MyBase.Columns("INVDATE")
            Me.columnDUEDATE = MyBase.Columns("DUEDATE")
            Me.columnINVAMT = MyBase.Columns("INVAMT")
            Me.columnPAIDAMT = MyBase.Columns("PAIDAMT")
            Me.columnDISCAMT = MyBase.Columns("DISCAMT")
            Me.columnPAIDDATE = MyBase.Columns("PAIDDATE")
            Me.columnOWAMT = MyBase.Columns("OWAMT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVENDOR_CODE = New Global.System.Data.DataColumn("VENDOR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDOR_CODE)
            Me.columnVENDOR_NAME = New Global.System.Data.DataColumn("VENDOR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDOR_NAME)
            Me.columnINVOICENO = New Global.System.Data.DataColumn("INVOICENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICENO)
            Me.columnINVDATE = New Global.System.Data.DataColumn("INVDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVDATE)
            Me.columnDUEDATE = New Global.System.Data.DataColumn("DUEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUEDATE)
            Me.columnINVAMT = New Global.System.Data.DataColumn("INVAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVAMT)
            Me.columnPAIDAMT = New Global.System.Data.DataColumn("PAIDAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDAMT)
            Me.columnDISCAMT = New Global.System.Data.DataColumn("DISCAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCAMT)
            Me.columnPAIDDATE = New Global.System.Data.DataColumn("PAIDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDDATE)
            Me.columnOWAMT = New Global.System.Data.DataColumn("OWAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOWAMT)
            Me.columnVENDOR_CODE.AllowDBNull = false
            Me.columnVENDOR_CODE.MaxLength = 10
            Me.columnVENDOR_NAME.AllowDBNull = false
            Me.columnVENDOR_NAME.MaxLength = 50
            Me.columnINVOICENO.AllowDBNull = false
            Me.columnINVOICENO.MaxLength = 15
            Me.columnINVDATE.AllowDBNull = false
            Me.columnOWAMT.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRN_APINVRow() As TRN_APINVRow
            Return CType(Me.NewRow,TRN_APINVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRN_APINVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRN_APINVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.OWAMTColumn.Expression = "INVAMT - PAIDAMT"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRN_APINVRowChangedEvent) Is Nothing) Then
                RaiseEvent TRN_APINVRowChanged(Me, New TRN_APINVRowChangeEvent(CType(e.Row,TRN_APINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRN_APINVRowChangingEvent) Is Nothing) Then
                RaiseEvent TRN_APINVRowChanging(Me, New TRN_APINVRowChangeEvent(CType(e.Row,TRN_APINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRN_APINVRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRN_APINVRowDeleted(Me, New TRN_APINVRowChangeEvent(CType(e.Row,TRN_APINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRN_APINVRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRN_APINVRowDeleting(Me, New TRN_APINVRowChangeEvent(CType(e.Row,TRN_APINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRN_APINVRow(ByVal row As TRN_APINVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRN_APINVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_VENDORDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnVENDOR_CODE As Global.System.Data.DataColumn
        
        Private columnVENDOR_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_VENDOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDOR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDOR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDOR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDOR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_VENDORRow
            Get
                Return CType(Me.Rows(index),MST_VENDORRow)
            End Get
        End Property
        
        Public Event MST_VENDORRowChanging As MST_VENDORRowChangeEventHandler
        
        Public Event MST_VENDORRowChanged As MST_VENDORRowChangeEventHandler
        
        Public Event MST_VENDORRowDeleting As MST_VENDORRowChangeEventHandler
        
        Public Event MST_VENDORRowDeleted As MST_VENDORRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_VENDORRow(ByVal row As MST_VENDORRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_VENDORRow(ByVal VENDOR_CODE As String, ByVal VENDOR_NAME As String) As MST_VENDORRow
            Dim rowMST_VENDORRow As MST_VENDORRow = CType(Me.NewRow,MST_VENDORRow)
            Dim columnValuesArray() As Object = New Object() {VENDOR_CODE, VENDOR_NAME}
            rowMST_VENDORRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_VENDORRow)
            Return rowMST_VENDORRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByVENDOR_CODE(ByVal VENDOR_CODE As String) As MST_VENDORRow
            Return CType(Me.Rows.Find(New Object() {VENDOR_CODE}),MST_VENDORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_VENDORDataTable = CType(MyBase.Clone,MST_VENDORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_VENDORDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVENDOR_CODE = MyBase.Columns("VENDOR_CODE")
            Me.columnVENDOR_NAME = MyBase.Columns("VENDOR_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVENDOR_CODE = New Global.System.Data.DataColumn("VENDOR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDOR_CODE)
            Me.columnVENDOR_NAME = New Global.System.Data.DataColumn("VENDOR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDOR_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVENDOR_CODE}, true))
            Me.columnVENDOR_CODE.AllowDBNull = false
            Me.columnVENDOR_CODE.Unique = true
            Me.columnVENDOR_CODE.MaxLength = 10
            Me.columnVENDOR_NAME.AllowDBNull = false
            Me.columnVENDOR_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_VENDORRow() As MST_VENDORRow
            Return CType(Me.NewRow,MST_VENDORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_VENDORRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_VENDORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_VENDORRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_VENDORRowChanged(Me, New MST_VENDORRowChangeEvent(CType(e.Row,MST_VENDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_VENDORRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_VENDORRowChanging(Me, New MST_VENDORRowChangeEvent(CType(e.Row,MST_VENDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_VENDORRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_VENDORRowDeleted(Me, New MST_VENDORRowChangeEvent(CType(e.Row,MST_VENDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_VENDORRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_VENDORRowDeleting(Me, New MST_VENDORRowChangeEvent(CType(e.Row,MST_VENDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_VENDORRow(ByVal row As MST_VENDORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_VENDORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SMY_CUSTAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCUSTOMER_CODE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn
        
        Private columnINVOICENO As Global.System.Data.DataColumn
        
        Private columnINVDATE As Global.System.Data.DataColumn
        
        Private columnINVAMT As Global.System.Data.DataColumn
        
        Private columnPAIDAMT As Global.System.Data.DataColumn
        
        Private columnCURR_RATE As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_AMT As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_PAID As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_OW As Global.System.Data.DataColumn
        
        Private columnOW_030 As Global.System.Data.DataColumn
        
        Private columnOW_060 As Global.System.Data.DataColumn
        
        Private columnOW_090 As Global.System.Data.DataColumn
        
        Private columnOW_120 As Global.System.Data.DataColumn
        
        Private columnOW_ABV As Global.System.Data.DataColumn
        
        Private columnAGE As Global.System.Data.DataColumn
        
        Private columnDISCAMT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "SMY_CUSTAGE"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_OWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_OW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OW_030Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOW_030
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OW_060Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOW_060
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OW_090Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOW_090
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OW_120Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOW_120
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OW_ABVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOW_ABV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SMY_CUSTAGERow
            Get
                Return CType(Me.Rows(index),SMY_CUSTAGERow)
            End Get
        End Property
        
        Public Event SMY_CUSTAGERowChanging As SMY_CUSTAGERowChangeEventHandler
        
        Public Event SMY_CUSTAGERowChanged As SMY_CUSTAGERowChangeEventHandler
        
        Public Event SMY_CUSTAGERowDeleting As SMY_CUSTAGERowChangeEventHandler
        
        Public Event SMY_CUSTAGERowDeleted As SMY_CUSTAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSMY_CUSTAGERow(ByVal row As SMY_CUSTAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSMY_CUSTAGERow( _
                    ByVal CUSTOMER_CODE As String,  _
                    ByVal CUSTOMER_NAME As String,  _
                    ByVal INVOICENO As String,  _
                    ByVal INVDATE As Date,  _
                    ByVal INVAMT As Decimal,  _
                    ByVal PAIDAMT As Decimal,  _
                    ByVal CURR_RATE As Decimal,  _
                    ByVal DOMESTIC_AMT As Decimal,  _
                    ByVal DOMESTIC_PAID As Decimal,  _
                    ByVal DOMESTIC_OW As Decimal,  _
                    ByVal OW_030 As Decimal,  _
                    ByVal OW_060 As Decimal,  _
                    ByVal OW_090 As Decimal,  _
                    ByVal OW_120 As Decimal,  _
                    ByVal OW_ABV As Decimal,  _
                    ByVal AGE As Integer,  _
                    ByVal DISCAMT As Decimal) As SMY_CUSTAGERow
            Dim rowSMY_CUSTAGERow As SMY_CUSTAGERow = CType(Me.NewRow,SMY_CUSTAGERow)
            Dim columnValuesArray() As Object = New Object() {CUSTOMER_CODE, CUSTOMER_NAME, INVOICENO, INVDATE, INVAMT, PAIDAMT, CURR_RATE, DOMESTIC_AMT, DOMESTIC_PAID, DOMESTIC_OW, OW_030, OW_060, OW_090, OW_120, OW_ABV, AGE, DISCAMT}
            rowSMY_CUSTAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSMY_CUSTAGERow)
            Return rowSMY_CUSTAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSMY_CUSTAGERow(ByVal CUSTOMER_CODE As String, ByVal CUSTOMER_NAME As String, ByVal INVOICENO As String, ByVal INVDATE As Date, ByVal INVAMT As Decimal, ByVal PAIDAMT As Decimal, ByVal CURR_RATE As Decimal, ByVal AGE As Integer, ByVal DISCAMT As Decimal) As SMY_CUSTAGERow
            Dim rowSMY_CUSTAGERow As SMY_CUSTAGERow = CType(Me.NewRow,SMY_CUSTAGERow)
            Dim columnValuesArray() As Object = New Object() {CUSTOMER_CODE, CUSTOMER_NAME, INVOICENO, INVDATE, INVAMT, PAIDAMT, CURR_RATE, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, AGE, DISCAMT}
            rowSMY_CUSTAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSMY_CUSTAGERow)
            Return rowSMY_CUSTAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SMY_CUSTAGEDataTable = CType(MyBase.Clone,SMY_CUSTAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SMY_CUSTAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCUSTOMER_CODE = MyBase.Columns("CUSTOMER_CODE")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnINVOICENO = MyBase.Columns("INVOICENO")
            Me.columnINVDATE = MyBase.Columns("INVDATE")
            Me.columnINVAMT = MyBase.Columns("INVAMT")
            Me.columnPAIDAMT = MyBase.Columns("PAIDAMT")
            Me.columnCURR_RATE = MyBase.Columns("CURR_RATE")
            Me.columnDOMESTIC_AMT = MyBase.Columns("DOMESTIC_AMT")
            Me.columnDOMESTIC_PAID = MyBase.Columns("DOMESTIC_PAID")
            Me.columnDOMESTIC_OW = MyBase.Columns("DOMESTIC_OW")
            Me.columnOW_030 = MyBase.Columns("OW_030")
            Me.columnOW_060 = MyBase.Columns("OW_060")
            Me.columnOW_090 = MyBase.Columns("OW_090")
            Me.columnOW_120 = MyBase.Columns("OW_120")
            Me.columnOW_ABV = MyBase.Columns("OW_ABV")
            Me.columnAGE = MyBase.Columns("AGE")
            Me.columnDISCAMT = MyBase.Columns("DISCAMT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCUSTOMER_CODE = New Global.System.Data.DataColumn("CUSTOMER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_CODE)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnINVOICENO = New Global.System.Data.DataColumn("INVOICENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICENO)
            Me.columnINVDATE = New Global.System.Data.DataColumn("INVDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVDATE)
            Me.columnINVAMT = New Global.System.Data.DataColumn("INVAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVAMT)
            Me.columnPAIDAMT = New Global.System.Data.DataColumn("PAIDAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDAMT)
            Me.columnCURR_RATE = New Global.System.Data.DataColumn("CURR_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_RATE)
            Me.columnDOMESTIC_AMT = New Global.System.Data.DataColumn("DOMESTIC_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_AMT)
            Me.columnDOMESTIC_PAID = New Global.System.Data.DataColumn("DOMESTIC_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_PAID)
            Me.columnDOMESTIC_OW = New Global.System.Data.DataColumn("DOMESTIC_OW", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_OW)
            Me.columnOW_030 = New Global.System.Data.DataColumn("OW_030", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOW_030)
            Me.columnOW_060 = New Global.System.Data.DataColumn("OW_060", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOW_060)
            Me.columnOW_090 = New Global.System.Data.DataColumn("OW_090", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOW_090)
            Me.columnOW_120 = New Global.System.Data.DataColumn("OW_120", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOW_120)
            Me.columnOW_ABV = New Global.System.Data.DataColumn("OW_ABV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOW_ABV)
            Me.columnAGE = New Global.System.Data.DataColumn("AGE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGE)
            Me.columnDISCAMT = New Global.System.Data.DataColumn("DISCAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCAMT)
            Me.columnCUSTOMER_CODE.AllowDBNull = false
            Me.columnCUSTOMER_CODE.MaxLength = 10
            Me.columnCUSTOMER_NAME.AllowDBNull = false
            Me.columnCUSTOMER_NAME.MaxLength = 50
            Me.columnINVOICENO.AllowDBNull = false
            Me.columnINVOICENO.MaxLength = 15
            Me.columnINVDATE.AllowDBNull = false
            Me.columnINVAMT.AllowDBNull = false
            Me.columnPAIDAMT.AllowDBNull = false
            Me.columnCURR_RATE.AllowDBNull = false
            Me.columnDOMESTIC_AMT.ReadOnly = true
            Me.columnDOMESTIC_PAID.ReadOnly = true
            Me.columnDOMESTIC_OW.ReadOnly = true
            Me.columnOW_030.ReadOnly = true
            Me.columnOW_060.ReadOnly = true
            Me.columnOW_090.ReadOnly = true
            Me.columnOW_120.ReadOnly = true
            Me.columnOW_ABV.ReadOnly = true
            Me.columnAGE.ReadOnly = true
            Me.columnDISCAMT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSMY_CUSTAGERow() As SMY_CUSTAGERow
            Return CType(Me.NewRow,SMY_CUSTAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SMY_CUSTAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SMY_CUSTAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.DOMESTIC_AMTColumn.Expression = "(INVAMT * CURR_RATE) - (DISCAMT * CURR_RATE)"
            Me.DOMESTIC_PAIDColumn.Expression = "IsNull(PAIDAMT,0) * CURR_RATE"
            Me.DOMESTIC_OWColumn.Expression = "DOMESTIC_AMT - DOMESTIC_PAID"
            Me.OW_030Column.Expression = "IIF(AGE<=30, DOMESTIC_OW, 0)"
            Me.OW_060Column.Expression = "IIF(AGE > 30 AND AGE <=60, DOMESTIC_OW, 0)"
            Me.OW_090Column.Expression = "IIF(AGE > 61 AND AGE <=90, DOMESTIC_OW, 0)"
            Me.OW_120Column.Expression = "IIF(AGE >90 AND AGE <=120, DOMESTIC_OW, 0)"
            Me.OW_ABVColumn.Expression = "IIF(AGE > 120, DOMESTIC_OW, 0)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SMY_CUSTAGERowChangedEvent) Is Nothing) Then
                RaiseEvent SMY_CUSTAGERowChanged(Me, New SMY_CUSTAGERowChangeEvent(CType(e.Row,SMY_CUSTAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SMY_CUSTAGERowChangingEvent) Is Nothing) Then
                RaiseEvent SMY_CUSTAGERowChanging(Me, New SMY_CUSTAGERowChangeEvent(CType(e.Row,SMY_CUSTAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SMY_CUSTAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent SMY_CUSTAGERowDeleted(Me, New SMY_CUSTAGERowChangeEvent(CType(e.Row,SMY_CUSTAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SMY_CUSTAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent SMY_CUSTAGERowDeleting(Me, New SMY_CUSTAGERowChangeEvent(CType(e.Row,SMY_CUSTAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSMY_CUSTAGERow(ByVal row As SMY_CUSTAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SMY_CUSTAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_CUSTOMERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCUSTOMER_CODE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn
        
        Private columnADDR1 As Global.System.Data.DataColumn
        
        Private columnADDR2 As Global.System.Data.DataColumn
        
        Private columnADDR3 As Global.System.Data.DataColumn
        
        Private columnADDR4 As Global.System.Data.DataColumn
        
        Private columnPHONE As Global.System.Data.DataColumn
        
        Private columnFAX As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_CUSTOMER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_CUSTOMERRow
            Get
                Return CType(Me.Rows(index),MST_CUSTOMERRow)
            End Get
        End Property
        
        Public Event MST_CUSTOMERRowChanging As MST_CUSTOMERRowChangeEventHandler
        
        Public Event MST_CUSTOMERRowChanged As MST_CUSTOMERRowChangeEventHandler
        
        Public Event MST_CUSTOMERRowDeleting As MST_CUSTOMERRowChangeEventHandler
        
        Public Event MST_CUSTOMERRowDeleted As MST_CUSTOMERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_CUSTOMERRow(ByVal row As MST_CUSTOMERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_CUSTOMERRow(ByVal CUSTOMER_CODE As String, ByVal CUSTOMER_NAME As String, ByVal ADDR1 As String, ByVal ADDR2 As String, ByVal ADDR3 As String, ByVal ADDR4 As String, ByVal PHONE As String, ByVal FAX As String) As MST_CUSTOMERRow
            Dim rowMST_CUSTOMERRow As MST_CUSTOMERRow = CType(Me.NewRow,MST_CUSTOMERRow)
            Dim columnValuesArray() As Object = New Object() {CUSTOMER_CODE, CUSTOMER_NAME, ADDR1, ADDR2, ADDR3, ADDR4, PHONE, FAX}
            rowMST_CUSTOMERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_CUSTOMERRow)
            Return rowMST_CUSTOMERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCUSTOMER_CODE(ByVal CUSTOMER_CODE As String) As MST_CUSTOMERRow
            Return CType(Me.Rows.Find(New Object() {CUSTOMER_CODE}),MST_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_CUSTOMERDataTable = CType(MyBase.Clone,MST_CUSTOMERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_CUSTOMERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCUSTOMER_CODE = MyBase.Columns("CUSTOMER_CODE")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnADDR1 = MyBase.Columns("ADDR1")
            Me.columnADDR2 = MyBase.Columns("ADDR2")
            Me.columnADDR3 = MyBase.Columns("ADDR3")
            Me.columnADDR4 = MyBase.Columns("ADDR4")
            Me.columnPHONE = MyBase.Columns("PHONE")
            Me.columnFAX = MyBase.Columns("FAX")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCUSTOMER_CODE = New Global.System.Data.DataColumn("CUSTOMER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_CODE)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnADDR1 = New Global.System.Data.DataColumn("ADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR1)
            Me.columnADDR2 = New Global.System.Data.DataColumn("ADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR2)
            Me.columnADDR3 = New Global.System.Data.DataColumn("ADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR3)
            Me.columnADDR4 = New Global.System.Data.DataColumn("ADDR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR4)
            Me.columnPHONE = New Global.System.Data.DataColumn("PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONE)
            Me.columnFAX = New Global.System.Data.DataColumn("FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCUSTOMER_CODE}, true))
            Me.columnCUSTOMER_CODE.AllowDBNull = false
            Me.columnCUSTOMER_CODE.Unique = true
            Me.columnCUSTOMER_CODE.MaxLength = 10
            Me.columnCUSTOMER_NAME.AllowDBNull = false
            Me.columnCUSTOMER_NAME.MaxLength = 50
            Me.columnADDR1.MaxLength = 50
            Me.columnADDR2.MaxLength = 50
            Me.columnADDR3.MaxLength = 50
            Me.columnADDR4.MaxLength = 50
            Me.columnPHONE.MaxLength = 15
            Me.columnFAX.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_CUSTOMERRow() As MST_CUSTOMERRow
            Return CType(Me.NewRow,MST_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_CUSTOMERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_CUSTOMERRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowChanged(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_CUSTOMERRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowChanging(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_CUSTOMERRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowDeleted(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_CUSTOMERRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowDeleting(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_CUSTOMERRow(ByVal row As MST_CUSTOMERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_CUSTOMERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_COMPANYDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOMPNO As Global.System.Data.DataColumn
        
        Private columnCOMP_NAME As Global.System.Data.DataColumn
        
        Private columnREG_CODE As Global.System.Data.DataColumn
        
        Private columnADDR1 As Global.System.Data.DataColumn
        
        Private columnADDR2 As Global.System.Data.DataColumn
        
        Private columnADDR3 As Global.System.Data.DataColumn
        
        Private columnADDR4 As Global.System.Data.DataColumn
        
        Private columnPHONENO As Global.System.Data.DataColumn
        
        Private columnFAXNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_COMPANY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REG_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREG_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHONENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAXNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAXNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_COMPANYRow
            Get
                Return CType(Me.Rows(index),MST_COMPANYRow)
            End Get
        End Property
        
        Public Event MST_COMPANYRowChanging As MST_COMPANYRowChangeEventHandler
        
        Public Event MST_COMPANYRowChanged As MST_COMPANYRowChangeEventHandler
        
        Public Event MST_COMPANYRowDeleting As MST_COMPANYRowChangeEventHandler
        
        Public Event MST_COMPANYRowDeleted As MST_COMPANYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_COMPANYRow(ByVal row As MST_COMPANYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_COMPANYRow(ByVal COMP_NAME As String, ByVal REG_CODE As String, ByVal ADDR1 As String, ByVal ADDR2 As String, ByVal ADDR3 As String, ByVal ADDR4 As String, ByVal PHONENO As String, ByVal FAXNO As String) As MST_COMPANYRow
            Dim rowMST_COMPANYRow As MST_COMPANYRow = CType(Me.NewRow,MST_COMPANYRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, COMP_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONENO, FAXNO}
            rowMST_COMPANYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_COMPANYRow)
            Return rowMST_COMPANYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOMPNO(ByVal COMPNO As Integer) As MST_COMPANYRow
            Return CType(Me.Rows.Find(New Object() {COMPNO}),MST_COMPANYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_COMPANYDataTable = CType(MyBase.Clone,MST_COMPANYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_COMPANYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOMPNO = MyBase.Columns("COMPNO")
            Me.columnCOMP_NAME = MyBase.Columns("COMP_NAME")
            Me.columnREG_CODE = MyBase.Columns("REG_CODE")
            Me.columnADDR1 = MyBase.Columns("ADDR1")
            Me.columnADDR2 = MyBase.Columns("ADDR2")
            Me.columnADDR3 = MyBase.Columns("ADDR3")
            Me.columnADDR4 = MyBase.Columns("ADDR4")
            Me.columnPHONENO = MyBase.Columns("PHONENO")
            Me.columnFAXNO = MyBase.Columns("FAXNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOMPNO = New Global.System.Data.DataColumn("COMPNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPNO)
            Me.columnCOMP_NAME = New Global.System.Data.DataColumn("COMP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMP_NAME)
            Me.columnREG_CODE = New Global.System.Data.DataColumn("REG_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREG_CODE)
            Me.columnADDR1 = New Global.System.Data.DataColumn("ADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR1)
            Me.columnADDR2 = New Global.System.Data.DataColumn("ADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR2)
            Me.columnADDR3 = New Global.System.Data.DataColumn("ADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR3)
            Me.columnADDR4 = New Global.System.Data.DataColumn("ADDR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR4)
            Me.columnPHONENO = New Global.System.Data.DataColumn("PHONENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONENO)
            Me.columnFAXNO = New Global.System.Data.DataColumn("FAXNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAXNO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOMPNO}, true))
            Me.columnCOMPNO.AutoIncrement = true
            Me.columnCOMPNO.AllowDBNull = false
            Me.columnCOMPNO.ReadOnly = true
            Me.columnCOMPNO.Unique = true
            Me.columnCOMP_NAME.AllowDBNull = false
            Me.columnCOMP_NAME.MaxLength = 50
            Me.columnREG_CODE.MaxLength = 15
            Me.columnADDR1.MaxLength = 50
            Me.columnADDR2.MaxLength = 50
            Me.columnADDR3.MaxLength = 50
            Me.columnADDR4.MaxLength = 50
            Me.columnPHONENO.MaxLength = 15
            Me.columnFAXNO.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_COMPANYRow() As MST_COMPANYRow
            Return CType(Me.NewRow,MST_COMPANYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_COMPANYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_COMPANYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_COMPANYRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowChanged(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_COMPANYRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowChanging(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_COMPANYRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowDeleted(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_COMPANYRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowDeleting(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_COMPANYRow(ByVal row As MST_COMPANYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_COMPANYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SMY_STATEMENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCUSTOMER_CODE As Global.System.Data.DataColumn
        
        Private columnINVDESC As Global.System.Data.DataColumn
        
        Private columnINVOICENO As Global.System.Data.DataColumn
        
        Private columnINVDATE As Global.System.Data.DataColumn
        
        Private columnINVAMT As Global.System.Data.DataColumn
        
        Private columnPAIDAMT As Global.System.Data.DataColumn
        
        Private columnCURR_RATE As Global.System.Data.DataColumn
        
        Private columnDUEDATE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn
        
        Private columnCUST_ADDR1 As Global.System.Data.DataColumn
        
        Private columnCUST_ADDR2 As Global.System.Data.DataColumn
        
        Private columnCUST_ADDR3 As Global.System.Data.DataColumn
        
        Private columnCUST_ADDR4 As Global.System.Data.DataColumn
        
        Private columnCUST_PHONE As Global.System.Data.DataColumn
        
        Private columnCUST_FAX As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_AMT As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_PAID As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_OW As Global.System.Data.DataColumn
        
        Private columnARINVNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "SMY_STATEMENT"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_ADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_ADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_ADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_ADDR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ADDR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_OWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_OW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ARINVNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARINVNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SMY_STATEMENTRow
            Get
                Return CType(Me.Rows(index),SMY_STATEMENTRow)
            End Get
        End Property
        
        Public Event SMY_STATEMENTRowChanging As SMY_STATEMENTRowChangeEventHandler
        
        Public Event SMY_STATEMENTRowChanged As SMY_STATEMENTRowChangeEventHandler
        
        Public Event SMY_STATEMENTRowDeleting As SMY_STATEMENTRowChangeEventHandler
        
        Public Event SMY_STATEMENTRowDeleted As SMY_STATEMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSMY_STATEMENTRow(ByVal row As SMY_STATEMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSMY_STATEMENTRow( _
                    ByVal parentMST_CUSTOMERRowByFK_TRN_ARINV_MST_CUSTOMER As MST_CUSTOMERRow,  _
                    ByVal INVDESC As String,  _
                    ByVal INVOICENO As String,  _
                    ByVal INVDATE As Date,  _
                    ByVal INVAMT As Decimal,  _
                    ByVal PAIDAMT As Decimal,  _
                    ByVal CURR_RATE As Decimal,  _
                    ByVal DUEDATE As Date,  _
                    ByVal CUSTOMER_NAME As String,  _
                    ByVal CUST_ADDR1 As String,  _
                    ByVal CUST_ADDR2 As String,  _
                    ByVal CUST_ADDR3 As String,  _
                    ByVal CUST_ADDR4 As String,  _
                    ByVal CUST_PHONE As String,  _
                    ByVal CUST_FAX As String,  _
                    ByVal DOMESTIC_AMT As Decimal,  _
                    ByVal DOMESTIC_PAID As Decimal,  _
                    ByVal DOMESTIC_OW As Decimal,  _
                    ByVal ARINVNO As Integer) As SMY_STATEMENTRow
            Dim rowSMY_STATEMENTRow As SMY_STATEMENTRow = CType(Me.NewRow,SMY_STATEMENTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, INVDESC, INVOICENO, INVDATE, INVAMT, PAIDAMT, CURR_RATE, DUEDATE, CUSTOMER_NAME, CUST_ADDR1, CUST_ADDR2, CUST_ADDR3, CUST_ADDR4, CUST_PHONE, CUST_FAX, DOMESTIC_AMT, DOMESTIC_PAID, DOMESTIC_OW, ARINVNO}
            If (Not (parentMST_CUSTOMERRowByFK_TRN_ARINV_MST_CUSTOMER) Is Nothing) Then
                columnValuesArray(0) = parentMST_CUSTOMERRowByFK_TRN_ARINV_MST_CUSTOMER(0)
            End If
            rowSMY_STATEMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSMY_STATEMENTRow)
            Return rowSMY_STATEMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSMY_STATEMENTRow(ByVal parentMST_CUSTOMERRowByFK_TRN_ARINV_MST_CUSTOMER As MST_CUSTOMERRow, ByVal INVDESC As String, ByVal INVOICENO As String, ByVal INVDATE As Date, ByVal INVAMT As Decimal, ByVal PAIDAMT As Decimal, ByVal CURR_RATE As Decimal, ByVal DUEDATE As Date, ByVal ARINVNO As Integer) As SMY_STATEMENTRow
            Dim rowSMY_STATEMENTRow As SMY_STATEMENTRow = CType(Me.NewRow,SMY_STATEMENTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, INVDESC, INVOICENO, INVDATE, INVAMT, PAIDAMT, CURR_RATE, DUEDATE, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, ARINVNO}
            If (Not (parentMST_CUSTOMERRowByFK_TRN_ARINV_MST_CUSTOMER) Is Nothing) Then
                columnValuesArray(0) = parentMST_CUSTOMERRowByFK_TRN_ARINV_MST_CUSTOMER(0)
            End If
            rowSMY_STATEMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSMY_STATEMENTRow)
            Return rowSMY_STATEMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByARINVNO(ByVal ARINVNO As Integer) As SMY_STATEMENTRow
            Return CType(Me.Rows.Find(New Object() {ARINVNO}),SMY_STATEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SMY_STATEMENTDataTable = CType(MyBase.Clone,SMY_STATEMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SMY_STATEMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCUSTOMER_CODE = MyBase.Columns("CUSTOMER_CODE")
            Me.columnINVDESC = MyBase.Columns("INVDESC")
            Me.columnINVOICENO = MyBase.Columns("INVOICENO")
            Me.columnINVDATE = MyBase.Columns("INVDATE")
            Me.columnINVAMT = MyBase.Columns("INVAMT")
            Me.columnPAIDAMT = MyBase.Columns("PAIDAMT")
            Me.columnCURR_RATE = MyBase.Columns("CURR_RATE")
            Me.columnDUEDATE = MyBase.Columns("DUEDATE")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnCUST_ADDR1 = MyBase.Columns("CUST_ADDR1")
            Me.columnCUST_ADDR2 = MyBase.Columns("CUST_ADDR2")
            Me.columnCUST_ADDR3 = MyBase.Columns("CUST_ADDR3")
            Me.columnCUST_ADDR4 = MyBase.Columns("CUST_ADDR4")
            Me.columnCUST_PHONE = MyBase.Columns("CUST_PHONE")
            Me.columnCUST_FAX = MyBase.Columns("CUST_FAX")
            Me.columnDOMESTIC_AMT = MyBase.Columns("DOMESTIC_AMT")
            Me.columnDOMESTIC_PAID = MyBase.Columns("DOMESTIC_PAID")
            Me.columnDOMESTIC_OW = MyBase.Columns("DOMESTIC_OW")
            Me.columnARINVNO = MyBase.Columns("ARINVNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCUSTOMER_CODE = New Global.System.Data.DataColumn("CUSTOMER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_CODE)
            Me.columnINVDESC = New Global.System.Data.DataColumn("INVDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVDESC)
            Me.columnINVOICENO = New Global.System.Data.DataColumn("INVOICENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICENO)
            Me.columnINVDATE = New Global.System.Data.DataColumn("INVDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVDATE)
            Me.columnINVAMT = New Global.System.Data.DataColumn("INVAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVAMT)
            Me.columnPAIDAMT = New Global.System.Data.DataColumn("PAIDAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDAMT)
            Me.columnCURR_RATE = New Global.System.Data.DataColumn("CURR_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_RATE)
            Me.columnDUEDATE = New Global.System.Data.DataColumn("DUEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUEDATE)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnCUST_ADDR1 = New Global.System.Data.DataColumn("CUST_ADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ADDR1)
            Me.columnCUST_ADDR2 = New Global.System.Data.DataColumn("CUST_ADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ADDR2)
            Me.columnCUST_ADDR3 = New Global.System.Data.DataColumn("CUST_ADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ADDR3)
            Me.columnCUST_ADDR4 = New Global.System.Data.DataColumn("CUST_ADDR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ADDR4)
            Me.columnCUST_PHONE = New Global.System.Data.DataColumn("CUST_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_PHONE)
            Me.columnCUST_FAX = New Global.System.Data.DataColumn("CUST_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_FAX)
            Me.columnDOMESTIC_AMT = New Global.System.Data.DataColumn("DOMESTIC_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_AMT)
            Me.columnDOMESTIC_PAID = New Global.System.Data.DataColumn("DOMESTIC_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_PAID)
            Me.columnDOMESTIC_OW = New Global.System.Data.DataColumn("DOMESTIC_OW", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_OW)
            Me.columnARINVNO = New Global.System.Data.DataColumn("ARINVNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARINVNO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnARINVNO}, true))
            Me.columnCUSTOMER_CODE.AllowDBNull = false
            Me.columnCUSTOMER_CODE.MaxLength = 10
            Me.columnINVDESC.MaxLength = 150
            Me.columnINVOICENO.AllowDBNull = false
            Me.columnINVOICENO.MaxLength = 15
            Me.columnINVDATE.AllowDBNull = false
            Me.columnPAIDAMT.AllowDBNull = false
            Me.columnCURR_RATE.AllowDBNull = false
            Me.columnCUSTOMER_NAME.ReadOnly = true
            Me.columnCUSTOMER_NAME.MaxLength = 50
            Me.columnCUST_ADDR1.ReadOnly = true
            Me.columnCUST_ADDR1.MaxLength = 50
            Me.columnCUST_ADDR2.ReadOnly = true
            Me.columnCUST_ADDR2.MaxLength = 50
            Me.columnCUST_ADDR3.ReadOnly = true
            Me.columnCUST_ADDR3.MaxLength = 50
            Me.columnCUST_ADDR4.ReadOnly = true
            Me.columnCUST_ADDR4.MaxLength = 50
            Me.columnCUST_PHONE.ReadOnly = true
            Me.columnCUST_PHONE.MaxLength = 15
            Me.columnCUST_FAX.ReadOnly = true
            Me.columnCUST_FAX.MaxLength = 15
            Me.columnDOMESTIC_AMT.ReadOnly = true
            Me.columnDOMESTIC_PAID.ReadOnly = true
            Me.columnDOMESTIC_OW.ReadOnly = true
            Me.columnARINVNO.AllowDBNull = false
            Me.columnARINVNO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSMY_STATEMENTRow() As SMY_STATEMENTRow
            Return CType(Me.NewRow,SMY_STATEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SMY_STATEMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SMY_STATEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.CUSTOMER_NAMEColumn.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).CUSTOMER_NAME"
            Me.CUST_ADDR1Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR1"
            Me.CUST_ADDR2Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR2"
            Me.CUST_ADDR3Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR3"
            Me.CUST_ADDR4Column.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).ADDR4"
            Me.CUST_PHONEColumn.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).PHONE"
            Me.CUST_FAXColumn.Expression = "PARENT(FK_TRN_ARINV_MST_CUSTOMER).FAX"
            Me.DOMESTIC_AMTColumn.Expression = "INVAMT * CURR_RATE"
            Me.DOMESTIC_PAIDColumn.Expression = "ISNULL(PAIDAMT,0) * CURR_RATE"
            Me.DOMESTIC_OWColumn.Expression = "DOMESTIC_AMT - DOMESTIC_PAID"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SMY_STATEMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent SMY_STATEMENTRowChanged(Me, New SMY_STATEMENTRowChangeEvent(CType(e.Row,SMY_STATEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SMY_STATEMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent SMY_STATEMENTRowChanging(Me, New SMY_STATEMENTRowChangeEvent(CType(e.Row,SMY_STATEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SMY_STATEMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SMY_STATEMENTRowDeleted(Me, New SMY_STATEMENTRowChangeEvent(CType(e.Row,SMY_STATEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SMY_STATEMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SMY_STATEMENTRowDeleting(Me, New SMY_STATEMENTRowChangeEvent(CType(e.Row,SMY_STATEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSMY_STATEMENTRow(ByVal row As SMY_STATEMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SMY_STATEMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SMY_TRIAL_BALANCEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_NAME As Global.System.Data.DataColumn
        
        Private columnTYPE_NAME As Global.System.Data.DataColumn
        
        Private columnACC_AMT As Global.System.Data.DataColumn
        
        Private columnDEBIT_AMT As Global.System.Data.DataColumn
        
        Private columnCREDIT_AMT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "SMY_TRIAL_BALANCE"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TYPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBIT_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBIT_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREDIT_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREDIT_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SMY_TRIAL_BALANCERow
            Get
                Return CType(Me.Rows(index),SMY_TRIAL_BALANCERow)
            End Get
        End Property
        
        Public Event SMY_TRIAL_BALANCERowChanging As SMY_TRIAL_BALANCERowChangeEventHandler
        
        Public Event SMY_TRIAL_BALANCERowChanged As SMY_TRIAL_BALANCERowChangeEventHandler
        
        Public Event SMY_TRIAL_BALANCERowDeleting As SMY_TRIAL_BALANCERowChangeEventHandler
        
        Public Event SMY_TRIAL_BALANCERowDeleted As SMY_TRIAL_BALANCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSMY_TRIAL_BALANCERow(ByVal row As SMY_TRIAL_BALANCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSMY_TRIAL_BALANCERow(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal TYPE_NAME As String, ByVal ACC_AMT As Decimal, ByVal DEBIT_AMT As Decimal, ByVal CREDIT_AMT As Decimal) As SMY_TRIAL_BALANCERow
            Dim rowSMY_TRIAL_BALANCERow As SMY_TRIAL_BALANCERow = CType(Me.NewRow,SMY_TRIAL_BALANCERow)
            Dim columnValuesArray() As Object = New Object() {ACC_CODE, ACC_NAME, TYPE_NAME, ACC_AMT, DEBIT_AMT, CREDIT_AMT}
            rowSMY_TRIAL_BALANCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSMY_TRIAL_BALANCERow)
            Return rowSMY_TRIAL_BALANCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSMY_TRIAL_BALANCERow(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal TYPE_NAME As String, ByVal ACC_AMT As Decimal) As SMY_TRIAL_BALANCERow
            Dim rowSMY_TRIAL_BALANCERow As SMY_TRIAL_BALANCERow = CType(Me.NewRow,SMY_TRIAL_BALANCERow)
            Dim columnValuesArray() As Object = New Object() {ACC_CODE, ACC_NAME, TYPE_NAME, ACC_AMT, Nothing, Nothing}
            rowSMY_TRIAL_BALANCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSMY_TRIAL_BALANCERow)
            Return rowSMY_TRIAL_BALANCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SMY_TRIAL_BALANCEDataTable = CType(MyBase.Clone,SMY_TRIAL_BALANCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SMY_TRIAL_BALANCEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_NAME = MyBase.Columns("ACC_NAME")
            Me.columnTYPE_NAME = MyBase.Columns("TYPE_NAME")
            Me.columnACC_AMT = MyBase.Columns("ACC_AMT")
            Me.columnDEBIT_AMT = MyBase.Columns("DEBIT_AMT")
            Me.columnCREDIT_AMT = MyBase.Columns("CREDIT_AMT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_NAME = New Global.System.Data.DataColumn("ACC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_NAME)
            Me.columnTYPE_NAME = New Global.System.Data.DataColumn("TYPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYPE_NAME)
            Me.columnACC_AMT = New Global.System.Data.DataColumn("ACC_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_AMT)
            Me.columnDEBIT_AMT = New Global.System.Data.DataColumn("DEBIT_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBIT_AMT)
            Me.columnCREDIT_AMT = New Global.System.Data.DataColumn("CREDIT_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREDIT_AMT)
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_NAME.MaxLength = 75
            Me.columnTYPE_NAME.MaxLength = 20
            Me.columnACC_AMT.ReadOnly = true
            Me.columnDEBIT_AMT.ReadOnly = true
            Me.columnCREDIT_AMT.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSMY_TRIAL_BALANCERow() As SMY_TRIAL_BALANCERow
            Return CType(Me.NewRow,SMY_TRIAL_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SMY_TRIAL_BALANCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SMY_TRIAL_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.DEBIT_AMTColumn.Expression = "IIF(ACC_AMT>=0,ACC_AMT,0)"
            Me.CREDIT_AMTColumn.Expression = "IIF(ACC_AMT<0,ACC_AMT* -1,0)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SMY_TRIAL_BALANCERowChangedEvent) Is Nothing) Then
                RaiseEvent SMY_TRIAL_BALANCERowChanged(Me, New SMY_TRIAL_BALANCERowChangeEvent(CType(e.Row,SMY_TRIAL_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SMY_TRIAL_BALANCERowChangingEvent) Is Nothing) Then
                RaiseEvent SMY_TRIAL_BALANCERowChanging(Me, New SMY_TRIAL_BALANCERowChangeEvent(CType(e.Row,SMY_TRIAL_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SMY_TRIAL_BALANCERowDeletedEvent) Is Nothing) Then
                RaiseEvent SMY_TRIAL_BALANCERowDeleted(Me, New SMY_TRIAL_BALANCERowChangeEvent(CType(e.Row,SMY_TRIAL_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SMY_TRIAL_BALANCERowDeletingEvent) Is Nothing) Then
                RaiseEvent SMY_TRIAL_BALANCERowDeleting(Me, New SMY_TRIAL_BALANCERowChangeEvent(CType(e.Row,SMY_TRIAL_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSMY_TRIAL_BALANCERow(ByVal row As SMY_TRIAL_BALANCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SMY_TRIAL_BALANCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReportBLPLDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRPTTYPE_CODE As Global.System.Data.DataColumn
        
        Private columnPRINTDESC As Global.System.Data.DataColumn
        
        Private columnMTH_TOTALAMT As Global.System.Data.DataColumn
        
        Private columnMTH_BUDGETAMT As Global.System.Data.DataColumn
        
        Private columnMTH_VARAMT As Global.System.Data.DataColumn
        
        Private columnTOTALAMT As Global.System.Data.DataColumn
        
        Private columnBUDGETAMT As Global.System.Data.DataColumn
        
        Private columnVARAMT As Global.System.Data.DataColumn
        
        Private columnLMTH_TOTALAMT As Global.System.Data.DataColumn
        
        Private columnLMTH_BUDGETAMT As Global.System.Data.DataColumn
        
        Private columnLMTH_VARAMT As Global.System.Data.DataColumn
        
        Private columnLTOTALAMT As Global.System.Data.DataColumn
        
        Private columnLBUDGETAMT As Global.System.Data.DataColumn
        
        Private columnLVARAMT As Global.System.Data.DataColumn
        
        Private columnCMPYTOTAL As Global.System.Data.DataColumn
        
        Private columnCMPMTOTAL As Global.System.Data.DataColumn
        
        Private columnSORTORDER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "ReportBLPL"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPTTYPE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPTTYPE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRINTDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINTDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTH_TOTALAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTH_TOTALAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTH_BUDGETAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTH_BUDGETAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTH_VARAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTH_VARAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGETAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGETAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VARAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LMTH_TOTALAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLMTH_TOTALAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LMTH_BUDGETAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLMTH_BUDGETAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LMTH_VARAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLMTH_VARAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LTOTALAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLTOTALAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LBUDGETAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLBUDGETAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LVARAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLVARAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMPYTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMPYTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMPMTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMPMTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SORTORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSORTORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReportBLPLRow
            Get
                Return CType(Me.Rows(index),ReportBLPLRow)
            End Get
        End Property
        
        Public Event ReportBLPLRowChanging As ReportBLPLRowChangeEventHandler
        
        Public Event ReportBLPLRowChanged As ReportBLPLRowChangeEventHandler
        
        Public Event ReportBLPLRowDeleting As ReportBLPLRowChangeEventHandler
        
        Public Event ReportBLPLRowDeleted As ReportBLPLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReportBLPLRow(ByVal row As ReportBLPLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReportBLPLRow( _
                    ByVal RPTTYPE_CODE As String,  _
                    ByVal PRINTDESC As String,  _
                    ByVal MTH_TOTALAMT As Decimal,  _
                    ByVal MTH_BUDGETAMT As Decimal,  _
                    ByVal MTH_VARAMT As Decimal,  _
                    ByVal TOTALAMT As Decimal,  _
                    ByVal BUDGETAMT As Decimal,  _
                    ByVal VARAMT As Decimal,  _
                    ByVal LMTH_TOTALAMT As Decimal,  _
                    ByVal LMTH_BUDGETAMT As Decimal,  _
                    ByVal LMTH_VARAMT As Decimal,  _
                    ByVal LTOTALAMT As Decimal,  _
                    ByVal LBUDGETAMT As Decimal,  _
                    ByVal LVARAMT As Decimal,  _
                    ByVal CMPYTOTAL As Decimal,  _
                    ByVal CMPMTOTAL As Decimal,  _
                    ByVal SORTORDER As Integer) As ReportBLPLRow
            Dim rowReportBLPLRow As ReportBLPLRow = CType(Me.NewRow,ReportBLPLRow)
            Dim columnValuesArray() As Object = New Object() {RPTTYPE_CODE, PRINTDESC, MTH_TOTALAMT, MTH_BUDGETAMT, MTH_VARAMT, TOTALAMT, BUDGETAMT, VARAMT, LMTH_TOTALAMT, LMTH_BUDGETAMT, LMTH_VARAMT, LTOTALAMT, LBUDGETAMT, LVARAMT, CMPYTOTAL, CMPMTOTAL, SORTORDER}
            rowReportBLPLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReportBLPLRow)
            Return rowReportBLPLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReportBLPLRow(ByVal RPTTYPE_CODE As String, ByVal PRINTDESC As String, ByVal MTH_TOTALAMT As Decimal, ByVal MTH_BUDGETAMT As Decimal, ByVal MTH_VARAMT As Decimal, ByVal TOTALAMT As Decimal, ByVal BUDGETAMT As Decimal, ByVal VARAMT As Decimal, ByVal LMTH_TOTALAMT As Decimal, ByVal LMTH_BUDGETAMT As Decimal, ByVal LMTH_VARAMT As Decimal, ByVal LTOTALAMT As Decimal, ByVal LBUDGETAMT As Decimal, ByVal LVARAMT As Decimal, ByVal SORTORDER As Integer) As ReportBLPLRow
            Dim rowReportBLPLRow As ReportBLPLRow = CType(Me.NewRow,ReportBLPLRow)
            Dim columnValuesArray() As Object = New Object() {RPTTYPE_CODE, PRINTDESC, MTH_TOTALAMT, MTH_BUDGETAMT, MTH_VARAMT, TOTALAMT, BUDGETAMT, VARAMT, LMTH_TOTALAMT, LMTH_BUDGETAMT, LMTH_VARAMT, LTOTALAMT, LBUDGETAMT, LVARAMT, Nothing, Nothing, SORTORDER}
            rowReportBLPLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReportBLPLRow)
            Return rowReportBLPLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReportBLPLDataTable = CType(MyBase.Clone,ReportBLPLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReportBLPLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRPTTYPE_CODE = MyBase.Columns("RPTTYPE_CODE")
            Me.columnPRINTDESC = MyBase.Columns("PRINTDESC")
            Me.columnMTH_TOTALAMT = MyBase.Columns("MTH_TOTALAMT")
            Me.columnMTH_BUDGETAMT = MyBase.Columns("MTH_BUDGETAMT")
            Me.columnMTH_VARAMT = MyBase.Columns("MTH_VARAMT")
            Me.columnTOTALAMT = MyBase.Columns("TOTALAMT")
            Me.columnBUDGETAMT = MyBase.Columns("BUDGETAMT")
            Me.columnVARAMT = MyBase.Columns("VARAMT")
            Me.columnLMTH_TOTALAMT = MyBase.Columns("LMTH_TOTALAMT")
            Me.columnLMTH_BUDGETAMT = MyBase.Columns("LMTH_BUDGETAMT")
            Me.columnLMTH_VARAMT = MyBase.Columns("LMTH_VARAMT")
            Me.columnLTOTALAMT = MyBase.Columns("LTOTALAMT")
            Me.columnLBUDGETAMT = MyBase.Columns("LBUDGETAMT")
            Me.columnLVARAMT = MyBase.Columns("LVARAMT")
            Me.columnCMPYTOTAL = MyBase.Columns("CMPYTOTAL")
            Me.columnCMPMTOTAL = MyBase.Columns("CMPMTOTAL")
            Me.columnSORTORDER = MyBase.Columns("SORTORDER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRPTTYPE_CODE = New Global.System.Data.DataColumn("RPTTYPE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPTTYPE_CODE)
            Me.columnPRINTDESC = New Global.System.Data.DataColumn("PRINTDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINTDESC)
            Me.columnMTH_TOTALAMT = New Global.System.Data.DataColumn("MTH_TOTALAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTH_TOTALAMT)
            Me.columnMTH_BUDGETAMT = New Global.System.Data.DataColumn("MTH_BUDGETAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTH_BUDGETAMT)
            Me.columnMTH_VARAMT = New Global.System.Data.DataColumn("MTH_VARAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTH_VARAMT)
            Me.columnTOTALAMT = New Global.System.Data.DataColumn("TOTALAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALAMT)
            Me.columnBUDGETAMT = New Global.System.Data.DataColumn("BUDGETAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGETAMT)
            Me.columnVARAMT = New Global.System.Data.DataColumn("VARAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARAMT)
            Me.columnLMTH_TOTALAMT = New Global.System.Data.DataColumn("LMTH_TOTALAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLMTH_TOTALAMT)
            Me.columnLMTH_BUDGETAMT = New Global.System.Data.DataColumn("LMTH_BUDGETAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLMTH_BUDGETAMT)
            Me.columnLMTH_VARAMT = New Global.System.Data.DataColumn("LMTH_VARAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLMTH_VARAMT)
            Me.columnLTOTALAMT = New Global.System.Data.DataColumn("LTOTALAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLTOTALAMT)
            Me.columnLBUDGETAMT = New Global.System.Data.DataColumn("LBUDGETAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLBUDGETAMT)
            Me.columnLVARAMT = New Global.System.Data.DataColumn("LVARAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLVARAMT)
            Me.columnCMPYTOTAL = New Global.System.Data.DataColumn("CMPYTOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMPYTOTAL)
            Me.columnCMPMTOTAL = New Global.System.Data.DataColumn("CMPMTOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMPMTOTAL)
            Me.columnSORTORDER = New Global.System.Data.DataColumn("SORTORDER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSORTORDER)
            Me.columnRPTTYPE_CODE.MaxLength = 10
            Me.columnPRINTDESC.MaxLength = 50
            Me.columnCMPYTOTAL.ReadOnly = true
            Me.columnCMPMTOTAL.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReportBLPLRow() As ReportBLPLRow
            Return CType(Me.NewRow,ReportBLPLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReportBLPLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReportBLPLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.CMPYTOTALColumn.Expression = "TOTALAMT-LTOTALAMT"
            Me.CMPMTOTALColumn.Expression = "MTH_TOTALAMT-LMTH_TOTALAMT"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReportBLPLRowChangedEvent) Is Nothing) Then
                RaiseEvent ReportBLPLRowChanged(Me, New ReportBLPLRowChangeEvent(CType(e.Row,ReportBLPLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReportBLPLRowChangingEvent) Is Nothing) Then
                RaiseEvent ReportBLPLRowChanging(Me, New ReportBLPLRowChangeEvent(CType(e.Row,ReportBLPLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReportBLPLRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReportBLPLRowDeleted(Me, New ReportBLPLRowChangeEvent(CType(e.Row,ReportBLPLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReportBLPLRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReportBLPLRowDeleting(Me, New ReportBLPLRowChangeEvent(CType(e.Row,ReportBLPLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReportBLPLRow(ByVal row As ReportBLPLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReportBLPLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SMY_INVPAYDETAILDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnARINVNO As Global.System.Data.DataColumn
        
        Private columnARCHEQUE_CODE As Global.System.Data.DataColumn
        
        Private columnCHEQUEAMT As Global.System.Data.DataColumn
        
        Private columnCHEQUE_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SMY_INVPAYDETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ARINVNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARINVNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ARCHEQUE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARCHEQUE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SMY_INVPAYDETAILRow
            Get
                Return CType(Me.Rows(index),SMY_INVPAYDETAILRow)
            End Get
        End Property
        
        Public Event SMY_INVPAYDETAILRowChanging As SMY_INVPAYDETAILRowChangeEventHandler
        
        Public Event SMY_INVPAYDETAILRowChanged As SMY_INVPAYDETAILRowChangeEventHandler
        
        Public Event SMY_INVPAYDETAILRowDeleting As SMY_INVPAYDETAILRowChangeEventHandler
        
        Public Event SMY_INVPAYDETAILRowDeleted As SMY_INVPAYDETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSMY_INVPAYDETAILRow(ByVal row As SMY_INVPAYDETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSMY_INVPAYDETAILRow(ByVal ARINVNO As Integer, ByVal ARCHEQUE_CODE As String, ByVal CHEQUEAMT As Decimal, ByVal CHEQUE_DATE As Date) As SMY_INVPAYDETAILRow
            Dim rowSMY_INVPAYDETAILRow As SMY_INVPAYDETAILRow = CType(Me.NewRow,SMY_INVPAYDETAILRow)
            Dim columnValuesArray() As Object = New Object() {ARINVNO, ARCHEQUE_CODE, CHEQUEAMT, CHEQUE_DATE}
            rowSMY_INVPAYDETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSMY_INVPAYDETAILRow)
            Return rowSMY_INVPAYDETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SMY_INVPAYDETAILDataTable = CType(MyBase.Clone,SMY_INVPAYDETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SMY_INVPAYDETAILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnARINVNO = MyBase.Columns("ARINVNO")
            Me.columnARCHEQUE_CODE = MyBase.Columns("ARCHEQUE_CODE")
            Me.columnCHEQUEAMT = MyBase.Columns("CHEQUEAMT")
            Me.columnCHEQUE_DATE = MyBase.Columns("CHEQUE_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnARINVNO = New Global.System.Data.DataColumn("ARINVNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARINVNO)
            Me.columnARCHEQUE_CODE = New Global.System.Data.DataColumn("ARCHEQUE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARCHEQUE_CODE)
            Me.columnCHEQUEAMT = New Global.System.Data.DataColumn("CHEQUEAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEAMT)
            Me.columnCHEQUE_DATE = New Global.System.Data.DataColumn("CHEQUE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUE_DATE)
            Me.columnARINVNO.AllowDBNull = false
            Me.columnARCHEQUE_CODE.AllowDBNull = false
            Me.columnARCHEQUE_CODE.MaxLength = 15
            Me.columnCHEQUEAMT.AllowDBNull = false
            Me.columnCHEQUE_DATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSMY_INVPAYDETAILRow() As SMY_INVPAYDETAILRow
            Return CType(Me.NewRow,SMY_INVPAYDETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SMY_INVPAYDETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SMY_INVPAYDETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SMY_INVPAYDETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent SMY_INVPAYDETAILRowChanged(Me, New SMY_INVPAYDETAILRowChangeEvent(CType(e.Row,SMY_INVPAYDETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SMY_INVPAYDETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent SMY_INVPAYDETAILRowChanging(Me, New SMY_INVPAYDETAILRowChangeEvent(CType(e.Row,SMY_INVPAYDETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SMY_INVPAYDETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent SMY_INVPAYDETAILRowDeleted(Me, New SMY_INVPAYDETAILRowChangeEvent(CType(e.Row,SMY_INVPAYDETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SMY_INVPAYDETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent SMY_INVPAYDETAILRowDeleting(Me, New SMY_INVPAYDETAILRowChangeEvent(CType(e.Row,SMY_INVPAYDETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSMY_INVPAYDETAILRow(ByVal row As SMY_INVPAYDETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SMY_INVPAYDETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class InvoiceWithTaxDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnINVOICENO As Global.System.Data.DataColumn
        
        Private columnINVDESC As Global.System.Data.DataColumn
        
        Private columnINVAMT As Global.System.Data.DataColumn
        
        Private columnTAX_AMT1 As Global.System.Data.DataColumn
        
        Private columnTAX_AMT2 As Global.System.Data.DataColumn
        
        Private columnTAX_CODE1 As Global.System.Data.DataColumn
        
        Private columnTAX_CODE2 As Global.System.Data.DataColumn
        
        Private columnTAX_NAME1 As Global.System.Data.DataColumn
        
        Private columnTAX_NAME2 As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_AMT As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_TAX1 As Global.System.Data.DataColumn
        
        Private columnDOMESTIC_TAX2 As Global.System.Data.DataColumn
        
        Private columnCURR_RATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "InvoiceWithTax"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_AMT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_AMT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_AMT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_AMT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_CODE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_CODE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_CODE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_CODE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_NAME1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_NAME1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_NAME2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_NAME2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_TAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_TAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOMESTIC_TAX2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMESTIC_TAX2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As InvoiceWithTaxRow
            Get
                Return CType(Me.Rows(index),InvoiceWithTaxRow)
            End Get
        End Property
        
        Public Event InvoiceWithTaxRowChanging As InvoiceWithTaxRowChangeEventHandler
        
        Public Event InvoiceWithTaxRowChanged As InvoiceWithTaxRowChangeEventHandler
        
        Public Event InvoiceWithTaxRowDeleting As InvoiceWithTaxRowChangeEventHandler
        
        Public Event InvoiceWithTaxRowDeleted As InvoiceWithTaxRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInvoiceWithTaxRow(ByVal row As InvoiceWithTaxRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInvoiceWithTaxRow(ByVal INVOICENO As String, ByVal INVDESC As String, ByVal INVAMT As Decimal, ByVal TAX_AMT1 As Decimal, ByVal TAX_AMT2 As Decimal, ByVal TAX_CODE1 As String, ByVal TAX_CODE2 As String, ByVal TAX_NAME1 As String, ByVal TAX_NAME2 As String, ByVal DOMESTIC_AMT As Decimal, ByVal DOMESTIC_TAX1 As Decimal, ByVal DOMESTIC_TAX2 As Decimal, ByVal CURR_RATE As Decimal) As InvoiceWithTaxRow
            Dim rowInvoiceWithTaxRow As InvoiceWithTaxRow = CType(Me.NewRow,InvoiceWithTaxRow)
            Dim columnValuesArray() As Object = New Object() {INVOICENO, INVDESC, INVAMT, TAX_AMT1, TAX_AMT2, TAX_CODE1, TAX_CODE2, TAX_NAME1, TAX_NAME2, DOMESTIC_AMT, DOMESTIC_TAX1, DOMESTIC_TAX2, CURR_RATE}
            rowInvoiceWithTaxRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInvoiceWithTaxRow)
            Return rowInvoiceWithTaxRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInvoiceWithTaxRow(ByVal INVOICENO As String, ByVal INVDESC As String, ByVal INVAMT As Decimal, ByVal TAX_AMT1 As Decimal, ByVal TAX_AMT2 As Decimal, ByVal TAX_CODE1 As String, ByVal TAX_CODE2 As String, ByVal TAX_NAME1 As String, ByVal TAX_NAME2 As String, ByVal CURR_RATE As Decimal) As InvoiceWithTaxRow
            Dim rowInvoiceWithTaxRow As InvoiceWithTaxRow = CType(Me.NewRow,InvoiceWithTaxRow)
            Dim columnValuesArray() As Object = New Object() {INVOICENO, INVDESC, INVAMT, TAX_AMT1, TAX_AMT2, TAX_CODE1, TAX_CODE2, TAX_NAME1, TAX_NAME2, Nothing, Nothing, Nothing, CURR_RATE}
            rowInvoiceWithTaxRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInvoiceWithTaxRow)
            Return rowInvoiceWithTaxRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As InvoiceWithTaxDataTable = CType(MyBase.Clone,InvoiceWithTaxDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New InvoiceWithTaxDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVOICENO = MyBase.Columns("INVOICENO")
            Me.columnINVDESC = MyBase.Columns("INVDESC")
            Me.columnINVAMT = MyBase.Columns("INVAMT")
            Me.columnTAX_AMT1 = MyBase.Columns("TAX_AMT1")
            Me.columnTAX_AMT2 = MyBase.Columns("TAX_AMT2")
            Me.columnTAX_CODE1 = MyBase.Columns("TAX_CODE1")
            Me.columnTAX_CODE2 = MyBase.Columns("TAX_CODE2")
            Me.columnTAX_NAME1 = MyBase.Columns("TAX_NAME1")
            Me.columnTAX_NAME2 = MyBase.Columns("TAX_NAME2")
            Me.columnDOMESTIC_AMT = MyBase.Columns("DOMESTIC_AMT")
            Me.columnDOMESTIC_TAX1 = MyBase.Columns("DOMESTIC_TAX1")
            Me.columnDOMESTIC_TAX2 = MyBase.Columns("DOMESTIC_TAX2")
            Me.columnCURR_RATE = MyBase.Columns("CURR_RATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVOICENO = New Global.System.Data.DataColumn("INVOICENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICENO)
            Me.columnINVDESC = New Global.System.Data.DataColumn("INVDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVDESC)
            Me.columnINVAMT = New Global.System.Data.DataColumn("INVAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVAMT)
            Me.columnTAX_AMT1 = New Global.System.Data.DataColumn("TAX_AMT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_AMT1)
            Me.columnTAX_AMT2 = New Global.System.Data.DataColumn("TAX_AMT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_AMT2)
            Me.columnTAX_CODE1 = New Global.System.Data.DataColumn("TAX_CODE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_CODE1)
            Me.columnTAX_CODE2 = New Global.System.Data.DataColumn("TAX_CODE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_CODE2)
            Me.columnTAX_NAME1 = New Global.System.Data.DataColumn("TAX_NAME1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_NAME1)
            Me.columnTAX_NAME2 = New Global.System.Data.DataColumn("TAX_NAME2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_NAME2)
            Me.columnDOMESTIC_AMT = New Global.System.Data.DataColumn("DOMESTIC_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_AMT)
            Me.columnDOMESTIC_TAX1 = New Global.System.Data.DataColumn("DOMESTIC_TAX1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_TAX1)
            Me.columnDOMESTIC_TAX2 = New Global.System.Data.DataColumn("DOMESTIC_TAX2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMESTIC_TAX2)
            Me.columnCURR_RATE = New Global.System.Data.DataColumn("CURR_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_RATE)
            Me.columnINVOICENO.AllowDBNull = false
            Me.columnINVOICENO.MaxLength = 15
            Me.columnINVDESC.MaxLength = 150
            Me.columnINVAMT.AllowDBNull = false
            Me.columnTAX_CODE1.MaxLength = 10
            Me.columnTAX_CODE2.MaxLength = 10
            Me.columnTAX_NAME1.MaxLength = 30
            Me.columnTAX_NAME2.MaxLength = 30
            Me.columnDOMESTIC_AMT.ReadOnly = true
            Me.columnDOMESTIC_TAX1.ReadOnly = true
            Me.columnDOMESTIC_TAX2.ReadOnly = true
            Me.columnCURR_RATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInvoiceWithTaxRow() As InvoiceWithTaxRow
            Return CType(Me.NewRow,InvoiceWithTaxRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New InvoiceWithTaxRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(InvoiceWithTaxRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.DOMESTIC_AMTColumn.Expression = "INVAMT * CURR_RATE"
            Me.DOMESTIC_TAX1Column.Expression = "TAX_AMT1 * CURR_RATE"
            Me.DOMESTIC_TAX2Column.Expression = "TAX_AMT2 * CURR_RATE"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InvoiceWithTaxRowChangedEvent) Is Nothing) Then
                RaiseEvent InvoiceWithTaxRowChanged(Me, New InvoiceWithTaxRowChangeEvent(CType(e.Row,InvoiceWithTaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InvoiceWithTaxRowChangingEvent) Is Nothing) Then
                RaiseEvent InvoiceWithTaxRowChanging(Me, New InvoiceWithTaxRowChangeEvent(CType(e.Row,InvoiceWithTaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InvoiceWithTaxRowDeletedEvent) Is Nothing) Then
                RaiseEvent InvoiceWithTaxRowDeleted(Me, New InvoiceWithTaxRowChangeEvent(CType(e.Row,InvoiceWithTaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InvoiceWithTaxRowDeletingEvent) Is Nothing) Then
                RaiseEvent InvoiceWithTaxRowDeleting(Me, New InvoiceWithTaxRowChangeEvent(CType(e.Row,InvoiceWithTaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInvoiceWithTaxRow(ByVal row As InvoiceWithTaxRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "InvoiceWithTaxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STKTAKELISTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnITEM_CODE As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnBALQTY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STKTAKELIST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BALQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBALQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STKTAKELISTRow
            Get
                Return CType(Me.Rows(index),STKTAKELISTRow)
            End Get
        End Property
        
        Public Event STKTAKELISTRowChanging As STKTAKELISTRowChangeEventHandler
        
        Public Event STKTAKELISTRowChanged As STKTAKELISTRowChangeEventHandler
        
        Public Event STKTAKELISTRowDeleting As STKTAKELISTRowChangeEventHandler
        
        Public Event STKTAKELISTRowDeleted As STKTAKELISTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSTKTAKELISTRow(ByVal row As STKTAKELISTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSTKTAKELISTRow(ByVal ITEM_CODE As String, ByVal ITEM_NAME As String, ByVal BALQTY As Integer) As STKTAKELISTRow
            Dim rowSTKTAKELISTRow As STKTAKELISTRow = CType(Me.NewRow,STKTAKELISTRow)
            Dim columnValuesArray() As Object = New Object() {ITEM_CODE, ITEM_NAME, BALQTY}
            rowSTKTAKELISTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTKTAKELISTRow)
            Return rowSTKTAKELISTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STKTAKELISTDataTable = CType(MyBase.Clone,STKTAKELISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STKTAKELISTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnITEM_CODE = MyBase.Columns("ITEM_CODE")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnBALQTY = MyBase.Columns("BALQTY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnITEM_CODE = New Global.System.Data.DataColumn("ITEM_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_CODE)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnBALQTY = New Global.System.Data.DataColumn("BALQTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBALQTY)
            Me.columnITEM_CODE.MaxLength = 15
            Me.columnITEM_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSTKTAKELISTRow() As STKTAKELISTRow
            Return CType(Me.NewRow,STKTAKELISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STKTAKELISTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STKTAKELISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STKTAKELISTRowChangedEvent) Is Nothing) Then
                RaiseEvent STKTAKELISTRowChanged(Me, New STKTAKELISTRowChangeEvent(CType(e.Row,STKTAKELISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STKTAKELISTRowChangingEvent) Is Nothing) Then
                RaiseEvent STKTAKELISTRowChanging(Me, New STKTAKELISTRowChangeEvent(CType(e.Row,STKTAKELISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STKTAKELISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent STKTAKELISTRowDeleted(Me, New STKTAKELISTRowChangeEvent(CType(e.Row,STKTAKELISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STKTAKELISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent STKTAKELISTRowDeleting(Me, New STKTAKELISTRowChangeEvent(CType(e.Row,STKTAKELISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSTKTAKELISTRow(ByVal row As STKTAKELISTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STKTAKELISTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_WAREHOUSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnWHNO As Global.System.Data.DataColumn
        
        Private columnWH_NAME As Global.System.Data.DataColumn
        
        Private columnWH_ADDR1 As Global.System.Data.DataColumn
        
        Private columnWH_ADDR2 As Global.System.Data.DataColumn
        
        Private columnWH_ADDR3 As Global.System.Data.DataColumn
        
        Private columnWH_ADDR4 As Global.System.Data.DataColumn
        
        Private columnWH_PHONE As Global.System.Data.DataColumn
        
        Private columnWH_FAX As Global.System.Data.DataColumn
        
        Private columnCONTACT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_WAREHOUSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WHNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWHNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_ADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_ADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_ADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_ADDR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ADDR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_WAREHOUSERow
            Get
                Return CType(Me.Rows(index),MST_WAREHOUSERow)
            End Get
        End Property
        
        Public Event MST_WAREHOUSERowChanging As MST_WAREHOUSERowChangeEventHandler
        
        Public Event MST_WAREHOUSERowChanged As MST_WAREHOUSERowChangeEventHandler
        
        Public Event MST_WAREHOUSERowDeleting As MST_WAREHOUSERowChangeEventHandler
        
        Public Event MST_WAREHOUSERowDeleted As MST_WAREHOUSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_WAREHOUSERow(ByVal row As MST_WAREHOUSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_WAREHOUSERow(ByVal WHNO As Integer, ByVal WH_NAME As String, ByVal WH_ADDR1 As String, ByVal WH_ADDR2 As String, ByVal WH_ADDR3 As String, ByVal WH_ADDR4 As String, ByVal WH_PHONE As String, ByVal WH_FAX As String, ByVal CONTACT As String) As MST_WAREHOUSERow
            Dim rowMST_WAREHOUSERow As MST_WAREHOUSERow = CType(Me.NewRow,MST_WAREHOUSERow)
            Dim columnValuesArray() As Object = New Object() {WHNO, WH_NAME, WH_ADDR1, WH_ADDR2, WH_ADDR3, WH_ADDR4, WH_PHONE, WH_FAX, CONTACT}
            rowMST_WAREHOUSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_WAREHOUSERow)
            Return rowMST_WAREHOUSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByWHNO(ByVal WHNO As Integer) As MST_WAREHOUSERow
            Return CType(Me.Rows.Find(New Object() {WHNO}),MST_WAREHOUSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_WAREHOUSEDataTable = CType(MyBase.Clone,MST_WAREHOUSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_WAREHOUSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWHNO = MyBase.Columns("WHNO")
            Me.columnWH_NAME = MyBase.Columns("WH_NAME")
            Me.columnWH_ADDR1 = MyBase.Columns("WH_ADDR1")
            Me.columnWH_ADDR2 = MyBase.Columns("WH_ADDR2")
            Me.columnWH_ADDR3 = MyBase.Columns("WH_ADDR3")
            Me.columnWH_ADDR4 = MyBase.Columns("WH_ADDR4")
            Me.columnWH_PHONE = MyBase.Columns("WH_PHONE")
            Me.columnWH_FAX = MyBase.Columns("WH_FAX")
            Me.columnCONTACT = MyBase.Columns("CONTACT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWHNO = New Global.System.Data.DataColumn("WHNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWHNO)
            Me.columnWH_NAME = New Global.System.Data.DataColumn("WH_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_NAME)
            Me.columnWH_ADDR1 = New Global.System.Data.DataColumn("WH_ADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ADDR1)
            Me.columnWH_ADDR2 = New Global.System.Data.DataColumn("WH_ADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ADDR2)
            Me.columnWH_ADDR3 = New Global.System.Data.DataColumn("WH_ADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ADDR3)
            Me.columnWH_ADDR4 = New Global.System.Data.DataColumn("WH_ADDR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ADDR4)
            Me.columnWH_PHONE = New Global.System.Data.DataColumn("WH_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_PHONE)
            Me.columnWH_FAX = New Global.System.Data.DataColumn("WH_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_FAX)
            Me.columnCONTACT = New Global.System.Data.DataColumn("CONTACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWHNO}, true))
            Me.columnWHNO.AllowDBNull = false
            Me.columnWHNO.Unique = true
            Me.columnWH_NAME.MaxLength = 50
            Me.columnWH_ADDR1.MaxLength = 50
            Me.columnWH_ADDR2.MaxLength = 50
            Me.columnWH_ADDR3.MaxLength = 50
            Me.columnWH_ADDR4.MaxLength = 50
            Me.columnWH_PHONE.MaxLength = 15
            Me.columnWH_FAX.MaxLength = 15
            Me.columnCONTACT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_WAREHOUSERow() As MST_WAREHOUSERow
            Return CType(Me.NewRow,MST_WAREHOUSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_WAREHOUSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_WAREHOUSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_WAREHOUSERowChangedEvent) Is Nothing) Then
                RaiseEvent MST_WAREHOUSERowChanged(Me, New MST_WAREHOUSERowChangeEvent(CType(e.Row,MST_WAREHOUSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_WAREHOUSERowChangingEvent) Is Nothing) Then
                RaiseEvent MST_WAREHOUSERowChanging(Me, New MST_WAREHOUSERowChangeEvent(CType(e.Row,MST_WAREHOUSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_WAREHOUSERowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_WAREHOUSERowDeleted(Me, New MST_WAREHOUSERowChangeEvent(CType(e.Row,MST_WAREHOUSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_WAREHOUSERowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_WAREHOUSERowDeleting(Me, New MST_WAREHOUSERowChangeEvent(CType(e.Row,MST_WAREHOUSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_WAREHOUSERow(ByVal row As MST_WAREHOUSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccReporting = New CSAccReporting
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_WAREHOUSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReportBLBudgetRow
        Inherits Global.System.Data.DataRow
        
        Private tableReportBLBudget As ReportBLBudgetDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReportBLBudget = CType(Me.Table,ReportBLBudgetDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRINTDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableReportBLBudget.PRINTDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINTDESC' in table 'ReportBLBudget' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLBudget.PRINTDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLBudget.TOTALAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALAMT' in table 'ReportBLBudget' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLBudget.TOTALAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGETAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLBudget.BUDGETAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGETAMT' in table 'ReportBLBudget' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLBudget.BUDGETAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VARAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLBudget.VARAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VARAMT' in table 'ReportBLBudget' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLBudget.VARAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPTTYPE_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableReportBLBudget.RPTTYPE_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RPTTYPE_CODE' in table 'ReportBLBudget' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLBudget.RPTTYPE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRINTDESCNull() As Boolean
            Return Me.IsNull(Me.tableReportBLBudget.PRINTDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRINTDESCNull()
            Me(Me.tableReportBLBudget.PRINTDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLBudget.TOTALAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALAMTNull()
            Me(Me.tableReportBLBudget.TOTALAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGETAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLBudget.BUDGETAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGETAMTNull()
            Me(Me.tableReportBLBudget.BUDGETAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVARAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLBudget.VARAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVARAMTNull()
            Me(Me.tableReportBLBudget.VARAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPTTYPE_CODENull() As Boolean
            Return Me.IsNull(Me.tableReportBLBudget.RPTTYPE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPTTYPE_CODENull()
            Me(Me.tableReportBLBudget.RPTTYPE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRN_APINVRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRN_APINV As TRN_APINVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRN_APINV = CType(Me.Table,TRN_APINVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDOR_CODE() As String
            Get
                Return CType(Me(Me.tableTRN_APINV.VENDOR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_APINV.VENDOR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDOR_NAME() As String
            Get
                Return CType(Me(Me.tableTRN_APINV.VENDOR_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_APINV.VENDOR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICENO() As String
            Get
                Return CType(Me(Me.tableTRN_APINV.INVOICENOColumn),String)
            End Get
            Set
                Me(Me.tableTRN_APINV.INVOICENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVDATE() As Date
            Get
                Return CType(Me(Me.tableTRN_APINV.INVDATEColumn),Date)
            End Get
            Set
                Me(Me.tableTRN_APINV.INVDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUEDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTRN_APINV.DUEDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUEDATE' in table 'TRN_APINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_APINV.DUEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_APINV.INVAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVAMT' in table 'TRN_APINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_APINV.INVAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_APINV.PAIDAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIDAMT' in table 'TRN_APINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_APINV.PAIDAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_APINV.DISCAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISCAMT' in table 'TRN_APINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_APINV.DISCAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTRN_APINV.PAIDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIDDATE' in table 'TRN_APINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_APINV.PAIDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OWAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_APINV.OWAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OWAMT' in table 'TRN_APINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_APINV.OWAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUEDATENull() As Boolean
            Return Me.IsNull(Me.tableTRN_APINV.DUEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUEDATENull()
            Me(Me.tableTRN_APINV.DUEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVAMTNull() As Boolean
            Return Me.IsNull(Me.tableTRN_APINV.INVAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVAMTNull()
            Me(Me.tableTRN_APINV.INVAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAIDAMTNull() As Boolean
            Return Me.IsNull(Me.tableTRN_APINV.PAIDAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAIDAMTNull()
            Me(Me.tableTRN_APINV.PAIDAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISCAMTNull() As Boolean
            Return Me.IsNull(Me.tableTRN_APINV.DISCAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISCAMTNull()
            Me(Me.tableTRN_APINV.DISCAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAIDDATENull() As Boolean
            Return Me.IsNull(Me.tableTRN_APINV.PAIDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAIDDATENull()
            Me(Me.tableTRN_APINV.PAIDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOWAMTNull() As Boolean
            Return Me.IsNull(Me.tableTRN_APINV.OWAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOWAMTNull()
            Me(Me.tableTRN_APINV.OWAMTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_VENDORRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_VENDOR As MST_VENDORDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_VENDOR = CType(Me.Table,MST_VENDORDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDOR_CODE() As String
            Get
                Return CType(Me(Me.tableMST_VENDOR.VENDOR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_VENDOR.VENDOR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDOR_NAME() As String
            Get
                Return CType(Me(Me.tableMST_VENDOR.VENDOR_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_VENDOR.VENDOR_NAMEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SMY_CUSTAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableSMY_CUSTAGE As SMY_CUSTAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSMY_CUSTAGE = CType(Me.Table,SMY_CUSTAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_CODE() As String
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.CUSTOMER_CODEColumn),String)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.CUSTOMER_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_NAME() As String
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.CUSTOMER_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.CUSTOMER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICENO() As String
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.INVOICENOColumn),String)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.INVOICENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVDATE() As Date
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.INVDATEColumn),Date)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.INVDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVAMT() As Decimal
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.INVAMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.INVAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDAMT() As Decimal
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.PAIDAMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.PAIDAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_RATE() As Decimal
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.CURR_RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.CURR_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.DOMESTIC_AMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_AMT' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.DOMESTIC_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.DOMESTIC_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_PAID' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.DOMESTIC_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_OW() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.DOMESTIC_OWColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_OW' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.DOMESTIC_OWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OW_030() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.OW_030Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OW_030' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.OW_030Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OW_060() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.OW_060Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OW_060' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.OW_060Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OW_090() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.OW_090Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OW_090' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.OW_090Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OW_120() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.OW_120Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OW_120' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.OW_120Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OW_ABV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.OW_ABVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OW_ABV' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.OW_ABVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSMY_CUSTAGE.AGEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AGE' in table 'SMY_CUSTAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.AGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCAMT() As Decimal
            Get
                Return CType(Me(Me.tableSMY_CUSTAGE.DISCAMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableSMY_CUSTAGE.DISCAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_AMTNull() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.DOMESTIC_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_AMTNull()
            Me(Me.tableSMY_CUSTAGE.DOMESTIC_AMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.DOMESTIC_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_PAIDNull()
            Me(Me.tableSMY_CUSTAGE.DOMESTIC_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_OWNull() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.DOMESTIC_OWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_OWNull()
            Me(Me.tableSMY_CUSTAGE.DOMESTIC_OWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOW_030Null() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.OW_030Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOW_030Null()
            Me(Me.tableSMY_CUSTAGE.OW_030Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOW_060Null() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.OW_060Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOW_060Null()
            Me(Me.tableSMY_CUSTAGE.OW_060Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOW_090Null() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.OW_090Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOW_090Null()
            Me(Me.tableSMY_CUSTAGE.OW_090Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOW_120Null() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.OW_120Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOW_120Null()
            Me(Me.tableSMY_CUSTAGE.OW_120Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOW_ABVNull() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.OW_ABVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOW_ABVNull()
            Me(Me.tableSMY_CUSTAGE.OW_ABVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGENull() As Boolean
            Return Me.IsNull(Me.tableSMY_CUSTAGE.AGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGENull()
            Me(Me.tableSMY_CUSTAGE.AGEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_CUSTOMERRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_CUSTOMER As MST_CUSTOMERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_CUSTOMER = CType(Me.Table,MST_CUSTOMERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_CODE() As String
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.CUSTOMER_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CUSTOMER_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_NAME() As String
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.CUSTOMER_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CUSTOMER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR1' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR2' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR3' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR4' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAX' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR1Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR1Null()
            Me(Me.tableMST_CUSTOMER.ADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR2Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR2Null()
            Me(Me.tableMST_CUSTOMER.ADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR3Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR3Null()
            Me(Me.tableMST_CUSTOMER.ADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR4Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR4Null()
            Me(Me.tableMST_CUSTOMER.ADDR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHONENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHONENull()
            Me(Me.tableMST_CUSTOMER.PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAXNull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAXNull()
            Me(Me.tableMST_CUSTOMER.FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSMY_STATEMENTRows() As SMY_STATEMENTRow()
            If (Me.Table.ChildRelations("FK_TRN_ARINV_MST_CUSTOMER") Is Nothing) Then
                Return New SMY_STATEMENTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRN_ARINV_MST_CUSTOMER")),SMY_STATEMENTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_COMPANYRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_COMPANY As MST_COMPANYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_COMPANY = CType(Me.Table,MST_COMPANYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPNO() As Integer
            Get
                Return CType(Me(Me.tableMST_COMPANY.COMPNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_COMPANY.COMPNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMP_NAME() As String
            Get
                Return CType(Me(Me.tableMST_COMPANY.COMP_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_COMPANY.COMP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REG_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.REG_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REG_CODE' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.REG_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR1' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR2' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR3' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR4' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHONENO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.PHONENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONENO' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.PHONENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAXNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.FAXNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAXNO' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.FAXNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREG_CODENull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.REG_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREG_CODENull()
            Me(Me.tableMST_COMPANY.REG_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR1Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR1Null()
            Me(Me.tableMST_COMPANY.ADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR2Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR2Null()
            Me(Me.tableMST_COMPANY.ADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR3Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR3Null()
            Me(Me.tableMST_COMPANY.ADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR4Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR4Null()
            Me(Me.tableMST_COMPANY.ADDR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.PHONENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHONENONull()
            Me(Me.tableMST_COMPANY.PHONENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAXNONull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.FAXNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAXNONull()
            Me(Me.tableMST_COMPANY.FAXNOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SMY_STATEMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSMY_STATEMENT As SMY_STATEMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSMY_STATEMENT = CType(Me.Table,SMY_STATEMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_CODE() As String
            Get
                Return CType(Me(Me.tableSMY_STATEMENT.CUSTOMER_CODEColumn),String)
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUSTOMER_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.INVDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVDESC' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.INVDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICENO() As String
            Get
                Return CType(Me(Me.tableSMY_STATEMENT.INVOICENOColumn),String)
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.INVOICENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVDATE() As Date
            Get
                Return CType(Me(Me.tableSMY_STATEMENT.INVDATEColumn),Date)
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.INVDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.INVAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVAMT' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.INVAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDAMT() As Decimal
            Get
                Return CType(Me(Me.tableSMY_STATEMENT.PAIDAMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.PAIDAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_RATE() As Decimal
            Get
                Return CType(Me(Me.tableSMY_STATEMENT.CURR_RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CURR_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUEDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.DUEDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUEDATE' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.DUEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.CUSTOMER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_NAME' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUSTOMER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.CUST_ADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ADDR1' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUST_ADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.CUST_ADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ADDR2' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUST_ADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.CUST_ADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ADDR3' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUST_ADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ADDR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.CUST_ADDR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ADDR4' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUST_ADDR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.CUST_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_PHONE' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUST_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.CUST_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_FAX' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.CUST_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.DOMESTIC_AMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_AMT' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.DOMESTIC_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.DOMESTIC_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_PAID' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.DOMESTIC_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_OW() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_STATEMENT.DOMESTIC_OWColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_OW' in table 'SMY_STATEMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.DOMESTIC_OWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARINVNO() As Integer
            Get
                Return CType(Me(Me.tableSMY_STATEMENT.ARINVNOColumn),Integer)
            End Get
            Set
                Me(Me.tableSMY_STATEMENT.ARINVNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_CUSTOMERRow() As MST_CUSTOMERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRN_ARINV_MST_CUSTOMER")),MST_CUSTOMERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRN_ARINV_MST_CUSTOMER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVDESCNull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.INVDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVDESCNull()
            Me(Me.tableSMY_STATEMENT.INVDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVAMTNull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.INVAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVAMTNull()
            Me(Me.tableSMY_STATEMENT.INVAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUEDATENull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.DUEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUEDATENull()
            Me(Me.tableSMY_STATEMENT.DUEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTOMER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.CUSTOMER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTOMER_NAMENull()
            Me(Me.tableSMY_STATEMENT.CUSTOMER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_ADDR1Null() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.CUST_ADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_ADDR1Null()
            Me(Me.tableSMY_STATEMENT.CUST_ADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_ADDR2Null() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.CUST_ADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_ADDR2Null()
            Me(Me.tableSMY_STATEMENT.CUST_ADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_ADDR3Null() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.CUST_ADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_ADDR3Null()
            Me(Me.tableSMY_STATEMENT.CUST_ADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_ADDR4Null() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.CUST_ADDR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_ADDR4Null()
            Me(Me.tableSMY_STATEMENT.CUST_ADDR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_PHONENull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.CUST_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_PHONENull()
            Me(Me.tableSMY_STATEMENT.CUST_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_FAXNull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.CUST_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_FAXNull()
            Me(Me.tableSMY_STATEMENT.CUST_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_AMTNull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.DOMESTIC_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_AMTNull()
            Me(Me.tableSMY_STATEMENT.DOMESTIC_AMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.DOMESTIC_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_PAIDNull()
            Me(Me.tableSMY_STATEMENT.DOMESTIC_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_OWNull() As Boolean
            Return Me.IsNull(Me.tableSMY_STATEMENT.DOMESTIC_OWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_OWNull()
            Me(Me.tableSMY_STATEMENT.DOMESTIC_OWColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SMY_TRIAL_BALANCERow
        Inherits Global.System.Data.DataRow
        
        Private tableSMY_TRIAL_BALANCE As SMY_TRIAL_BALANCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSMY_TRIAL_BALANCE = CType(Me.Table,SMY_TRIAL_BALANCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableSMY_TRIAL_BALANCE.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableSMY_TRIAL_BALANCE.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_TRIAL_BALANCE.ACC_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_NAME' in table 'SMY_TRIAL_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_TRIAL_BALANCE.ACC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TYPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSMY_TRIAL_BALANCE.TYPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TYPE_NAME' in table 'SMY_TRIAL_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_TRIAL_BALANCE.TYPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_TRIAL_BALANCE.ACC_AMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_AMT' in table 'SMY_TRIAL_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_TRIAL_BALANCE.ACC_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBIT_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_TRIAL_BALANCE.DEBIT_AMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEBIT_AMT' in table 'SMY_TRIAL_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_TRIAL_BALANCE.DEBIT_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREDIT_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSMY_TRIAL_BALANCE.CREDIT_AMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREDIT_AMT' in table 'SMY_TRIAL_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSMY_TRIAL_BALANCE.CREDIT_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSMY_TRIAL_BALANCE.ACC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_NAMENull()
            Me(Me.tableSMY_TRIAL_BALANCE.ACC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTYPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSMY_TRIAL_BALANCE.TYPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTYPE_NAMENull()
            Me(Me.tableSMY_TRIAL_BALANCE.TYPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_AMTNull() As Boolean
            Return Me.IsNull(Me.tableSMY_TRIAL_BALANCE.ACC_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_AMTNull()
            Me(Me.tableSMY_TRIAL_BALANCE.ACC_AMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBIT_AMTNull() As Boolean
            Return Me.IsNull(Me.tableSMY_TRIAL_BALANCE.DEBIT_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBIT_AMTNull()
            Me(Me.tableSMY_TRIAL_BALANCE.DEBIT_AMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREDIT_AMTNull() As Boolean
            Return Me.IsNull(Me.tableSMY_TRIAL_BALANCE.CREDIT_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREDIT_AMTNull()
            Me(Me.tableSMY_TRIAL_BALANCE.CREDIT_AMTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReportBLPLRow
        Inherits Global.System.Data.DataRow
        
        Private tableReportBLPL As ReportBLPLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReportBLPL = CType(Me.Table,ReportBLPLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPTTYPE_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.RPTTYPE_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RPTTYPE_CODE' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.RPTTYPE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRINTDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.PRINTDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINTDESC' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.PRINTDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTH_TOTALAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.MTH_TOTALAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTH_TOTALAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.MTH_TOTALAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTH_BUDGETAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.MTH_BUDGETAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTH_BUDGETAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.MTH_BUDGETAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTH_VARAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.MTH_VARAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTH_VARAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.MTH_VARAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.TOTALAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.TOTALAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGETAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.BUDGETAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGETAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.BUDGETAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VARAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.VARAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VARAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.VARAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LMTH_TOTALAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.LMTH_TOTALAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LMTH_TOTALAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.LMTH_TOTALAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LMTH_BUDGETAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.LMTH_BUDGETAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LMTH_BUDGETAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.LMTH_BUDGETAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LMTH_VARAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.LMTH_VARAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LMTH_VARAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.LMTH_VARAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LTOTALAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.LTOTALAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LTOTALAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.LTOTALAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LBUDGETAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.LBUDGETAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LBUDGETAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.LBUDGETAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LVARAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.LVARAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LVARAMT' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.LVARAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMPYTOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.CMPYTOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CMPYTOTAL' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.CMPYTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMPMTOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.CMPMTOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CMPMTOTAL' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.CMPMTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SORTORDER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReportBLPL.SORTORDERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SORTORDER' in table 'ReportBLPL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportBLPL.SORTORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPTTYPE_CODENull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.RPTTYPE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPTTYPE_CODENull()
            Me(Me.tableReportBLPL.RPTTYPE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRINTDESCNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.PRINTDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRINTDESCNull()
            Me(Me.tableReportBLPL.PRINTDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTH_TOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.MTH_TOTALAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTH_TOTALAMTNull()
            Me(Me.tableReportBLPL.MTH_TOTALAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTH_BUDGETAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.MTH_BUDGETAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTH_BUDGETAMTNull()
            Me(Me.tableReportBLPL.MTH_BUDGETAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTH_VARAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.MTH_VARAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTH_VARAMTNull()
            Me(Me.tableReportBLPL.MTH_VARAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.TOTALAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALAMTNull()
            Me(Me.tableReportBLPL.TOTALAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGETAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.BUDGETAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGETAMTNull()
            Me(Me.tableReportBLPL.BUDGETAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVARAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.VARAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVARAMTNull()
            Me(Me.tableReportBLPL.VARAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLMTH_TOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.LMTH_TOTALAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLMTH_TOTALAMTNull()
            Me(Me.tableReportBLPL.LMTH_TOTALAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLMTH_BUDGETAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.LMTH_BUDGETAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLMTH_BUDGETAMTNull()
            Me(Me.tableReportBLPL.LMTH_BUDGETAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLMTH_VARAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.LMTH_VARAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLMTH_VARAMTNull()
            Me(Me.tableReportBLPL.LMTH_VARAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.LTOTALAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLTOTALAMTNull()
            Me(Me.tableReportBLPL.LTOTALAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLBUDGETAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.LBUDGETAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLBUDGETAMTNull()
            Me(Me.tableReportBLPL.LBUDGETAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLVARAMTNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.LVARAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLVARAMTNull()
            Me(Me.tableReportBLPL.LVARAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMPYTOTALNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.CMPYTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMPYTOTALNull()
            Me(Me.tableReportBLPL.CMPYTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMPMTOTALNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.CMPMTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMPMTOTALNull()
            Me(Me.tableReportBLPL.CMPMTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSORTORDERNull() As Boolean
            Return Me.IsNull(Me.tableReportBLPL.SORTORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSORTORDERNull()
            Me(Me.tableReportBLPL.SORTORDERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SMY_INVPAYDETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableSMY_INVPAYDETAIL As SMY_INVPAYDETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSMY_INVPAYDETAIL = CType(Me.Table,SMY_INVPAYDETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARINVNO() As Integer
            Get
                Return CType(Me(Me.tableSMY_INVPAYDETAIL.ARINVNOColumn),Integer)
            End Get
            Set
                Me(Me.tableSMY_INVPAYDETAIL.ARINVNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARCHEQUE_CODE() As String
            Get
                Return CType(Me(Me.tableSMY_INVPAYDETAIL.ARCHEQUE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableSMY_INVPAYDETAIL.ARCHEQUE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEAMT() As Decimal
            Get
                Return CType(Me(Me.tableSMY_INVPAYDETAIL.CHEQUEAMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableSMY_INVPAYDETAIL.CHEQUEAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUE_DATE() As Date
            Get
                Return CType(Me(Me.tableSMY_INVPAYDETAIL.CHEQUE_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableSMY_INVPAYDETAIL.CHEQUE_DATEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class InvoiceWithTaxRow
        Inherits Global.System.Data.DataRow
        
        Private tableInvoiceWithTax As InvoiceWithTaxDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInvoiceWithTax = CType(Me.Table,InvoiceWithTaxDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICENO() As String
            Get
                Return CType(Me(Me.tableInvoiceWithTax.INVOICENOColumn),String)
            End Get
            Set
                Me(Me.tableInvoiceWithTax.INVOICENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.INVDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVDESC' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.INVDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVAMT() As Decimal
            Get
                Return CType(Me(Me.tableInvoiceWithTax.INVAMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableInvoiceWithTax.INVAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_AMT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.TAX_AMT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_AMT1' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.TAX_AMT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_AMT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.TAX_AMT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_AMT2' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.TAX_AMT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_CODE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.TAX_CODE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_CODE1' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.TAX_CODE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_CODE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.TAX_CODE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_CODE2' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.TAX_CODE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_NAME1() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.TAX_NAME1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_NAME1' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.TAX_NAME1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_NAME2() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.TAX_NAME2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_NAME2' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.TAX_NAME2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.DOMESTIC_AMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_AMT' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.DOMESTIC_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_TAX1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.DOMESTIC_TAX1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_TAX1' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.DOMESTIC_TAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOMESTIC_TAX2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoiceWithTax.DOMESTIC_TAX2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMESTIC_TAX2' in table 'InvoiceWithTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoiceWithTax.DOMESTIC_TAX2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_RATE() As Decimal
            Get
                Return CType(Me(Me.tableInvoiceWithTax.CURR_RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableInvoiceWithTax.CURR_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVDESCNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.INVDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVDESCNull()
            Me(Me.tableInvoiceWithTax.INVDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_AMT1Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.TAX_AMT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_AMT1Null()
            Me(Me.tableInvoiceWithTax.TAX_AMT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_AMT2Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.TAX_AMT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_AMT2Null()
            Me(Me.tableInvoiceWithTax.TAX_AMT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_CODE1Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.TAX_CODE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_CODE1Null()
            Me(Me.tableInvoiceWithTax.TAX_CODE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_CODE2Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.TAX_CODE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_CODE2Null()
            Me(Me.tableInvoiceWithTax.TAX_CODE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_NAME1Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.TAX_NAME1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_NAME1Null()
            Me(Me.tableInvoiceWithTax.TAX_NAME1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_NAME2Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.TAX_NAME2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_NAME2Null()
            Me(Me.tableInvoiceWithTax.TAX_NAME2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_AMTNull() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.DOMESTIC_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_AMTNull()
            Me(Me.tableInvoiceWithTax.DOMESTIC_AMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_TAX1Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.DOMESTIC_TAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_TAX1Null()
            Me(Me.tableInvoiceWithTax.DOMESTIC_TAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOMESTIC_TAX2Null() As Boolean
            Return Me.IsNull(Me.tableInvoiceWithTax.DOMESTIC_TAX2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOMESTIC_TAX2Null()
            Me(Me.tableInvoiceWithTax.DOMESTIC_TAX2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class STKTAKELISTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSTKTAKELIST As STKTAKELISTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTKTAKELIST = CType(Me.Table,STKTAKELISTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTKTAKELIST.ITEM_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_CODE' in table 'STKTAKELIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTKTAKELIST.ITEM_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTKTAKELIST.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'STKTAKELIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTKTAKELIST.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BALQTY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSTKTAKELIST.BALQTYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BALQTY' in table 'STKTAKELIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTKTAKELIST.BALQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_CODENull() As Boolean
            Return Me.IsNull(Me.tableSTKTAKELIST.ITEM_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_CODENull()
            Me(Me.tableSTKTAKELIST.ITEM_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSTKTAKELIST.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tableSTKTAKELIST.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBALQTYNull() As Boolean
            Return Me.IsNull(Me.tableSTKTAKELIST.BALQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBALQTYNull()
            Me(Me.tableSTKTAKELIST.BALQTYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_WAREHOUSERow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_WAREHOUSE As MST_WAREHOUSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_WAREHOUSE = CType(Me.Table,MST_WAREHOUSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WHNO() As Integer
            Get
                Return CType(Me(Me.tableMST_WAREHOUSE.WHNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WHNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.WH_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_NAME' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WH_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.WH_ADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_ADDR1' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WH_ADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.WH_ADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_ADDR2' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WH_ADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.WH_ADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_ADDR3' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WH_ADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ADDR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.WH_ADDR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_ADDR4' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WH_ADDR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.WH_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_PHONE' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WH_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.WH_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_FAX' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.WH_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTACT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_WAREHOUSE.CONTACTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONTACT' in table 'MST_WAREHOUSE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_WAREHOUSE.CONTACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.WH_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_NAMENull()
            Me(Me.tableMST_WAREHOUSE.WH_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_ADDR1Null() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.WH_ADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_ADDR1Null()
            Me(Me.tableMST_WAREHOUSE.WH_ADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_ADDR2Null() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.WH_ADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_ADDR2Null()
            Me(Me.tableMST_WAREHOUSE.WH_ADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_ADDR3Null() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.WH_ADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_ADDR3Null()
            Me(Me.tableMST_WAREHOUSE.WH_ADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_ADDR4Null() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.WH_ADDR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_ADDR4Null()
            Me(Me.tableMST_WAREHOUSE.WH_ADDR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_PHONENull() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.WH_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_PHONENull()
            Me(Me.tableMST_WAREHOUSE.WH_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_FAXNull() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.WH_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_FAXNull()
            Me(Me.tableMST_WAREHOUSE.WH_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTACTNull() As Boolean
            Return Me.IsNull(Me.tableMST_WAREHOUSE.CONTACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTACTNull()
            Me(Me.tableMST_WAREHOUSE.CONTACTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReportBLBudgetRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReportBLBudgetRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReportBLBudgetRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReportBLBudgetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRN_APINVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRN_APINVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRN_APINVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRN_APINVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_VENDORRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_VENDORRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_VENDORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_VENDORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SMY_CUSTAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SMY_CUSTAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SMY_CUSTAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SMY_CUSTAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_CUSTOMERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_CUSTOMERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_CUSTOMERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_CUSTOMERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_COMPANYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_COMPANYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_COMPANYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_COMPANYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SMY_STATEMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SMY_STATEMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SMY_STATEMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SMY_STATEMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SMY_TRIAL_BALANCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SMY_TRIAL_BALANCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SMY_TRIAL_BALANCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SMY_TRIAL_BALANCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReportBLPLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReportBLPLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReportBLPLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReportBLPLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SMY_INVPAYDETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SMY_INVPAYDETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SMY_INVPAYDETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SMY_INVPAYDETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class InvoiceWithTaxRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As InvoiceWithTaxRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As InvoiceWithTaxRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As InvoiceWithTaxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class STKTAKELISTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STKTAKELISTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As STKTAKELISTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As STKTAKELISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_WAREHOUSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_WAREHOUSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_WAREHOUSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_WAREHOUSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CSAccReportingTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReportBLBudgetTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ReportBLBudget"
            tableMapping.ColumnMappings.Add("PRINTDESC", "PRINTDESC")
            tableMapping.ColumnMappings.Add("TOTALAMT", "TOTALAMT")
            tableMapping.ColumnMappings.Add("BUDGETAMT", "BUDGETAMT")
            tableMapping.ColumnMappings.Add("VARAMT", "VARAMT")
            tableMapping.ColumnMappings.Add("RPTTYPE_CODE", "RPTTYPE_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.ReportBLBudget"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTNO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_MONTH", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.ReportBLBudgetDataTable, ByVal ACCRPTNO As Global.System.Nullable(Of Integer), ByVal ACC_YEAR As Global.System.Nullable(Of Integer), ByVal ACC_MONTH As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ACCRPTNO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ACCRPTNO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ACC_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ACC_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ACCRPTNO As Global.System.Nullable(Of Integer), ByVal ACC_YEAR As Global.System.Nullable(Of Integer), ByVal ACC_MONTH As Global.System.Nullable(Of Integer)) As CSAccReporting.ReportBLBudgetDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ACCRPTNO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ACCRPTNO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ACC_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ACC_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CSAccReporting.ReportBLBudgetDataTable = New CSAccReporting.ReportBLBudgetDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRN_APINVTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRN_APINV"
            tableMapping.ColumnMappings.Add("VENDOR_CODE", "VENDOR_CODE")
            tableMapping.ColumnMappings.Add("VENDOR_NAME", "VENDOR_NAME")
            tableMapping.ColumnMappings.Add("INVOICENO", "INVOICENO")
            tableMapping.ColumnMappings.Add("INVDATE", "INVDATE")
            tableMapping.ColumnMappings.Add("DUEDATE", "DUEDATE")
            tableMapping.ColumnMappings.Add("INVAMT", "INVAMT")
            tableMapping.ColumnMappings.Add("PAIDAMT", "PAIDAMT")
            tableMapping.ColumnMappings.Add("DISCAMT", "DISCAMT")
            tableMapping.ColumnMappings.Add("PAIDDATE", "PAIDDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TRN_APINV.VENDOR_CODE, MST_VENDOR.VENDOR_NAME, TRN_APINV.INVOICENO, TR"& _ 
                "N_APINV.INVDATE, TRN_APINV.DUEDATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TRN_APINV.INVAMT * T"& _ 
                "RN_APINV.CURR_RATE AS INVAMT, TRN_APINV.PAIDAMT * TRN_APINV.CURR_RATE AS PAIDAMT"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TRN_APINV.DISCAMT * TRN_APINV.CURR_RATE AS DISCAMT, TR"& _ 
                "N_APINV.PAIDDATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRN_APINV INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      MST_V"& _ 
                "ENDOR ON TRN_APINV.VENDOR_CODE = MST_VENDOR.VENDOR_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TRN_APINV.VE"& _ 
                "NDOR_CODE BETWEEN @STARTCODE AND @ENDCODE) AND (TRN_APINV.INVAMT <> TRN_APINV.PA"& _ 
                "IDAMT)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY TRN_APINV.VENDOR_CODE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STARTCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENDCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.TRN_APINVDataTable, ByVal STARTCODE As String, ByVal ENDCODE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDCODE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal STARTCODE As String, ByVal ENDCODE As String) As CSAccReporting.TRN_APINVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDCODE,String)
            End If
            Dim dataTable As CSAccReporting.TRN_APINVDataTable = New CSAccReporting.TRN_APINVDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_VENDORTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_VENDOR"
            tableMapping.ColumnMappings.Add("VENDOR_CODE", "VENDOR_CODE")
            tableMapping.ColumnMappings.Add("VENDOR_NAME", "VENDOR_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_VENDOR] WHERE (([VENDOR_CODE] = @Original_VENDOR_CODE) AND"& _ 
                " ([VENDOR_NAME] = @Original_VENDOR_NAME))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VENDOR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VENDOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_VENDOR] SET [VENDOR_CODE] = @VENDOR_CODE, [VENDOR_NAME] = @VEND"& _ 
                "OR_NAME WHERE (([VENDOR_CODE] = @Original_VENDOR_CODE) AND ([VENDOR_NAME] = @Ori"& _ 
                "ginal_VENDOR_NAME));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT VENDOR_CODE, VENDOR_NAME FROM MST_VENDOR WHERE (VEN"& _ 
                "DOR_CODE = @VENDOR_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENDOR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENDOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VENDOR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VENDOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDOR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT VENDOR_CODE, VENDOR_NAME FROM dbo.MST_VENDOR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.MST_VENDORDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccReporting.MST_VENDORDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccReporting.MST_VENDORDataTable = New CSAccReporting.MST_VENDORDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccReporting.MST_VENDORDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccReporting) As Integer
            Return Me.Adapter.Update(dataSet, "MST_VENDOR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_VENDOR_CODE As String, ByVal Original_VENDOR_NAME As String) As Integer
            If (Original_VENDOR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VENDOR_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_VENDOR_CODE,String)
            End If
            If (Original_VENDOR_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VENDOR_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_VENDOR_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VENDOR_CODE As String, ByVal VENDOR_NAME As String, ByVal Original_VENDOR_CODE As String, ByVal Original_VENDOR_NAME As String) As Integer
            If (VENDOR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VENDOR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(VENDOR_CODE,String)
            End If
            If (VENDOR_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VENDOR_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(VENDOR_NAME,String)
            End If
            If (Original_VENDOR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VENDOR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_VENDOR_CODE,String)
            End If
            If (Original_VENDOR_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VENDOR_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_VENDOR_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VENDOR_NAME As String, ByVal Original_VENDOR_CODE As String, ByVal Original_VENDOR_NAME As String) As Integer
            Return Me.Update(Original_VENDOR_CODE, VENDOR_NAME, Original_VENDOR_CODE, Original_VENDOR_NAME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SMY_CUSTAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SMY_CUSTAGE"
            tableMapping.ColumnMappings.Add("CUSTOMER_CODE", "CUSTOMER_CODE")
            tableMapping.ColumnMappings.Add("CUSTOMER_NAME", "CUSTOMER_NAME")
            tableMapping.ColumnMappings.Add("INVOICENO", "INVOICENO")
            tableMapping.ColumnMappings.Add("INVDATE", "INVDATE")
            tableMapping.ColumnMappings.Add("INVAMT", "INVAMT")
            tableMapping.ColumnMappings.Add("PAIDAMT", "PAIDAMT")
            tableMapping.ColumnMappings.Add("CURR_RATE", "CURR_RATE")
            tableMapping.ColumnMappings.Add("AGE", "AGE")
            tableMapping.ColumnMappings.Add("DISCAMT", "DISCAMT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TRN_ARINV.CUSTOMER_CODE, MST_CUSTOMER.CUSTOMER_NAME, TRN_ARINV.INVOICE"& _ 
                "NO, TRN_ARINV.INVDATE, TRN_ARINV.INVAMT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TRN_ARINV.PAIDA"& _ 
                "MT, TRN_ARINV.CURR_RATE, CAST(@TODAY - TRN_ARINV.INVDATE AS INT) AS AGE, TRN_ARI"& _ 
                "NV.DISCAMT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRN_ARINV INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      MST_CUSTOME"& _ 
                "R ON TRN_ARINV.CUSTOMER_CODE = MST_CUSTOMER.CUSTOMER_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TRN_ARINV."& _ 
                "CUSTOMER_CODE BETWEEN @STARTCODE AND @ENDCODE) AND (TRN_ARINV.INVDATE <= @INDATE"& _ 
                ") AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ((TRN_ARINV.PAIDAMT - TRN_ARINV.DISCAMT) <> TRN_AR"& _ 
                "INV.INVAMT)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TODAY", Global.System.Data.SqlDbType.DateTime, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STARTCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENDCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.SMY_CUSTAGEDataTable, ByVal TODAY As Date, ByVal STARTCODE As String, ByVal ENDCODE As String, ByVal INDATE As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TODAY,Date)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENDCODE,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INDATE,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal TODAY As Date, ByVal STARTCODE As String, ByVal ENDCODE As String, ByVal INDATE As Date) As CSAccReporting.SMY_CUSTAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TODAY,Date)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENDCODE,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INDATE,Date)
            Dim dataTable As CSAccReporting.SMY_CUSTAGEDataTable = New CSAccReporting.SMY_CUSTAGEDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_CUSTOMERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_CUSTOMER"
            tableMapping.ColumnMappings.Add("CUSTOMER_CODE", "CUSTOMER_CODE")
            tableMapping.ColumnMappings.Add("CUSTOMER_NAME", "CUSTOMER_NAME")
            tableMapping.ColumnMappings.Add("ADDR1", "ADDR1")
            tableMapping.ColumnMappings.Add("ADDR2", "ADDR2")
            tableMapping.ColumnMappings.Add("ADDR3", "ADDR3")
            tableMapping.ColumnMappings.Add("ADDR4", "ADDR4")
            tableMapping.ColumnMappings.Add("PHONE", "PHONE")
            tableMapping.ColumnMappings.Add("FAX", "FAX")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MST_CUSTOMER] WHERE (([CUSTOMER_CODE] = @Original_CUSTOMER_CODE) AND"& _ 
                " ([CUSTOMER_NAME] = @Original_CUSTOMER_NAME) AND ((@IsNull_ADDR1 = 1 AND [ADDR1]"& _ 
                " IS NULL) OR ([ADDR1] = @Original_ADDR1)) AND ((@IsNull_ADDR2 = 1 AND [ADDR2] IS"& _ 
                " NULL) OR ([ADDR2] = @Original_ADDR2)) AND ((@IsNull_ADDR3 = 1 AND [ADDR3] IS NU"& _ 
                "LL) OR ([ADDR3] = @Original_ADDR3)) AND ((@IsNull_ADDR4 = 1 AND [ADDR4] IS NULL)"& _ 
                " OR ([ADDR4] = @Original_ADDR4)) AND ((@IsNull_PHONE = 1 AND [PHONE] IS NULL) OR"& _ 
                " ([PHONE] = @Original_PHONE)) AND ((@IsNull_FAX = 1 AND [FAX] IS NULL) OR ([FAX]"& _ 
                " = @Original_FAX)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MST_CUSTOMER] SET [CUSTOMER_CODE] = @CUSTOMER_CODE, [CUSTOMER_NAME] = @CU"& _ 
                "STOMER_NAME, [ADDR1] = @ADDR1, [ADDR2] = @ADDR2, [ADDR3] = @ADDR3, [ADDR4] = @AD"& _ 
                "DR4, [PHONE] = @PHONE, [FAX] = @FAX WHERE (([CUSTOMER_CODE] = @Original_CUSTOMER"& _ 
                "_CODE) AND ([CUSTOMER_NAME] = @Original_CUSTOMER_NAME) AND ((@IsNull_ADDR1 = 1 A"& _ 
                "ND [ADDR1] IS NULL) OR ([ADDR1] = @Original_ADDR1)) AND ((@IsNull_ADDR2 = 1 AND "& _ 
                "[ADDR2] IS NULL) OR ([ADDR2] = @Original_ADDR2)) AND ((@IsNull_ADDR3 = 1 AND [AD"& _ 
                "DR3] IS NULL) OR ([ADDR3] = @Original_ADDR3)) AND ((@IsNull_ADDR4 = 1 AND [ADDR4"& _ 
                "] IS NULL) OR ([ADDR4] = @Original_ADDR4)) AND ((@IsNull_PHONE = 1 AND [PHONE] I"& _ 
                "S NULL) OR ([PHONE] = @Original_PHONE)) AND ((@IsNull_FAX = 1 AND [FAX] IS NULL)"& _ 
                " OR ([FAX] = @Original_FAX)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CUSTOMER_CODE, CUSTOMER_NAME, ADDR1, ADDR"& _ 
                "2, ADDR3, ADDR4, PHONE, FAX FROM MST_CUSTOMER WHERE (CUSTOMER_CODE = @CUSTOMER_C"& _ 
                "ODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CUSTOMER_CODE, CUSTOMER_NAME, ADDR1, ADDR2, ADDR3, ADDR4, PHONE, FAX"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "FROM         MST_CUSTOMER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.MST_CUSTOMERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccReporting.MST_CUSTOMERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccReporting.MST_CUSTOMERDataTable = New CSAccReporting.MST_CUSTOMERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccReporting.MST_CUSTOMERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccReporting) As Integer
            Return Me.Adapter.Update(dataSet, "MST_CUSTOMER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CUSTOMER_CODE As String, ByVal Original_CUSTOMER_NAME As String, ByVal Original_ADDR1 As String, ByVal Original_ADDR2 As String, ByVal Original_ADDR3 As String, ByVal Original_ADDR4 As String, ByVal Original_PHONE As String, ByVal Original_FAX As String) As Integer
            If (Original_CUSTOMER_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CUSTOMER_CODE,String)
            End If
            If (Original_CUSTOMER_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CUSTOMER_NAME,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PHONE,String)
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_FAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CUSTOMER_CODE As String,  _
                    ByVal CUSTOMER_NAME As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal Original_CUSTOMER_CODE As String,  _
                    ByVal Original_CUSTOMER_NAME As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONE As String,  _
                    ByVal Original_FAX As String) As Integer
            If (CUSTOMER_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTOMER_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CUSTOMER_CODE,String)
            End If
            If (CUSTOMER_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTOMER_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CUSTOMER_NAME,String)
            End If
            If (ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ADDR1,String)
            End If
            If (ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADDR2,String)
            End If
            If (ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ADDR3,String)
            End If
            If (ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ADDR4,String)
            End If
            If (PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PHONE,String)
            End If
            If (FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FAX,String)
            End If
            If (Original_CUSTOMER_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CUSTOMER_CODE,String)
            End If
            If (Original_CUSTOMER_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CUSTOMER_NAME,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_PHONE,String)
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CUSTOMER_NAME As String, ByVal ADDR1 As String, ByVal ADDR2 As String, ByVal ADDR3 As String, ByVal ADDR4 As String, ByVal PHONE As String, ByVal FAX As String, ByVal Original_CUSTOMER_CODE As String, ByVal Original_CUSTOMER_NAME As String, ByVal Original_ADDR1 As String, ByVal Original_ADDR2 As String, ByVal Original_ADDR3 As String, ByVal Original_ADDR4 As String, ByVal Original_PHONE As String, ByVal Original_FAX As String) As Integer
            Return Me.Update(Original_CUSTOMER_CODE, CUSTOMER_NAME, ADDR1, ADDR2, ADDR3, ADDR4, PHONE, FAX, Original_CUSTOMER_CODE, Original_CUSTOMER_NAME, Original_ADDR1, Original_ADDR2, Original_ADDR3, Original_ADDR4, Original_PHONE, Original_FAX)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_COMPANYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_COMPANY"
            tableMapping.ColumnMappings.Add("COMPNO", "COMPNO")
            tableMapping.ColumnMappings.Add("COMP_NAME", "COMP_NAME")
            tableMapping.ColumnMappings.Add("REG_CODE", "REG_CODE")
            tableMapping.ColumnMappings.Add("ADDR1", "ADDR1")
            tableMapping.ColumnMappings.Add("ADDR2", "ADDR2")
            tableMapping.ColumnMappings.Add("ADDR3", "ADDR3")
            tableMapping.ColumnMappings.Add("ADDR4", "ADDR4")
            tableMapping.ColumnMappings.Add("PHONENO", "PHONENO")
            tableMapping.ColumnMappings.Add("FAXNO", "FAXNO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MST_COMPANY] WHERE (([COMPNO] = @Original_COMPNO) AND ([COMP_NAME] ="& _ 
                " @Original_COMP_NAME) AND ((@IsNull_REG_CODE = 1 AND [REG_CODE] IS NULL) OR ([RE"& _ 
                "G_CODE] = @Original_REG_CODE)) AND ((@IsNull_ADDR1 = 1 AND [ADDR1] IS NULL) OR ("& _ 
                "[ADDR1] = @Original_ADDR1)) AND ((@IsNull_ADDR2 = 1 AND [ADDR2] IS NULL) OR ([AD"& _ 
                "DR2] = @Original_ADDR2)) AND ((@IsNull_ADDR3 = 1 AND [ADDR3] IS NULL) OR ([ADDR3"& _ 
                "] = @Original_ADDR3)) AND ((@IsNull_ADDR4 = 1 AND [ADDR4] IS NULL) OR ([ADDR4] ="& _ 
                " @Original_ADDR4)) AND ((@IsNull_PHONENO = 1 AND [PHONENO] IS NULL) OR ([PHONENO"& _ 
                "] = @Original_PHONENO)) AND ((@IsNull_FAXNO = 1 AND [FAXNO] IS NULL) OR ([FAXNO]"& _ 
                " = @Original_FAXNO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMPNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REG_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONENO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAXNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAXNO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MST_COMPANY] SET [COMP_NAME] = @COMP_NAME, [REG_CODE] = @REG_CODE, [ADDR1"& _ 
                "] = @ADDR1, [ADDR2] = @ADDR2, [ADDR3] = @ADDR3, [ADDR4] = @ADDR4, [PHONENO] = @P"& _ 
                "HONENO, [FAXNO] = @FAXNO WHERE (([COMPNO] = @Original_COMPNO) AND ([COMP_NAME] ="& _ 
                " @Original_COMP_NAME) AND ((@IsNull_REG_CODE = 1 AND [REG_CODE] IS NULL) OR ([RE"& _ 
                "G_CODE] = @Original_REG_CODE)) AND ((@IsNull_ADDR1 = 1 AND [ADDR1] IS NULL) OR ("& _ 
                "[ADDR1] = @Original_ADDR1)) AND ((@IsNull_ADDR2 = 1 AND [ADDR2] IS NULL) OR ([AD"& _ 
                "DR2] = @Original_ADDR2)) AND ((@IsNull_ADDR3 = 1 AND [ADDR3] IS NULL) OR ([ADDR3"& _ 
                "] = @Original_ADDR3)) AND ((@IsNull_ADDR4 = 1 AND [ADDR4] IS NULL) OR ([ADDR4] ="& _ 
                " @Original_ADDR4)) AND ((@IsNull_PHONENO = 1 AND [PHONENO] IS NULL) OR ([PHONENO"& _ 
                "] = @Original_PHONENO)) AND ((@IsNull_FAXNO = 1 AND [FAXNO] IS NULL) OR ([FAXNO]"& _ 
                " = @Original_FAXNO)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COMPNO, COMP_NAME, REG_CODE, ADDR1, ADDR2, ADDR3,"& _ 
                " ADDR4, PHONENO, FAXNO FROM MST_COMPANY WHERE (COMPNO = @COMPNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHONENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAXNO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMPNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REG_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONENO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAXNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAXNO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPNO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     COMPNO, COMP_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONENO, FAXN"& _ 
                "O"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         MST_COMPANY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.MST_COMPANYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccReporting.MST_COMPANYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccReporting.MST_COMPANYDataTable = New CSAccReporting.MST_COMPANYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccReporting.MST_COMPANYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccReporting) As Integer
            Return Me.Adapter.Update(dataSet, "MST_COMPANY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COMPNO As Integer, ByVal Original_COMP_NAME As String, ByVal Original_REG_CODE As String, ByVal Original_ADDR1 As String, ByVal Original_ADDR2 As String, ByVal Original_ADDR3 As String, ByVal Original_ADDR4 As String, ByVal Original_PHONENO As String, ByVal Original_FAXNO As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COMPNO,Integer)
            If (Original_COMP_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COMP_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COMP_NAME,String)
            End If
            If (Original_REG_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_REG_CODE,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONENO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PHONENO,String)
            End If
            If (Original_FAXNO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_FAXNO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COMP_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONENO As String,  _
                    ByVal FAXNO As String,  _
                    ByVal Original_COMPNO As Integer,  _
                    ByVal Original_COMP_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONENO As String,  _
                    ByVal Original_FAXNO As String,  _
                    ByVal COMPNO As Integer) As Integer
            If (COMP_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COMP_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COMP_NAME,String)
            End If
            If (REG_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(REG_CODE,String)
            End If
            If (ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ADDR1,String)
            End If
            If (ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADDR2,String)
            End If
            If (ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ADDR3,String)
            End If
            If (ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ADDR4,String)
            End If
            If (PHONENO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PHONENO,String)
            End If
            If (FAXNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FAXNO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COMPNO,Integer)
            If (Original_COMP_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COMP_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COMP_NAME,String)
            End If
            If (Original_REG_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_REG_CODE,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONENO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_PHONENO,String)
            End If
            If (Original_FAXNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_FAXNO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(COMPNO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COMP_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONENO As String,  _
                    ByVal FAXNO As String,  _
                    ByVal Original_COMPNO As Integer,  _
                    ByVal Original_COMP_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONENO As String,  _
                    ByVal Original_FAXNO As String) As Integer
            Return Me.Update(COMP_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONENO, FAXNO, Original_COMPNO, Original_COMP_NAME, Original_REG_CODE, Original_ADDR1, Original_ADDR2, Original_ADDR3, Original_ADDR4, Original_PHONENO, Original_FAXNO, Original_COMPNO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SMY_STATEMENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SMY_STATEMENT"
            tableMapping.ColumnMappings.Add("CUSTOMER_CODE", "CUSTOMER_CODE")
            tableMapping.ColumnMappings.Add("INVDESC", "INVDESC")
            tableMapping.ColumnMappings.Add("INVOICENO", "INVOICENO")
            tableMapping.ColumnMappings.Add("INVDATE", "INVDATE")
            tableMapping.ColumnMappings.Add("INVAMT", "INVAMT")
            tableMapping.ColumnMappings.Add("PAIDAMT", "PAIDAMT")
            tableMapping.ColumnMappings.Add("CURR_RATE", "CURR_RATE")
            tableMapping.ColumnMappings.Add("DUEDATE", "DUEDATE")
            tableMapping.ColumnMappings.Add("ARINVNO", "ARINVNO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRN_ARINV] WHERE (([ARINVNO] = @Original_ARINVNO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ARINVNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ARINVNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRN_ARINV] SET [CUSTOMER_CODE] = @CUSTOMER_CODE, [INVDESC] = @INVDESC, [I"& _ 
                "NVOICENO] = @INVOICENO, [INVDATE] = @INVDATE, [PAIDAMT] = @PAIDAMT, [CURR_RATE] "& _ 
                "= @CURR_RATE, [DUEDATE] = @DUEDATE, [ARINVNO] = @ARINVNO WHERE (([ARINVNO] = @Or"& _ 
                "iginal_ARINVNO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CUSTOMER_CODE, INVDESC, INVOICENO, INVDATE, INVAMT - D"& _ 
                "ISCAMT AS INVAMT, PAIDAMT, CURR_RATE, DUEDATE, ARINVNO FROM TRN_ARINV WHERE (ARI"& _ 
                "NVNO = @ARINVNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVDESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICENO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAIDAMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAIDAMT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DUEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DUEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ARINVNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ARINVNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ARINVNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ARINVNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CUSTOMER_CODE, INVDESC, INVOICENO, INVDATE, INVAMT - DISCAMT AS INVAMT"& _ 
                ", PAIDAMT, CURR_RATE, DUEDATE, ARINVNO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRN_ARINV"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (INVDA"& _ 
                "TE <= @INDATE) AND (CUSTOMER_CODE BETWEEN @STARTCODE AND @ENDCODE) AND (MONTH(IN"& _ 
                "VDATE) <> MONTH(@INDATE)) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (INVAMT <> PAIDAMT) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                    (INVDATE <= @INDATE) AND (CUSTOMER_CODE BETWEEN @STARTCODE A"& _ 
                "ND @ENDCODE) AND (MONTH(INVDATE) = MONTH(@INDATE))"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STARTCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENDCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.SMY_STATEMENTDataTable, ByVal INDATE As Date, ByVal STARTCODE As String, ByVal ENDCODE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(INDATE,Date)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENDCODE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal INDATE As Date, ByVal STARTCODE As String, ByVal ENDCODE As String) As CSAccReporting.SMY_STATEMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(INDATE,Date)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENDCODE,String)
            End If
            Dim dataTable As CSAccReporting.SMY_STATEMENTDataTable = New CSAccReporting.SMY_STATEMENTDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccReporting.SMY_STATEMENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccReporting) As Integer
            Return Me.Adapter.Update(dataSet, "SMY_STATEMENT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SMY_TRIAL_BALANCETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SMY_TRIAL_BALANCE"
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_NAME", "ACC_NAME")
            tableMapping.ColumnMappings.Add("TYPE_NAME", "TYPE_NAME")
            tableMapping.ColumnMappings.Add("ACC_AMT", "ACC_AMT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TRN_ACCHISTORY.ACC_CODE, MST_ACCOUNT.ACC_NAME, SYS_ACCTYPE.TYPE_NAME, "& _ 
                "SUM(TRN_ACCHISTORY.ACC_AMT) AS ACC_AMT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRN_ACCHISTORY INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      MST_ACCOUNT ON TRN_ACCHISTORY.ACC_CODE = MST_ACCOUNT.ACC_C"& _ 
                "ODE INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SYS_ACCTYPE ON MST_ACCOUNT.ACC_TYPE = SYS_"& _ 
                "ACCTYPE.ACC_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TRN_ACCHISTORY.ACC_YEAR = @ACC_YEAR) AND (TRN_ACCHI"& _ 
                "STORY.ACC_PERIOD = @ACC_MONTH)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY TRN_ACCHISTORY.ACC_CODE, MST_ACCOUNT.AC"& _ 
                "C_NAME, SYS_ACCTYPE.TYPE_NAME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_MONTH", Global.System.Data.SqlDbType.TinyInt, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.SMY_TRIAL_BALANCEDataTable, ByVal ACC_YEAR As Short, ByVal ACC_MONTH As Byte) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_YEAR,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ACC_MONTH,Byte)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ACC_YEAR As Short, ByVal ACC_MONTH As Byte) As CSAccReporting.SMY_TRIAL_BALANCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_YEAR,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ACC_MONTH,Byte)
            Dim dataTable As CSAccReporting.SMY_TRIAL_BALANCEDataTable = New CSAccReporting.SMY_TRIAL_BALANCEDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReportBLPLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ReportBLPL"
            tableMapping.ColumnMappings.Add("RPTTYPE_CODE", "RPTTYPE_CODE")
            tableMapping.ColumnMappings.Add("PRINTDESC", "PRINTDESC")
            tableMapping.ColumnMappings.Add("MTH_TOTALAMT", "MTH_TOTALAMT")
            tableMapping.ColumnMappings.Add("MTH_BUDGETAMT", "MTH_BUDGETAMT")
            tableMapping.ColumnMappings.Add("MTH_VARAMT", "MTH_VARAMT")
            tableMapping.ColumnMappings.Add("TOTALAMT", "TOTALAMT")
            tableMapping.ColumnMappings.Add("BUDGETAMT", "BUDGETAMT")
            tableMapping.ColumnMappings.Add("VARAMT", "VARAMT")
            tableMapping.ColumnMappings.Add("LMTH_TOTALAMT", "LMTH_TOTALAMT")
            tableMapping.ColumnMappings.Add("LMTH_BUDGETAMT", "LMTH_BUDGETAMT")
            tableMapping.ColumnMappings.Add("LMTH_VARAMT", "LMTH_VARAMT")
            tableMapping.ColumnMappings.Add("LTOTALAMT", "LTOTALAMT")
            tableMapping.ColumnMappings.Add("LBUDGETAMT", "LBUDGETAMT")
            tableMapping.ColumnMappings.Add("LVARAMT", "LVARAMT")
            tableMapping.ColumnMappings.Add("SORTORDER", "SORTORDER")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.ReportBLPL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTNO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_MONTH", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAST_YEAR", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAST_MONTH", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.ReportBLPLDataTable, ByVal ACCRPTNO As Global.System.Nullable(Of Integer), ByVal ACC_YEAR As Global.System.Nullable(Of Integer), ByVal ACC_MONTH As Global.System.Nullable(Of Integer), ByVal LAST_YEAR As Global.System.Nullable(Of Integer), ByVal LAST_MONTH As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ACCRPTNO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ACCRPTNO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ACC_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ACC_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LAST_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(LAST_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (LAST_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(LAST_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ACCRPTNO As Global.System.Nullable(Of Integer), ByVal ACC_YEAR As Global.System.Nullable(Of Integer), ByVal ACC_MONTH As Global.System.Nullable(Of Integer), ByVal LAST_YEAR As Global.System.Nullable(Of Integer), ByVal LAST_MONTH As Global.System.Nullable(Of Integer)) As CSAccReporting.ReportBLPLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ACCRPTNO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ACCRPTNO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ACC_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ACC_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LAST_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(LAST_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (LAST_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(LAST_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CSAccReporting.ReportBLPLDataTable = New CSAccReporting.ReportBLPLDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SMY_INVPAYDETAILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SMY_INVPAYDETAIL"
            tableMapping.ColumnMappings.Add("ARINVNO", "ARINVNO")
            tableMapping.ColumnMappings.Add("ARCHEQUE_CODE", "ARCHEQUE_CODE")
            tableMapping.ColumnMappings.Add("CHEQUEAMT", "CHEQUEAMT")
            tableMapping.ColumnMappings.Add("CHEQUE_DATE", "CHEQUE_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TRN_ARCHEQUED.ARINVNO, TRN_ARCHEQUE.ARCHEQUE_CODE, TRN_ARCHEQUED.CHEQU"& _ 
                "EAMT, TRN_ARCHEQUE.CHEQUE_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRN_ARCHEQUED INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "             TRN_ARCHEQUE ON TRN_ARCHEQUED.ARCHEQUENO = TRN_ARCHEQUE.ARCHEQUENO "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TRN_ARINV ON TRN_ARCHEQUED.ARINVNO = TRN_ARINV"& _ 
                ".ARINVNO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TRN_ARINV.INVDATE <= @INDATE) AND (TRN_ARINV.CUSTOMER_CODE "& _ 
                "BETWEEN @STARTCODE AND @ENDCODE) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (MONTH(TRN_ARINV.IN"& _ 
                "VDATE) <> MONTH(@INDATE)) AND (TRN_ARINV.INVAMT <> TRN_ARINV.PAIDAMT) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                (TRN_ARINV.INVDATE <= @INDATE) AND (TRN_ARINV.CUSTOMER_CODE BETW"& _ 
                "EEN @STARTCODE AND @ENDCODE) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (MONTH(TRN_ARINV.INVDAT"& _ 
                "E) = MONTH(@INDATE))"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STARTCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENDCODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.SMY_INVPAYDETAILDataTable, ByVal INDATE As Date, ByVal STARTCODE As String, ByVal ENDCODE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(INDATE,Date)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENDCODE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal INDATE As Date, ByVal STARTCODE As String, ByVal ENDCODE As String) As CSAccReporting.SMY_INVPAYDETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(INDATE,Date)
            If (STARTCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STARTCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(STARTCODE,String)
            End If
            If (ENDCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENDCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENDCODE,String)
            End If
            Dim dataTable As CSAccReporting.SMY_INVPAYDETAILDataTable = New CSAccReporting.SMY_INVPAYDETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class InvoiceWithTaxTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "InvoiceWithTax"
            tableMapping.ColumnMappings.Add("INVOICENO", "INVOICENO")
            tableMapping.ColumnMappings.Add("INVDESC", "INVDESC")
            tableMapping.ColumnMappings.Add("INVAMT", "INVAMT")
            tableMapping.ColumnMappings.Add("TAX_AMT1", "TAX_AMT1")
            tableMapping.ColumnMappings.Add("TAX_AMT2", "TAX_AMT2")
            tableMapping.ColumnMappings.Add("TAX_CODE1", "TAX_CODE1")
            tableMapping.ColumnMappings.Add("TAX_CODE2", "TAX_CODE2")
            tableMapping.ColumnMappings.Add("TAX_NAME1", "TAX_NAME1")
            tableMapping.ColumnMappings.Add("TAX_NAME2", "TAX_NAME2")
            tableMapping.ColumnMappings.Add("CURR_RATE", "CURR_RATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TRN_ARINV.INVOICENO, TRN_ARINV.INVDESC, TRN_ARINV.INVAMT, TRN_ARINV.TA"& _ 
                "X_AMT1, TRN_ARINV.TAX_AMT2, TRN_ARINV.TAX_CODE1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TRN_ARI"& _ 
                "NV.TAX_CODE2, MST_TAX.TAX_NAME AS TAX_NAME1, MST_TAX_1.TAX_NAME AS TAX_NAME2, TR"& _ 
                "N_ARINV.CURR_RATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRN_ARINV LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " MST_TAX ON TRN_ARINV.TAX_CODE1 = MST_TAX.TAX_CODE LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          MST_TAX AS MST_TAX_1 ON TRN_ARINV.TAX_CODE2 = MST_TAX_1.TAX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E     (TRN_ARINV.INVDATE BETWEEN @STARTDATE AND @ENDDATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY TRN_ARINV.IN"& _ 
                "VOICENO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STARTDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENDDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.InvoiceWithTaxDataTable, ByVal STARTDATE As Date, ByVal ENDDATE As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTDATE,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDDATE,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal STARTDATE As Date, ByVal ENDDATE As Date) As CSAccReporting.InvoiceWithTaxDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTDATE,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDDATE,Date)
            Dim dataTable As CSAccReporting.InvoiceWithTaxDataTable = New CSAccReporting.InvoiceWithTaxDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class STKTAKELISTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "STKTAKELIST"
            tableMapping.ColumnMappings.Add("ITEM_CODE", "ITEM_CODE")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("BALQTY", "BALQTY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.STKTAKELIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WHNO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_YEAR", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_MONTH", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.STKTAKELISTDataTable, ByVal WHNO As Global.System.Nullable(Of Integer), ByVal ITEM_YEAR As Global.System.Nullable(Of Integer), ByVal ITEM_MONTH As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (WHNO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(WHNO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ITEM_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ITEM_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ITEM_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ITEM_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal WHNO As Global.System.Nullable(Of Integer), ByVal ITEM_YEAR As Global.System.Nullable(Of Integer), ByVal ITEM_MONTH As Global.System.Nullable(Of Integer)) As CSAccReporting.STKTAKELISTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (WHNO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(WHNO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ITEM_YEAR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ITEM_YEAR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ITEM_MONTH.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ITEM_MONTH.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CSAccReporting.STKTAKELISTDataTable = New CSAccReporting.STKTAKELISTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_WAREHOUSETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_WAREHOUSE"
            tableMapping.ColumnMappings.Add("WHNO", "WHNO")
            tableMapping.ColumnMappings.Add("WH_NAME", "WH_NAME")
            tableMapping.ColumnMappings.Add("WH_ADDR1", "WH_ADDR1")
            tableMapping.ColumnMappings.Add("WH_ADDR2", "WH_ADDR2")
            tableMapping.ColumnMappings.Add("WH_ADDR3", "WH_ADDR3")
            tableMapping.ColumnMappings.Add("WH_ADDR4", "WH_ADDR4")
            tableMapping.ColumnMappings.Add("WH_PHONE", "WH_PHONE")
            tableMapping.ColumnMappings.Add("WH_FAX", "WH_FAX")
            tableMapping.ColumnMappings.Add("CONTACT", "CONTACT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_WAREHOUSE] WHERE (([WHNO] = @Original_WHNO) AND ((@IsNull_"& _ 
                "WH_NAME = 1 AND [WH_NAME] IS NULL) OR ([WH_NAME] = @Original_WH_NAME)) AND ((@Is"& _ 
                "Null_WH_ADDR1 = 1 AND [WH_ADDR1] IS NULL) OR ([WH_ADDR1] = @Original_WH_ADDR1)) "& _ 
                "AND ((@IsNull_WH_ADDR2 = 1 AND [WH_ADDR2] IS NULL) OR ([WH_ADDR2] = @Original_WH"& _ 
                "_ADDR2)) AND ((@IsNull_WH_ADDR3 = 1 AND [WH_ADDR3] IS NULL) OR ([WH_ADDR3] = @Or"& _ 
                "iginal_WH_ADDR3)) AND ((@IsNull_WH_ADDR4 = 1 AND [WH_ADDR4] IS NULL) OR ([WH_ADD"& _ 
                "R4] = @Original_WH_ADDR4)) AND ((@IsNull_WH_PHONE = 1 AND [WH_PHONE] IS NULL) OR"& _ 
                " ([WH_PHONE] = @Original_WH_PHONE)) AND ((@IsNull_WH_FAX = 1 AND [WH_FAX] IS NUL"& _ 
                "L) OR ([WH_FAX] = @Original_WH_FAX)) AND ((@IsNull_CONTACT = 1 AND [CONTACT] IS "& _ 
                "NULL) OR ([CONTACT] = @Original_CONTACT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WHNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WHNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONTACT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONTACT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_WAREHOUSE] ([WHNO], [WH_NAME], [WH_ADDR1], [WH_ADDR2], [WH"& _ 
                "_ADDR3], [WH_ADDR4], [WH_PHONE], [WH_FAX], [CONTACT]) VALUES (@WHNO, @WH_NAME, @"& _ 
                "WH_ADDR1, @WH_ADDR2, @WH_ADDR3, @WH_ADDR4, @WH_PHONE, @WH_FAX, @CONTACT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T WHNO, WH_NAME, WH_ADDR1, WH_ADDR2, WH_ADDR3, WH_ADDR4, WH_PHONE, WH_FAX, CONTA"& _ 
                "CT FROM MST_WAREHOUSE WHERE (WHNO = @WHNO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WHNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WHNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTACT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_WAREHOUSE] SET [WHNO] = @WHNO, [WH_NAME] = @WH_NAME, [WH_ADDR1]"& _ 
                " = @WH_ADDR1, [WH_ADDR2] = @WH_ADDR2, [WH_ADDR3] = @WH_ADDR3, [WH_ADDR4] = @WH_A"& _ 
                "DDR4, [WH_PHONE] = @WH_PHONE, [WH_FAX] = @WH_FAX, [CONTACT] = @CONTACT WHERE ((["& _ 
                "WHNO] = @Original_WHNO) AND ((@IsNull_WH_NAME = 1 AND [WH_NAME] IS NULL) OR ([WH"& _ 
                "_NAME] = @Original_WH_NAME)) AND ((@IsNull_WH_ADDR1 = 1 AND [WH_ADDR1] IS NULL) "& _ 
                "OR ([WH_ADDR1] = @Original_WH_ADDR1)) AND ((@IsNull_WH_ADDR2 = 1 AND [WH_ADDR2] "& _ 
                "IS NULL) OR ([WH_ADDR2] = @Original_WH_ADDR2)) AND ((@IsNull_WH_ADDR3 = 1 AND [W"& _ 
                "H_ADDR3] IS NULL) OR ([WH_ADDR3] = @Original_WH_ADDR3)) AND ((@IsNull_WH_ADDR4 ="& _ 
                " 1 AND [WH_ADDR4] IS NULL) OR ([WH_ADDR4] = @Original_WH_ADDR4)) AND ((@IsNull_W"& _ 
                "H_PHONE = 1 AND [WH_PHONE] IS NULL) OR ([WH_PHONE] = @Original_WH_PHONE)) AND (("& _ 
                "@IsNull_WH_FAX = 1 AND [WH_FAX] IS NULL) OR ([WH_FAX] = @Original_WH_FAX)) AND ("& _ 
                "(@IsNull_CONTACT = 1 AND [CONTACT] IS NULL) OR ([CONTACT] = @Original_CONTACT)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT WHNO, WH_NAME, WH_ADDR1, WH_ADDR2, WH_ADDR3, WH_ADDR4, WH_PHONE, WH_FA"& _ 
                "X, CONTACT FROM MST_WAREHOUSE WHERE (WHNO = @WHNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WHNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WHNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WH_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTACT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WHNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WHNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WH_FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WH_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WH_FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONTACT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONTACT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT WHNO, WH_NAME, WH_ADDR1, WH_ADDR2, WH_ADDR3, WH_ADDR4, WH_PHONE, WH_FAX, C"& _ 
                "ONTACT FROM dbo.MST_WAREHOUSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccReporting.MST_WAREHOUSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccReporting.MST_WAREHOUSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccReporting.MST_WAREHOUSEDataTable = New CSAccReporting.MST_WAREHOUSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccReporting.MST_WAREHOUSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccReporting) As Integer
            Return Me.Adapter.Update(dataSet, "MST_WAREHOUSE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_WHNO As Integer, ByVal Original_WH_NAME As String, ByVal Original_WH_ADDR1 As String, ByVal Original_WH_ADDR2 As String, ByVal Original_WH_ADDR3 As String, ByVal Original_WH_ADDR4 As String, ByVal Original_WH_PHONE As String, ByVal Original_WH_FAX As String, ByVal Original_CONTACT As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_WHNO,Integer)
            If (Original_WH_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_WH_NAME,String)
            End If
            If (Original_WH_ADDR1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_WH_ADDR1,String)
            End If
            If (Original_WH_ADDR2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_WH_ADDR2,String)
            End If
            If (Original_WH_ADDR3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_WH_ADDR3,String)
            End If
            If (Original_WH_ADDR4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_WH_ADDR4,String)
            End If
            If (Original_WH_PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_WH_PHONE,String)
            End If
            If (Original_WH_FAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_WH_FAX,String)
            End If
            If (Original_CONTACT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CONTACT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WHNO As Integer, ByVal WH_NAME As String, ByVal WH_ADDR1 As String, ByVal WH_ADDR2 As String, ByVal WH_ADDR3 As String, ByVal WH_ADDR4 As String, ByVal WH_PHONE As String, ByVal WH_FAX As String, ByVal CONTACT As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(WHNO,Integer)
            If (WH_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(WH_NAME,String)
            End If
            If (WH_ADDR1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(WH_ADDR1,String)
            End If
            If (WH_ADDR2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(WH_ADDR2,String)
            End If
            If (WH_ADDR3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(WH_ADDR3,String)
            End If
            If (WH_ADDR4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(WH_ADDR4,String)
            End If
            If (WH_PHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(WH_PHONE,String)
            End If
            If (WH_FAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(WH_FAX,String)
            End If
            If (CONTACT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CONTACT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WHNO As Integer,  _
                    ByVal WH_NAME As String,  _
                    ByVal WH_ADDR1 As String,  _
                    ByVal WH_ADDR2 As String,  _
                    ByVal WH_ADDR3 As String,  _
                    ByVal WH_ADDR4 As String,  _
                    ByVal WH_PHONE As String,  _
                    ByVal WH_FAX As String,  _
                    ByVal CONTACT As String,  _
                    ByVal Original_WHNO As Integer,  _
                    ByVal Original_WH_NAME As String,  _
                    ByVal Original_WH_ADDR1 As String,  _
                    ByVal Original_WH_ADDR2 As String,  _
                    ByVal Original_WH_ADDR3 As String,  _
                    ByVal Original_WH_ADDR4 As String,  _
                    ByVal Original_WH_PHONE As String,  _
                    ByVal Original_WH_FAX As String,  _
                    ByVal Original_CONTACT As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WHNO,Integer)
            If (WH_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WH_NAME,String)
            End If
            If (WH_ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(WH_ADDR1,String)
            End If
            If (WH_ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(WH_ADDR2,String)
            End If
            If (WH_ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(WH_ADDR3,String)
            End If
            If (WH_ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(WH_ADDR4,String)
            End If
            If (WH_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(WH_PHONE,String)
            End If
            If (WH_FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(WH_FAX,String)
            End If
            If (CONTACT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CONTACT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_WHNO,Integer)
            If (Original_WH_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_WH_NAME,String)
            End If
            If (Original_WH_ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_WH_ADDR1,String)
            End If
            If (Original_WH_ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_WH_ADDR2,String)
            End If
            If (Original_WH_ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_WH_ADDR3,String)
            End If
            If (Original_WH_ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_WH_ADDR4,String)
            End If
            If (Original_WH_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_WH_PHONE,String)
            End If
            If (Original_WH_FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_WH_FAX,String)
            End If
            If (Original_CONTACT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_CONTACT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WH_NAME As String,  _
                    ByVal WH_ADDR1 As String,  _
                    ByVal WH_ADDR2 As String,  _
                    ByVal WH_ADDR3 As String,  _
                    ByVal WH_ADDR4 As String,  _
                    ByVal WH_PHONE As String,  _
                    ByVal WH_FAX As String,  _
                    ByVal CONTACT As String,  _
                    ByVal Original_WHNO As Integer,  _
                    ByVal Original_WH_NAME As String,  _
                    ByVal Original_WH_ADDR1 As String,  _
                    ByVal Original_WH_ADDR2 As String,  _
                    ByVal Original_WH_ADDR3 As String,  _
                    ByVal Original_WH_ADDR4 As String,  _
                    ByVal Original_WH_PHONE As String,  _
                    ByVal Original_WH_FAX As String,  _
                    ByVal Original_CONTACT As String) As Integer
            Return Me.Update(Original_WHNO, WH_NAME, WH_ADDR1, WH_ADDR2, WH_ADDR3, WH_ADDR4, WH_PHONE, WH_FAX, CONTACT, Original_WHNO, Original_WH_NAME, Original_WH_ADDR1, Original_WH_ADDR2, Original_WH_ADDR3, Original_WH_ADDR4, Original_WH_PHONE, Original_WH_FAX, Original_CONTACT)
        End Function
    End Class
End Namespace
