'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1434
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CSAccRptDataset"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CSAccRptDataset
    Inherits Global.System.Data.DataSet
    
    Private tableMST_ACCOUNT As MST_ACCOUNTDataTable
    
    Private tableMST_ACCREPORT As MST_ACCREPORTDataTable
    
    Private tableMST_ACCREPORTD As MST_ACCREPORTDDataTable
    
    Private tableMST_ACCREPORTDD As MST_ACCREPORTDDDataTable
    
    Private tableMST_ACCTOTAL As MST_ACCTOTALDataTable
    
    Private tableSYS_RPTTYPE As SYS_RPTTYPEDataTable
    
    Private tableMST_TEMPLATE As MST_TEMPLATEDataTable
    
    Private relationFK_MST_ACCREPORTD_MST_ACCREPORT As Global.System.Data.DataRelation
    
    Private relationFK_MST_ACCREPORTDD_FRACC As Global.System.Data.DataRelation
    
    Private relationFK_MST_ACCREPORTDD_MST_ACCREPORTD As Global.System.Data.DataRelation
    
    Private relationFK_MST_ACCREPORTDD_TOACC As Global.System.Data.DataRelation
    
    Private relationFK_MST_ACCREPORTD_SYS_RPTTYPE As Global.System.Data.DataRelation
    
    Private relationFK_MST_ACCREPORT_MST_TEMPLATE As Global.System.Data.DataRelation
    
    Private relationFK_MST_ACCTOTAL_MST_ACCREPORTD As Global.System.Data.DataRelation
    
    Private relationFK_MST_ACCTOTAL_ADDTOTALNO As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MST_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCOUNTDataTable(ds.Tables("MST_ACCOUNT")))
            End If
            If (Not (ds.Tables("MST_ACCREPORT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCREPORTDataTable(ds.Tables("MST_ACCREPORT")))
            End If
            If (Not (ds.Tables("MST_ACCREPORTD")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCREPORTDDataTable(ds.Tables("MST_ACCREPORTD")))
            End If
            If (Not (ds.Tables("MST_ACCREPORTDD")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCREPORTDDDataTable(ds.Tables("MST_ACCREPORTDD")))
            End If
            If (Not (ds.Tables("MST_ACCTOTAL")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCTOTALDataTable(ds.Tables("MST_ACCTOTAL")))
            End If
            If (Not (ds.Tables("SYS_RPTTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_RPTTYPEDataTable(ds.Tables("SYS_RPTTYPE")))
            End If
            If (Not (ds.Tables("MST_TEMPLATE")) Is Nothing) Then
                MyBase.Tables.Add(New MST_TEMPLATEDataTable(ds.Tables("MST_TEMPLATE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_ACCOUNT() As MST_ACCOUNTDataTable
        Get
            Return Me.tableMST_ACCOUNT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_ACCREPORT() As MST_ACCREPORTDataTable
        Get
            Return Me.tableMST_ACCREPORT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_ACCREPORTD() As MST_ACCREPORTDDataTable
        Get
            Return Me.tableMST_ACCREPORTD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_ACCREPORTDD() As MST_ACCREPORTDDDataTable
        Get
            Return Me.tableMST_ACCREPORTDD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_ACCTOTAL() As MST_ACCTOTALDataTable
        Get
            Return Me.tableMST_ACCTOTAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYS_RPTTYPE() As SYS_RPTTYPEDataTable
        Get
            Return Me.tableSYS_RPTTYPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_TEMPLATE() As MST_TEMPLATEDataTable
        Get
            Return Me.tableMST_TEMPLATE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CSAccRptDataset = CType(MyBase.Clone,CSAccRptDataset)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MST_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCOUNTDataTable(ds.Tables("MST_ACCOUNT")))
            End If
            If (Not (ds.Tables("MST_ACCREPORT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCREPORTDataTable(ds.Tables("MST_ACCREPORT")))
            End If
            If (Not (ds.Tables("MST_ACCREPORTD")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCREPORTDDataTable(ds.Tables("MST_ACCREPORTD")))
            End If
            If (Not (ds.Tables("MST_ACCREPORTDD")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCREPORTDDDataTable(ds.Tables("MST_ACCREPORTDD")))
            End If
            If (Not (ds.Tables("MST_ACCTOTAL")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCTOTALDataTable(ds.Tables("MST_ACCTOTAL")))
            End If
            If (Not (ds.Tables("SYS_RPTTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_RPTTYPEDataTable(ds.Tables("SYS_RPTTYPE")))
            End If
            If (Not (ds.Tables("MST_TEMPLATE")) Is Nothing) Then
                MyBase.Tables.Add(New MST_TEMPLATEDataTable(ds.Tables("MST_TEMPLATE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMST_ACCOUNT = CType(MyBase.Tables("MST_ACCOUNT"),MST_ACCOUNTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_ACCOUNT) Is Nothing) Then
                Me.tableMST_ACCOUNT.InitVars
            End If
        End If
        Me.tableMST_ACCREPORT = CType(MyBase.Tables("MST_ACCREPORT"),MST_ACCREPORTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_ACCREPORT) Is Nothing) Then
                Me.tableMST_ACCREPORT.InitVars
            End If
        End If
        Me.tableMST_ACCREPORTD = CType(MyBase.Tables("MST_ACCREPORTD"),MST_ACCREPORTDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_ACCREPORTD) Is Nothing) Then
                Me.tableMST_ACCREPORTD.InitVars
            End If
        End If
        Me.tableMST_ACCREPORTDD = CType(MyBase.Tables("MST_ACCREPORTDD"),MST_ACCREPORTDDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_ACCREPORTDD) Is Nothing) Then
                Me.tableMST_ACCREPORTDD.InitVars
            End If
        End If
        Me.tableMST_ACCTOTAL = CType(MyBase.Tables("MST_ACCTOTAL"),MST_ACCTOTALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_ACCTOTAL) Is Nothing) Then
                Me.tableMST_ACCTOTAL.InitVars
            End If
        End If
        Me.tableSYS_RPTTYPE = CType(MyBase.Tables("SYS_RPTTYPE"),SYS_RPTTYPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYS_RPTTYPE) Is Nothing) Then
                Me.tableSYS_RPTTYPE.InitVars
            End If
        End If
        Me.tableMST_TEMPLATE = CType(MyBase.Tables("MST_TEMPLATE"),MST_TEMPLATEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_TEMPLATE) Is Nothing) Then
                Me.tableMST_TEMPLATE.InitVars
            End If
        End If
        Me.relationFK_MST_ACCREPORTD_MST_ACCREPORT = Me.Relations("FK_MST_ACCREPORTD_MST_ACCREPORT")
        Me.relationFK_MST_ACCREPORTDD_FRACC = Me.Relations("FK_MST_ACCREPORTDD_FRACC")
        Me.relationFK_MST_ACCREPORTDD_MST_ACCREPORTD = Me.Relations("FK_MST_ACCREPORTDD_MST_ACCREPORTD")
        Me.relationFK_MST_ACCREPORTDD_TOACC = Me.Relations("FK_MST_ACCREPORTDD_TOACC")
        Me.relationFK_MST_ACCREPORTD_SYS_RPTTYPE = Me.Relations("FK_MST_ACCREPORTD_SYS_RPTTYPE")
        Me.relationFK_MST_ACCREPORT_MST_TEMPLATE = Me.Relations("FK_MST_ACCREPORT_MST_TEMPLATE")
        Me.relationFK_MST_ACCTOTAL_MST_ACCREPORTD = Me.Relations("FK_MST_ACCTOTAL_MST_ACCREPORTD")
        Me.relationFK_MST_ACCTOTAL_ADDTOTALNO = Me.Relations("FK_MST_ACCTOTAL_ADDTOTALNO")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CSAccRptDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CSAccRptDataset.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMST_ACCOUNT = New MST_ACCOUNTDataTable
        MyBase.Tables.Add(Me.tableMST_ACCOUNT)
        Me.tableMST_ACCREPORT = New MST_ACCREPORTDataTable(false)
        MyBase.Tables.Add(Me.tableMST_ACCREPORT)
        Me.tableMST_ACCREPORTD = New MST_ACCREPORTDDataTable
        MyBase.Tables.Add(Me.tableMST_ACCREPORTD)
        Me.tableMST_ACCREPORTDD = New MST_ACCREPORTDDDataTable
        MyBase.Tables.Add(Me.tableMST_ACCREPORTDD)
        Me.tableMST_ACCTOTAL = New MST_ACCTOTALDataTable
        MyBase.Tables.Add(Me.tableMST_ACCTOTAL)
        Me.tableSYS_RPTTYPE = New SYS_RPTTYPEDataTable
        MyBase.Tables.Add(Me.tableSYS_RPTTYPE)
        Me.tableMST_TEMPLATE = New MST_TEMPLATEDataTable
        MyBase.Tables.Add(Me.tableMST_TEMPLATE)
        Me.relationFK_MST_ACCREPORTD_MST_ACCREPORT = New Global.System.Data.DataRelation("FK_MST_ACCREPORTD_MST_ACCREPORT", New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORT.ACCRPTNOColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTD.ACCRPTNOColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCREPORTD_MST_ACCREPORT)
        Me.relationFK_MST_ACCREPORTDD_FRACC = New Global.System.Data.DataRelation("FK_MST_ACCREPORTDD_FRACC", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTDD.FRACCColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCREPORTDD_FRACC)
        Me.relationFK_MST_ACCREPORTDD_MST_ACCREPORTD = New Global.System.Data.DataRelation("FK_MST_ACCREPORTDD_MST_ACCREPORTD", New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTD.ACCRPTDNOColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTDD.ACCRPTDNOColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCREPORTDD_MST_ACCREPORTD)
        Me.relationFK_MST_ACCREPORTDD_TOACC = New Global.System.Data.DataRelation("FK_MST_ACCREPORTDD_TOACC", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTDD.TOACCColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCREPORTDD_TOACC)
        Me.relationFK_MST_ACCREPORTD_SYS_RPTTYPE = New Global.System.Data.DataRelation("FK_MST_ACCREPORTD_SYS_RPTTYPE", New Global.System.Data.DataColumn() {Me.tableSYS_RPTTYPE.RPTTYPE_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTD.RPTTYPE_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCREPORTD_SYS_RPTTYPE)
        Me.relationFK_MST_ACCREPORT_MST_TEMPLATE = New Global.System.Data.DataRelation("FK_MST_ACCREPORT_MST_TEMPLATE", New Global.System.Data.DataColumn() {Me.tableMST_TEMPLATE.TEMPLATE_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORT.TEMPLATE_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCREPORT_MST_TEMPLATE)
        Me.relationFK_MST_ACCTOTAL_MST_ACCREPORTD = New Global.System.Data.DataRelation("FK_MST_ACCTOTAL_MST_ACCREPORTD", New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTD.ACCRPTDNOColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCTOTAL.ACCRPTDNOColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCTOTAL_MST_ACCREPORTD)
        Me.relationFK_MST_ACCTOTAL_ADDTOTALNO = New Global.System.Data.DataRelation("FK_MST_ACCTOTAL_ADDTOTALNO", New Global.System.Data.DataColumn() {Me.tableMST_ACCREPORTD.ACCRPTDNOColumn}, New Global.System.Data.DataColumn() {Me.tableMST_ACCTOTAL.ADDTOTALNOColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_ACCTOTAL_ADDTOTALNO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_ACCOUNT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_ACCREPORT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_ACCREPORTD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_ACCREPORTDD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_ACCTOTAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYS_RPTTYPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_TEMPLATE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CSAccRptDataset = New CSAccRptDataset
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.MST_ACCREPORT.TEMPLATE_NAMEColumn.Expression = "PARENT(FK_MST_ACCREPORT_MST_TEMPLATE).TEMPLATE_NAME"
    End Sub
    
    Public Delegate Sub MST_ACCOUNTRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_ACCOUNTRowChangeEvent)
    
    Public Delegate Sub MST_ACCREPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_ACCREPORTRowChangeEvent)
    
    Public Delegate Sub MST_ACCREPORTDRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_ACCREPORTDRowChangeEvent)
    
    Public Delegate Sub MST_ACCREPORTDDRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_ACCREPORTDDRowChangeEvent)
    
    Public Delegate Sub MST_ACCTOTALRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_ACCTOTALRowChangeEvent)
    
    Public Delegate Sub SYS_RPTTYPERowChangeEventHandler(ByVal sender As Object, ByVal e As SYS_RPTTYPERowChangeEvent)
    
    Public Delegate Sub MST_TEMPLATERowChangeEventHandler(ByVal sender As Object, ByVal e As MST_TEMPLATERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_ACCOUNTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_NAME As Global.System.Data.DataColumn
        
        Private columnACC_TYPE As Global.System.Data.DataColumn
        
        Private columnRETAINED_EARNINGS As Global.System.Data.DataColumn
        
        Private columnIS_ACTIVE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_ACCOUNT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RETAINED_EARNINGSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRETAINED_EARNINGS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_ACTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_ACTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_ACCOUNTRow
            Get
                Return CType(Me.Rows(index),MST_ACCOUNTRow)
            End Get
        End Property
        
        Public Event MST_ACCOUNTRowChanging As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowChanged As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowDeleting As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowDeleted As MST_ACCOUNTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_ACCOUNTRow(ByVal row As MST_ACCOUNTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCOUNTRow(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Byte, ByVal RETAINED_EARNINGS As Boolean, ByVal IS_ACTIVE As Boolean) As MST_ACCOUNTRow
            Dim rowMST_ACCOUNTRow As MST_ACCOUNTRow = CType(Me.NewRow,MST_ACCOUNTRow)
            Dim columnValuesArray() As Object = New Object() {ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE}
            rowMST_ACCOUNTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCOUNTRow)
            Return rowMST_ACCOUNTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACC_CODE(ByVal ACC_CODE As String) As MST_ACCOUNTRow
            Return CType(Me.Rows.Find(New Object() {ACC_CODE}),MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_ACCOUNTDataTable = CType(MyBase.Clone,MST_ACCOUNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_ACCOUNTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_NAME = MyBase.Columns("ACC_NAME")
            Me.columnACC_TYPE = MyBase.Columns("ACC_TYPE")
            Me.columnRETAINED_EARNINGS = MyBase.Columns("RETAINED_EARNINGS")
            Me.columnIS_ACTIVE = MyBase.Columns("IS_ACTIVE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_NAME = New Global.System.Data.DataColumn("ACC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_NAME)
            Me.columnACC_TYPE = New Global.System.Data.DataColumn("ACC_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_TYPE)
            Me.columnRETAINED_EARNINGS = New Global.System.Data.DataColumn("RETAINED_EARNINGS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRETAINED_EARNINGS)
            Me.columnIS_ACTIVE = New Global.System.Data.DataColumn("IS_ACTIVE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_ACTIVE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACC_CODE}, true))
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.Unique = true
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_NAME.MaxLength = 75
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_ACCOUNTRow() As MST_ACCOUNTRow
            Return CType(Me.NewRow,MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_ACCOUNTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_ACCOUNTRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowChanged(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_ACCOUNTRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowChanging(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_ACCOUNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowDeleted(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_ACCOUNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowDeleting(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_ACCOUNTRow(ByVal row As MST_ACCOUNTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccRptDataset = New CSAccRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_ACCOUNTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_ACCREPORTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCRPTNO As Global.System.Data.DataColumn
        
        Private columnACCRPT_NAME As Global.System.Data.DataColumn
        
        Private columnTEMPLATE_CODE As Global.System.Data.DataColumn
        
        Private columnTEMPLATE_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "MST_ACCREPORT"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCRPTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCRPTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCRPT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCRPT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEMPLATE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEMPLATE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEMPLATE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEMPLATE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_ACCREPORTRow
            Get
                Return CType(Me.Rows(index),MST_ACCREPORTRow)
            End Get
        End Property
        
        Public Event MST_ACCREPORTRowChanging As MST_ACCREPORTRowChangeEventHandler
        
        Public Event MST_ACCREPORTRowChanged As MST_ACCREPORTRowChangeEventHandler
        
        Public Event MST_ACCREPORTRowDeleting As MST_ACCREPORTRowChangeEventHandler
        
        Public Event MST_ACCREPORTRowDeleted As MST_ACCREPORTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_ACCREPORTRow(ByVal row As MST_ACCREPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCREPORTRow(ByVal ACCRPTNO As Integer, ByVal ACCRPT_NAME As String, ByVal parentMST_TEMPLATERowByFK_MST_ACCREPORT_MST_TEMPLATE As MST_TEMPLATERow, ByVal TEMPLATE_NAME As String) As MST_ACCREPORTRow
            Dim rowMST_ACCREPORTRow As MST_ACCREPORTRow = CType(Me.NewRow,MST_ACCREPORTRow)
            Dim columnValuesArray() As Object = New Object() {ACCRPTNO, ACCRPT_NAME, Nothing, TEMPLATE_NAME}
            If (Not (parentMST_TEMPLATERowByFK_MST_ACCREPORT_MST_TEMPLATE) Is Nothing) Then
                columnValuesArray(2) = parentMST_TEMPLATERowByFK_MST_ACCREPORT_MST_TEMPLATE(0)
            End If
            rowMST_ACCREPORTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCREPORTRow)
            Return rowMST_ACCREPORTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCREPORTRow(ByVal ACCRPTNO As Integer, ByVal ACCRPT_NAME As String, ByVal parentMST_TEMPLATERowByFK_MST_ACCREPORT_MST_TEMPLATE As MST_TEMPLATERow) As MST_ACCREPORTRow
            Dim rowMST_ACCREPORTRow As MST_ACCREPORTRow = CType(Me.NewRow,MST_ACCREPORTRow)
            Dim columnValuesArray() As Object = New Object() {ACCRPTNO, ACCRPT_NAME, Nothing, Nothing}
            If (Not (parentMST_TEMPLATERowByFK_MST_ACCREPORT_MST_TEMPLATE) Is Nothing) Then
                columnValuesArray(2) = parentMST_TEMPLATERowByFK_MST_ACCREPORT_MST_TEMPLATE(0)
            End If
            rowMST_ACCREPORTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCREPORTRow)
            Return rowMST_ACCREPORTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACCRPTNO(ByVal ACCRPTNO As Integer) As MST_ACCREPORTRow
            Return CType(Me.Rows.Find(New Object() {ACCRPTNO}),MST_ACCREPORTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_ACCREPORTDataTable = CType(MyBase.Clone,MST_ACCREPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_ACCREPORTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCRPTNO = MyBase.Columns("ACCRPTNO")
            Me.columnACCRPT_NAME = MyBase.Columns("ACCRPT_NAME")
            Me.columnTEMPLATE_CODE = MyBase.Columns("TEMPLATE_CODE")
            Me.columnTEMPLATE_NAME = MyBase.Columns("TEMPLATE_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCRPTNO = New Global.System.Data.DataColumn("ACCRPTNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCRPTNO)
            Me.columnACCRPT_NAME = New Global.System.Data.DataColumn("ACCRPT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCRPT_NAME)
            Me.columnTEMPLATE_CODE = New Global.System.Data.DataColumn("TEMPLATE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEMPLATE_CODE)
            Me.columnTEMPLATE_NAME = New Global.System.Data.DataColumn("TEMPLATE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEMPLATE_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCRPTNO}, true))
            Me.columnACCRPTNO.AllowDBNull = false
            Me.columnACCRPTNO.Unique = true
            Me.columnACCRPT_NAME.AllowDBNull = false
            Me.columnACCRPT_NAME.MaxLength = 50
            Me.columnTEMPLATE_CODE.AllowDBNull = false
            Me.columnTEMPLATE_CODE.MaxLength = 10
            Me.columnTEMPLATE_NAME.ReadOnly = true
            Me.columnTEMPLATE_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_ACCREPORTRow() As MST_ACCREPORTRow
            Return CType(Me.NewRow,MST_ACCREPORTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_ACCREPORTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_ACCREPORTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.TEMPLATE_NAMEColumn.Expression = "PARENT(FK_MST_ACCREPORT_MST_TEMPLATE).TEMPLATE_NAME"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_ACCREPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTRowChanged(Me, New MST_ACCREPORTRowChangeEvent(CType(e.Row,MST_ACCREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_ACCREPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTRowChanging(Me, New MST_ACCREPORTRowChangeEvent(CType(e.Row,MST_ACCREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_ACCREPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTRowDeleted(Me, New MST_ACCREPORTRowChangeEvent(CType(e.Row,MST_ACCREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_ACCREPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTRowDeleting(Me, New MST_ACCREPORTRowChangeEvent(CType(e.Row,MST_ACCREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_ACCREPORTRow(ByVal row As MST_ACCREPORTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccRptDataset = New CSAccRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_ACCREPORTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_ACCREPORTDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCRPTDNO As Global.System.Data.DataColumn
        
        Private columnACCRPTNO As Global.System.Data.DataColumn
        
        Private columnPRINTDESC As Global.System.Data.DataColumn
        
        Private columnRPTTYPE_CODE As Global.System.Data.DataColumn
        
        Private columnSORTORDER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_ACCREPORTD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCRPTDNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCRPTDNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCRPTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCRPTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRINTDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINTDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPTTYPE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPTTYPE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SORTORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSORTORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_ACCREPORTDRow
            Get
                Return CType(Me.Rows(index),MST_ACCREPORTDRow)
            End Get
        End Property
        
        Public Event MST_ACCREPORTDRowChanging As MST_ACCREPORTDRowChangeEventHandler
        
        Public Event MST_ACCREPORTDRowChanged As MST_ACCREPORTDRowChangeEventHandler
        
        Public Event MST_ACCREPORTDRowDeleting As MST_ACCREPORTDRowChangeEventHandler
        
        Public Event MST_ACCREPORTDRowDeleted As MST_ACCREPORTDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_ACCREPORTDRow(ByVal row As MST_ACCREPORTDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCREPORTDRow(ByVal ACCRPTDNO As Integer, ByVal parentMST_ACCREPORTRowByFK_MST_ACCREPORTD_MST_ACCREPORT As MST_ACCREPORTRow, ByVal PRINTDESC As String, ByVal parentSYS_RPTTYPERowByFK_MST_ACCREPORTD_SYS_RPTTYPE As SYS_RPTTYPERow, ByVal SORTORDER As Integer) As MST_ACCREPORTDRow
            Dim rowMST_ACCREPORTDRow As MST_ACCREPORTDRow = CType(Me.NewRow,MST_ACCREPORTDRow)
            Dim columnValuesArray() As Object = New Object() {ACCRPTDNO, Nothing, PRINTDESC, Nothing, SORTORDER}
            If (Not (parentMST_ACCREPORTRowByFK_MST_ACCREPORTD_MST_ACCREPORT) Is Nothing) Then
                columnValuesArray(1) = parentMST_ACCREPORTRowByFK_MST_ACCREPORTD_MST_ACCREPORT(0)
            End If
            If (Not (parentSYS_RPTTYPERowByFK_MST_ACCREPORTD_SYS_RPTTYPE) Is Nothing) Then
                columnValuesArray(3) = parentSYS_RPTTYPERowByFK_MST_ACCREPORTD_SYS_RPTTYPE(0)
            End If
            rowMST_ACCREPORTDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCREPORTDRow)
            Return rowMST_ACCREPORTDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACCRPTDNO(ByVal ACCRPTDNO As Integer) As MST_ACCREPORTDRow
            Return CType(Me.Rows.Find(New Object() {ACCRPTDNO}),MST_ACCREPORTDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_ACCREPORTDDataTable = CType(MyBase.Clone,MST_ACCREPORTDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_ACCREPORTDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCRPTDNO = MyBase.Columns("ACCRPTDNO")
            Me.columnACCRPTNO = MyBase.Columns("ACCRPTNO")
            Me.columnPRINTDESC = MyBase.Columns("PRINTDESC")
            Me.columnRPTTYPE_CODE = MyBase.Columns("RPTTYPE_CODE")
            Me.columnSORTORDER = MyBase.Columns("SORTORDER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCRPTDNO = New Global.System.Data.DataColumn("ACCRPTDNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCRPTDNO)
            Me.columnACCRPTNO = New Global.System.Data.DataColumn("ACCRPTNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCRPTNO)
            Me.columnPRINTDESC = New Global.System.Data.DataColumn("PRINTDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINTDESC)
            Me.columnRPTTYPE_CODE = New Global.System.Data.DataColumn("RPTTYPE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPTTYPE_CODE)
            Me.columnSORTORDER = New Global.System.Data.DataColumn("SORTORDER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSORTORDER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCRPTDNO}, true))
            Me.columnACCRPTDNO.AllowDBNull = false
            Me.columnACCRPTDNO.Unique = true
            Me.columnACCRPTNO.AllowDBNull = false
            Me.columnPRINTDESC.AllowDBNull = false
            Me.columnPRINTDESC.MaxLength = 50
            Me.columnRPTTYPE_CODE.AllowDBNull = false
            Me.columnRPTTYPE_CODE.MaxLength = 10
            Me.columnSORTORDER.DefaultValue = CType(99999,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_ACCREPORTDRow() As MST_ACCREPORTDRow
            Return CType(Me.NewRow,MST_ACCREPORTDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_ACCREPORTDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_ACCREPORTDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_ACCREPORTDRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDRowChanged(Me, New MST_ACCREPORTDRowChangeEvent(CType(e.Row,MST_ACCREPORTDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_ACCREPORTDRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDRowChanging(Me, New MST_ACCREPORTDRowChangeEvent(CType(e.Row,MST_ACCREPORTDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_ACCREPORTDRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDRowDeleted(Me, New MST_ACCREPORTDRowChangeEvent(CType(e.Row,MST_ACCREPORTDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_ACCREPORTDRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDRowDeleting(Me, New MST_ACCREPORTDRowChangeEvent(CType(e.Row,MST_ACCREPORTDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_ACCREPORTDRow(ByVal row As MST_ACCREPORTDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccRptDataset = New CSAccRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_ACCREPORTDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_ACCREPORTDDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCRPTDDNO As Global.System.Data.DataColumn
        
        Private columnACCRPTDNO As Global.System.Data.DataColumn
        
        Private columnFRACC As Global.System.Data.DataColumn
        
        Private columnTOACC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_ACCREPORTDD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCRPTDDNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCRPTDDNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCRPTDNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCRPTDNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_ACCREPORTDDRow
            Get
                Return CType(Me.Rows(index),MST_ACCREPORTDDRow)
            End Get
        End Property
        
        Public Event MST_ACCREPORTDDRowChanging As MST_ACCREPORTDDRowChangeEventHandler
        
        Public Event MST_ACCREPORTDDRowChanged As MST_ACCREPORTDDRowChangeEventHandler
        
        Public Event MST_ACCREPORTDDRowDeleting As MST_ACCREPORTDDRowChangeEventHandler
        
        Public Event MST_ACCREPORTDDRowDeleted As MST_ACCREPORTDDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_ACCREPORTDDRow(ByVal row As MST_ACCREPORTDDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCREPORTDDRow(ByVal ACCRPTDDNO As Integer, ByVal parentMST_ACCREPORTDRowByFK_MST_ACCREPORTDD_MST_ACCREPORTD As MST_ACCREPORTDRow, ByVal parentMST_ACCOUNTRowByFK_MST_ACCREPORTDD_FRACC As MST_ACCOUNTRow, ByVal parentMST_ACCOUNTRowByFK_MST_ACCREPORTDD_TOACC As MST_ACCOUNTRow) As MST_ACCREPORTDDRow
            Dim rowMST_ACCREPORTDDRow As MST_ACCREPORTDDRow = CType(Me.NewRow,MST_ACCREPORTDDRow)
            Dim columnValuesArray() As Object = New Object() {ACCRPTDDNO, Nothing, Nothing, Nothing}
            If (Not (parentMST_ACCREPORTDRowByFK_MST_ACCREPORTDD_MST_ACCREPORTD) Is Nothing) Then
                columnValuesArray(1) = parentMST_ACCREPORTDRowByFK_MST_ACCREPORTDD_MST_ACCREPORTD(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_MST_ACCREPORTDD_FRACC) Is Nothing) Then
                columnValuesArray(2) = parentMST_ACCOUNTRowByFK_MST_ACCREPORTDD_FRACC(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_MST_ACCREPORTDD_TOACC) Is Nothing) Then
                columnValuesArray(3) = parentMST_ACCOUNTRowByFK_MST_ACCREPORTDD_TOACC(0)
            End If
            rowMST_ACCREPORTDDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCREPORTDDRow)
            Return rowMST_ACCREPORTDDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACCRPTDDNOACCRPTDNO(ByVal ACCRPTDDNO As Integer, ByVal ACCRPTDNO As Integer) As MST_ACCREPORTDDRow
            Return CType(Me.Rows.Find(New Object() {ACCRPTDDNO, ACCRPTDNO}),MST_ACCREPORTDDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_ACCREPORTDDDataTable = CType(MyBase.Clone,MST_ACCREPORTDDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_ACCREPORTDDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCRPTDDNO = MyBase.Columns("ACCRPTDDNO")
            Me.columnACCRPTDNO = MyBase.Columns("ACCRPTDNO")
            Me.columnFRACC = MyBase.Columns("FRACC")
            Me.columnTOACC = MyBase.Columns("TOACC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCRPTDDNO = New Global.System.Data.DataColumn("ACCRPTDDNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCRPTDDNO)
            Me.columnACCRPTDNO = New Global.System.Data.DataColumn("ACCRPTDNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCRPTDNO)
            Me.columnFRACC = New Global.System.Data.DataColumn("FRACC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRACC)
            Me.columnTOACC = New Global.System.Data.DataColumn("TOACC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOACC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCRPTDDNO, Me.columnACCRPTDNO}, true))
            Me.columnACCRPTDDNO.AllowDBNull = false
            Me.columnACCRPTDNO.AllowDBNull = false
            Me.columnFRACC.AllowDBNull = false
            Me.columnFRACC.MaxLength = 10
            Me.columnTOACC.AllowDBNull = false
            Me.columnTOACC.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_ACCREPORTDDRow() As MST_ACCREPORTDDRow
            Return CType(Me.NewRow,MST_ACCREPORTDDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_ACCREPORTDDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_ACCREPORTDDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_ACCREPORTDDRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDDRowChanged(Me, New MST_ACCREPORTDDRowChangeEvent(CType(e.Row,MST_ACCREPORTDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_ACCREPORTDDRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDDRowChanging(Me, New MST_ACCREPORTDDRowChangeEvent(CType(e.Row,MST_ACCREPORTDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_ACCREPORTDDRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDDRowDeleted(Me, New MST_ACCREPORTDDRowChangeEvent(CType(e.Row,MST_ACCREPORTDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_ACCREPORTDDRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_ACCREPORTDDRowDeleting(Me, New MST_ACCREPORTDDRowChangeEvent(CType(e.Row,MST_ACCREPORTDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_ACCREPORTDDRow(ByVal row As MST_ACCREPORTDDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccRptDataset = New CSAccRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_ACCREPORTDDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_ACCTOTALDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCTOTALNO As Global.System.Data.DataColumn
        
        Private columnACCRPTDNO As Global.System.Data.DataColumn
        
        Private columnADDTOTALNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_ACCTOTAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTOTALNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTOTALNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCRPTDNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCRPTDNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDTOTALNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDTOTALNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_ACCTOTALRow
            Get
                Return CType(Me.Rows(index),MST_ACCTOTALRow)
            End Get
        End Property
        
        Public Event MST_ACCTOTALRowChanging As MST_ACCTOTALRowChangeEventHandler
        
        Public Event MST_ACCTOTALRowChanged As MST_ACCTOTALRowChangeEventHandler
        
        Public Event MST_ACCTOTALRowDeleting As MST_ACCTOTALRowChangeEventHandler
        
        Public Event MST_ACCTOTALRowDeleted As MST_ACCTOTALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_ACCTOTALRow(ByVal row As MST_ACCTOTALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCTOTALRow(ByVal ACCTOTALNO As Integer, ByVal parentMST_ACCREPORTDRowByFK_MST_ACCTOTAL_MST_ACCREPORTD As MST_ACCREPORTDRow, ByVal parentMST_ACCREPORTDRowByFK_MST_ACCTOTAL_ADDTOTALNO As MST_ACCREPORTDRow) As MST_ACCTOTALRow
            Dim rowMST_ACCTOTALRow As MST_ACCTOTALRow = CType(Me.NewRow,MST_ACCTOTALRow)
            Dim columnValuesArray() As Object = New Object() {ACCTOTALNO, Nothing, Nothing}
            If (Not (parentMST_ACCREPORTDRowByFK_MST_ACCTOTAL_MST_ACCREPORTD) Is Nothing) Then
                columnValuesArray(1) = parentMST_ACCREPORTDRowByFK_MST_ACCTOTAL_MST_ACCREPORTD(0)
            End If
            If (Not (parentMST_ACCREPORTDRowByFK_MST_ACCTOTAL_ADDTOTALNO) Is Nothing) Then
                columnValuesArray(2) = parentMST_ACCREPORTDRowByFK_MST_ACCTOTAL_ADDTOTALNO(0)
            End If
            rowMST_ACCTOTALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCTOTALRow)
            Return rowMST_ACCTOTALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACCTOTALNO(ByVal ACCTOTALNO As Integer) As MST_ACCTOTALRow
            Return CType(Me.Rows.Find(New Object() {ACCTOTALNO}),MST_ACCTOTALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_ACCTOTALDataTable = CType(MyBase.Clone,MST_ACCTOTALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_ACCTOTALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTOTALNO = MyBase.Columns("ACCTOTALNO")
            Me.columnACCRPTDNO = MyBase.Columns("ACCRPTDNO")
            Me.columnADDTOTALNO = MyBase.Columns("ADDTOTALNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTOTALNO = New Global.System.Data.DataColumn("ACCTOTALNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTOTALNO)
            Me.columnACCRPTDNO = New Global.System.Data.DataColumn("ACCRPTDNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCRPTDNO)
            Me.columnADDTOTALNO = New Global.System.Data.DataColumn("ADDTOTALNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDTOTALNO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCTOTALNO}, true))
            Me.columnACCTOTALNO.AllowDBNull = false
            Me.columnACCTOTALNO.Unique = true
            Me.columnACCRPTDNO.AllowDBNull = false
            Me.columnADDTOTALNO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_ACCTOTALRow() As MST_ACCTOTALRow
            Return CType(Me.NewRow,MST_ACCTOTALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_ACCTOTALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_ACCTOTALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_ACCTOTALRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_ACCTOTALRowChanged(Me, New MST_ACCTOTALRowChangeEvent(CType(e.Row,MST_ACCTOTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_ACCTOTALRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_ACCTOTALRowChanging(Me, New MST_ACCTOTALRowChangeEvent(CType(e.Row,MST_ACCTOTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_ACCTOTALRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_ACCTOTALRowDeleted(Me, New MST_ACCTOTALRowChangeEvent(CType(e.Row,MST_ACCTOTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_ACCTOTALRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_ACCTOTALRowDeleting(Me, New MST_ACCTOTALRowChangeEvent(CType(e.Row,MST_ACCTOTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_ACCTOTALRow(ByVal row As MST_ACCTOTALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccRptDataset = New CSAccRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_ACCTOTALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYS_RPTTYPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRPTTYPE_CODE As Global.System.Data.DataColumn
        
        Private columnRPTTYPE_NAME As Global.System.Data.DataColumn
        
        Private columnREVERSE_VALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYS_RPTTYPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPTTYPE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPTTYPE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPTTYPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPTTYPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REVERSE_VALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVERSE_VALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYS_RPTTYPERow
            Get
                Return CType(Me.Rows(index),SYS_RPTTYPERow)
            End Get
        End Property
        
        Public Event SYS_RPTTYPERowChanging As SYS_RPTTYPERowChangeEventHandler
        
        Public Event SYS_RPTTYPERowChanged As SYS_RPTTYPERowChangeEventHandler
        
        Public Event SYS_RPTTYPERowDeleting As SYS_RPTTYPERowChangeEventHandler
        
        Public Event SYS_RPTTYPERowDeleted As SYS_RPTTYPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYS_RPTTYPERow(ByVal row As SYS_RPTTYPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYS_RPTTYPERow(ByVal RPTTYPE_CODE As String, ByVal RPTTYPE_NAME As String, ByVal REVERSE_VALUE As Boolean) As SYS_RPTTYPERow
            Dim rowSYS_RPTTYPERow As SYS_RPTTYPERow = CType(Me.NewRow,SYS_RPTTYPERow)
            Dim columnValuesArray() As Object = New Object() {RPTTYPE_CODE, RPTTYPE_NAME, REVERSE_VALUE}
            rowSYS_RPTTYPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYS_RPTTYPERow)
            Return rowSYS_RPTTYPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRPTTYPE_CODE(ByVal RPTTYPE_CODE As String) As SYS_RPTTYPERow
            Return CType(Me.Rows.Find(New Object() {RPTTYPE_CODE}),SYS_RPTTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYS_RPTTYPEDataTable = CType(MyBase.Clone,SYS_RPTTYPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYS_RPTTYPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRPTTYPE_CODE = MyBase.Columns("RPTTYPE_CODE")
            Me.columnRPTTYPE_NAME = MyBase.Columns("RPTTYPE_NAME")
            Me.columnREVERSE_VALUE = MyBase.Columns("REVERSE_VALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRPTTYPE_CODE = New Global.System.Data.DataColumn("RPTTYPE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPTTYPE_CODE)
            Me.columnRPTTYPE_NAME = New Global.System.Data.DataColumn("RPTTYPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPTTYPE_NAME)
            Me.columnREVERSE_VALUE = New Global.System.Data.DataColumn("REVERSE_VALUE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVERSE_VALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRPTTYPE_CODE}, true))
            Me.columnRPTTYPE_CODE.AllowDBNull = false
            Me.columnRPTTYPE_CODE.Unique = true
            Me.columnRPTTYPE_CODE.MaxLength = 10
            Me.columnRPTTYPE_NAME.AllowDBNull = false
            Me.columnRPTTYPE_NAME.MaxLength = 50
            Me.columnREVERSE_VALUE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYS_RPTTYPERow() As SYS_RPTTYPERow
            Return CType(Me.NewRow,SYS_RPTTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYS_RPTTYPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYS_RPTTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYS_RPTTYPERowChangedEvent) Is Nothing) Then
                RaiseEvent SYS_RPTTYPERowChanged(Me, New SYS_RPTTYPERowChangeEvent(CType(e.Row,SYS_RPTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYS_RPTTYPERowChangingEvent) Is Nothing) Then
                RaiseEvent SYS_RPTTYPERowChanging(Me, New SYS_RPTTYPERowChangeEvent(CType(e.Row,SYS_RPTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYS_RPTTYPERowDeletedEvent) Is Nothing) Then
                RaiseEvent SYS_RPTTYPERowDeleted(Me, New SYS_RPTTYPERowChangeEvent(CType(e.Row,SYS_RPTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYS_RPTTYPERowDeletingEvent) Is Nothing) Then
                RaiseEvent SYS_RPTTYPERowDeleting(Me, New SYS_RPTTYPERowChangeEvent(CType(e.Row,SYS_RPTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYS_RPTTYPERow(ByVal row As SYS_RPTTYPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccRptDataset = New CSAccRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYS_RPTTYPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_TEMPLATEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTEMPLATE_CODE As Global.System.Data.DataColumn
        
        Private columnTEMPLATE_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_TEMPLATE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEMPLATE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEMPLATE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEMPLATE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEMPLATE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_TEMPLATERow
            Get
                Return CType(Me.Rows(index),MST_TEMPLATERow)
            End Get
        End Property
        
        Public Event MST_TEMPLATERowChanging As MST_TEMPLATERowChangeEventHandler
        
        Public Event MST_TEMPLATERowChanged As MST_TEMPLATERowChangeEventHandler
        
        Public Event MST_TEMPLATERowDeleting As MST_TEMPLATERowChangeEventHandler
        
        Public Event MST_TEMPLATERowDeleted As MST_TEMPLATERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_TEMPLATERow(ByVal row As MST_TEMPLATERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_TEMPLATERow(ByVal TEMPLATE_CODE As String, ByVal TEMPLATE_NAME As String) As MST_TEMPLATERow
            Dim rowMST_TEMPLATERow As MST_TEMPLATERow = CType(Me.NewRow,MST_TEMPLATERow)
            Dim columnValuesArray() As Object = New Object() {TEMPLATE_CODE, TEMPLATE_NAME}
            rowMST_TEMPLATERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_TEMPLATERow)
            Return rowMST_TEMPLATERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTEMPLATE_CODE(ByVal TEMPLATE_CODE As String) As MST_TEMPLATERow
            Return CType(Me.Rows.Find(New Object() {TEMPLATE_CODE}),MST_TEMPLATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_TEMPLATEDataTable = CType(MyBase.Clone,MST_TEMPLATEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_TEMPLATEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTEMPLATE_CODE = MyBase.Columns("TEMPLATE_CODE")
            Me.columnTEMPLATE_NAME = MyBase.Columns("TEMPLATE_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTEMPLATE_CODE = New Global.System.Data.DataColumn("TEMPLATE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEMPLATE_CODE)
            Me.columnTEMPLATE_NAME = New Global.System.Data.DataColumn("TEMPLATE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEMPLATE_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTEMPLATE_CODE}, true))
            Me.columnTEMPLATE_CODE.AllowDBNull = false
            Me.columnTEMPLATE_CODE.Unique = true
            Me.columnTEMPLATE_CODE.MaxLength = 10
            Me.columnTEMPLATE_NAME.AllowDBNull = false
            Me.columnTEMPLATE_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_TEMPLATERow() As MST_TEMPLATERow
            Return CType(Me.NewRow,MST_TEMPLATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_TEMPLATERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_TEMPLATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_TEMPLATERowChangedEvent) Is Nothing) Then
                RaiseEvent MST_TEMPLATERowChanged(Me, New MST_TEMPLATERowChangeEvent(CType(e.Row,MST_TEMPLATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_TEMPLATERowChangingEvent) Is Nothing) Then
                RaiseEvent MST_TEMPLATERowChanging(Me, New MST_TEMPLATERowChangeEvent(CType(e.Row,MST_TEMPLATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_TEMPLATERowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_TEMPLATERowDeleted(Me, New MST_TEMPLATERowChangeEvent(CType(e.Row,MST_TEMPLATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_TEMPLATERowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_TEMPLATERowDeleting(Me, New MST_TEMPLATERowChangeEvent(CType(e.Row,MST_TEMPLATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_TEMPLATERow(ByVal row As MST_TEMPLATERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccRptDataset = New CSAccRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_TEMPLATEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_ACCOUNTRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_ACCOUNT As MST_ACCOUNTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_ACCOUNT = CType(Me.Table,MST_ACCOUNTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableMST_ACCOUNT.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_NAME' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_TYPE' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RETAINED_EARNINGS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RETAINED_EARNINGS' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_ACTIVE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_ACTIVE' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.ACC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_NAMENull()
            Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.ACC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_TYPENull()
            Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRETAINED_EARNINGSNull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRETAINED_EARNINGSNull()
            Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_ACTIVENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.IS_ACTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_ACTIVENull()
            Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCREPORTDDRowsByFK_MST_ACCREPORTDD_FRACC() As MST_ACCREPORTDDRow()
            If (Me.Table.ChildRelations("FK_MST_ACCREPORTDD_FRACC") Is Nothing) Then
                Return New MST_ACCREPORTDDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCREPORTDD_FRACC")),MST_ACCREPORTDDRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCREPORTDDRowsByFK_MST_ACCREPORTDD_TOACC() As MST_ACCREPORTDDRow()
            If (Me.Table.ChildRelations("FK_MST_ACCREPORTDD_TOACC") Is Nothing) Then
                Return New MST_ACCREPORTDDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCREPORTDD_TOACC")),MST_ACCREPORTDDRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_ACCREPORTRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_ACCREPORT As MST_ACCREPORTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_ACCREPORT = CType(Me.Table,MST_ACCREPORTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCRPTNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCREPORT.ACCRPTNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCREPORT.ACCRPTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCRPT_NAME() As String
            Get
                Return CType(Me(Me.tableMST_ACCREPORT.ACCRPT_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCREPORT.ACCRPT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEMPLATE_CODE() As String
            Get
                Return CType(Me(Me.tableMST_ACCREPORT.TEMPLATE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCREPORT.TEMPLATE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEMPLATE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCREPORT.TEMPLATE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEMPLATE_NAME' in table 'MST_ACCREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCREPORT.TEMPLATE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_TEMPLATERow() As MST_TEMPLATERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCREPORT_MST_TEMPLATE")),MST_TEMPLATERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCREPORT_MST_TEMPLATE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEMPLATE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCREPORT.TEMPLATE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEMPLATE_NAMENull()
            Me(Me.tableMST_ACCREPORT.TEMPLATE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCREPORTDRows() As MST_ACCREPORTDRow()
            If (Me.Table.ChildRelations("FK_MST_ACCREPORTD_MST_ACCREPORT") Is Nothing) Then
                Return New MST_ACCREPORTDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCREPORTD_MST_ACCREPORT")),MST_ACCREPORTDRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_ACCREPORTDRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_ACCREPORTD As MST_ACCREPORTDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_ACCREPORTD = CType(Me.Table,MST_ACCREPORTDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCRPTDNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCREPORTD.ACCRPTDNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTD.ACCRPTDNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCRPTNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCREPORTD.ACCRPTNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTD.ACCRPTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRINTDESC() As String
            Get
                Return CType(Me(Me.tableMST_ACCREPORTD.PRINTDESCColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTD.PRINTDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPTTYPE_CODE() As String
            Get
                Return CType(Me(Me.tableMST_ACCREPORTD.RPTTYPE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTD.RPTTYPE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SORTORDER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCREPORTD.SORTORDERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SORTORDER' in table 'MST_ACCREPORTD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCREPORTD.SORTORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCREPORTRow() As MST_ACCREPORTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCREPORTD_MST_ACCREPORT")),MST_ACCREPORTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCREPORTD_MST_ACCREPORT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_RPTTYPERow() As SYS_RPTTYPERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCREPORTD_SYS_RPTTYPE")),SYS_RPTTYPERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCREPORTD_SYS_RPTTYPE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSORTORDERNull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCREPORTD.SORTORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSORTORDERNull()
            Me(Me.tableMST_ACCREPORTD.SORTORDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCREPORTDDRows() As MST_ACCREPORTDDRow()
            If (Me.Table.ChildRelations("FK_MST_ACCREPORTDD_MST_ACCREPORTD") Is Nothing) Then
                Return New MST_ACCREPORTDDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCREPORTDD_MST_ACCREPORTD")),MST_ACCREPORTDDRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCTOTALRowsByFK_MST_ACCTOTAL_MST_ACCREPORTD() As MST_ACCTOTALRow()
            If (Me.Table.ChildRelations("FK_MST_ACCTOTAL_MST_ACCREPORTD") Is Nothing) Then
                Return New MST_ACCTOTALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCTOTAL_MST_ACCREPORTD")),MST_ACCTOTALRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCTOTALRowsByFK_MST_ACCTOTAL_ADDTOTALNO() As MST_ACCTOTALRow()
            If (Me.Table.ChildRelations("FK_MST_ACCTOTAL_ADDTOTALNO") Is Nothing) Then
                Return New MST_ACCTOTALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCTOTAL_ADDTOTALNO")),MST_ACCTOTALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_ACCREPORTDDRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_ACCREPORTDD As MST_ACCREPORTDDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_ACCREPORTDD = CType(Me.Table,MST_ACCREPORTDDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCRPTDDNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCREPORTDD.ACCRPTDDNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTDD.ACCRPTDDNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCRPTDNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCREPORTDD.ACCRPTDNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTDD.ACCRPTDNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRACC() As String
            Get
                Return CType(Me(Me.tableMST_ACCREPORTDD.FRACCColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTDD.FRACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOACC() As String
            Get
                Return CType(Me(Me.tableMST_ACCREPORTDD.TOACCColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCREPORTDD.TOACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRowByFK_MST_ACCREPORTDD_FRACC() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCREPORTDD_FRACC")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCREPORTDD_FRACC"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCREPORTDRow() As MST_ACCREPORTDRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCREPORTDD_MST_ACCREPORTD")),MST_ACCREPORTDRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCREPORTDD_MST_ACCREPORTD"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRowByFK_MST_ACCREPORTDD_TOACC() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCREPORTDD_TOACC")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCREPORTDD_TOACC"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_ACCTOTALRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_ACCTOTAL As MST_ACCTOTALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_ACCTOTAL = CType(Me.Table,MST_ACCTOTALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTOTALNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCTOTAL.ACCTOTALNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCTOTAL.ACCTOTALNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCRPTDNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCTOTAL.ACCRPTDNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCTOTAL.ACCRPTDNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDTOTALNO() As Integer
            Get
                Return CType(Me(Me.tableMST_ACCTOTAL.ADDTOTALNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_ACCTOTAL.ADDTOTALNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCREPORTDRowByFK_MST_ACCTOTAL_MST_ACCREPORTD() As MST_ACCREPORTDRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCTOTAL_MST_ACCREPORTD")),MST_ACCREPORTDRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCTOTAL_MST_ACCREPORTD"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCREPORTDRowByFK_MST_ACCTOTAL_ADDTOTALNO() As MST_ACCREPORTDRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_ACCTOTAL_ADDTOTALNO")),MST_ACCREPORTDRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_ACCTOTAL_ADDTOTALNO"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYS_RPTTYPERow
        Inherits Global.System.Data.DataRow
        
        Private tableSYS_RPTTYPE As SYS_RPTTYPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYS_RPTTYPE = CType(Me.Table,SYS_RPTTYPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPTTYPE_CODE() As String
            Get
                Return CType(Me(Me.tableSYS_RPTTYPE.RPTTYPE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableSYS_RPTTYPE.RPTTYPE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPTTYPE_NAME() As String
            Get
                Return CType(Me(Me.tableSYS_RPTTYPE.RPTTYPE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableSYS_RPTTYPE.RPTTYPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REVERSE_VALUE() As Boolean
            Get
                Return CType(Me(Me.tableSYS_RPTTYPE.REVERSE_VALUEColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYS_RPTTYPE.REVERSE_VALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCREPORTDRows() As MST_ACCREPORTDRow()
            If (Me.Table.ChildRelations("FK_MST_ACCREPORTD_SYS_RPTTYPE") Is Nothing) Then
                Return New MST_ACCREPORTDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCREPORTD_SYS_RPTTYPE")),MST_ACCREPORTDRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_TEMPLATERow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_TEMPLATE As MST_TEMPLATEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_TEMPLATE = CType(Me.Table,MST_TEMPLATEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEMPLATE_CODE() As String
            Get
                Return CType(Me(Me.tableMST_TEMPLATE.TEMPLATE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_TEMPLATE.TEMPLATE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEMPLATE_NAME() As String
            Get
                Return CType(Me(Me.tableMST_TEMPLATE.TEMPLATE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_TEMPLATE.TEMPLATE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_ACCREPORTRows() As MST_ACCREPORTRow()
            If (Me.Table.ChildRelations("FK_MST_ACCREPORT_MST_TEMPLATE") Is Nothing) Then
                Return New MST_ACCREPORTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_ACCREPORT_MST_TEMPLATE")),MST_ACCREPORTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_ACCOUNTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_ACCOUNTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_ACCOUNTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_ACCOUNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_ACCREPORTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_ACCREPORTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_ACCREPORTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_ACCREPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_ACCREPORTDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_ACCREPORTDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_ACCREPORTDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_ACCREPORTDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_ACCREPORTDDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_ACCREPORTDDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_ACCREPORTDDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_ACCREPORTDDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_ACCTOTALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_ACCTOTALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_ACCTOTALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_ACCTOTALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYS_RPTTYPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYS_RPTTYPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYS_RPTTYPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYS_RPTTYPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_TEMPLATERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_TEMPLATERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_TEMPLATERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_TEMPLATERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CSAccRptDatasetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_ACCOUNTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_ACCOUNT"
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_NAME", "ACC_NAME")
            tableMapping.ColumnMappings.Add("ACC_TYPE", "ACC_TYPE")
            tableMapping.ColumnMappings.Add("RETAINED_EARNINGS", "RETAINED_EARNINGS")
            tableMapping.ColumnMappings.Add("IS_ACTIVE", "IS_ACTIVE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_ACCOUNT] WHERE (([ACC_CODE] = @Original_ACC_CODE) AND ((@I"& _ 
                "sNull_ACC_NAME = 1 AND [ACC_NAME] IS NULL) OR ([ACC_NAME] = @Original_ACC_NAME))"& _ 
                " AND ((@IsNull_ACC_TYPE = 1 AND [ACC_TYPE] IS NULL) OR ([ACC_TYPE] = @Original_A"& _ 
                "CC_TYPE)) AND ((@IsNull_RETAINED_EARNINGS = 1 AND [RETAINED_EARNINGS] IS NULL) O"& _ 
                "R ([RETAINED_EARNINGS] = @Original_RETAINED_EARNINGS)) AND ((@IsNull_IS_ACTIVE ="& _ 
                " 1 AND [IS_ACTIVE] IS NULL) OR ([IS_ACTIVE] = @Original_IS_ACTIVE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_ACTIVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_ACCOUNT] ([ACC_CODE], [ACC_NAME], [ACC_TYPE], [RETAINED_EA"& _ 
                "RNINGS], [IS_ACTIVE]) VALUES (@ACC_CODE, @ACC_NAME, @ACC_TYPE, @RETAINED_EARNING"& _ 
                "S, @IS_ACTIVE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTI"& _ 
                "VE FROM MST_ACCOUNT WHERE (ACC_CODE = @ACC_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_ACCOUNT] SET [ACC_CODE] = @ACC_CODE, [ACC_NAME] = @ACC_NAME, [A"& _ 
                "CC_TYPE] = @ACC_TYPE, [RETAINED_EARNINGS] = @RETAINED_EARNINGS, [IS_ACTIVE] = @I"& _ 
                "S_ACTIVE WHERE (([ACC_CODE] = @Original_ACC_CODE) AND ((@IsNull_ACC_NAME = 1 AND"& _ 
                " [ACC_NAME] IS NULL) OR ([ACC_NAME] = @Original_ACC_NAME)) AND ((@IsNull_ACC_TYP"& _ 
                "E = 1 AND [ACC_TYPE] IS NULL) OR ([ACC_TYPE] = @Original_ACC_TYPE)) AND ((@IsNul"& _ 
                "l_RETAINED_EARNINGS = 1 AND [RETAINED_EARNINGS] IS NULL) OR ([RETAINED_EARNINGS]"& _ 
                " = @Original_RETAINED_EARNINGS)) AND ((@IsNull_IS_ACTIVE = 1 AND [IS_ACTIVE] IS "& _ 
                "NULL) OR ([IS_ACTIVE] = @Original_IS_ACTIVE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_CODE, ACC_NAME, ACC_"& _ 
                "TYPE, RETAINED_EARNINGS, IS_ACTIVE FROM MST_ACCOUNT WHERE (ACC_CODE = @ACC_CODE)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_ACTIVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE FROM dbo.MST_AC"& _ 
                "COUNT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccRptDataset.MST_ACCOUNTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccRptDataset.MST_ACCOUNTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccRptDataset.MST_ACCOUNTDataTable = New CSAccRptDataset.MST_ACCOUNTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccRptDataset.MST_ACCOUNTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccRptDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_ACCOUNT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACC_NAME,String)
            End If
            If (Original_ACC_TYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_ACTIVE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            If (ACC_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACC_NAME,String)
            End If
            If (ACC_TYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_ACTIVE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean), ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            If (ACC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACC_NAME,String)
            End If
            If (ACC_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_ACTIVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ACC_NAME,String)
            End If
            If (Original_ACC_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_ACTIVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean), ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE, Original_ACC_CODE, Original_ACC_NAME, Original_ACC_TYPE, Original_RETAINED_EARNINGS, Original_IS_ACTIVE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_ACCREPORTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_ACCREPORT"
            tableMapping.ColumnMappings.Add("ACCRPTNO", "ACCRPTNO")
            tableMapping.ColumnMappings.Add("ACCRPT_NAME", "ACCRPT_NAME")
            tableMapping.ColumnMappings.Add("TEMPLATE_CODE", "TEMPLATE_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_ACCREPORT] WHERE (([ACCRPTNO] = @Original_ACCRPTNO) AND (["& _ 
                "ACCRPT_NAME] = @Original_ACCRPT_NAME) AND ([TEMPLATE_CODE] = @Original_TEMPLATE_"& _ 
                "CODE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPT_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_ACCREPORT] ([ACCRPTNO], [ACCRPT_NAME], [TEMPLATE_CODE]) VA"& _ 
                "LUES (@ACCRPTNO, @ACCRPT_NAME, @TEMPLATE_CODE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCRPTNO, ACCRPT_NAME, T"& _ 
                "EMPLATE_CODE FROM MST_ACCREPORT WHERE (ACCRPTNO = @ACCRPTNO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPT_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_ACCREPORT] SET [ACCRPTNO] = @ACCRPTNO, [ACCRPT_NAME] = @ACCRPT_"& _ 
                "NAME, [TEMPLATE_CODE] = @TEMPLATE_CODE WHERE (([ACCRPTNO] = @Original_ACCRPTNO) "& _ 
                "AND ([ACCRPT_NAME] = @Original_ACCRPT_NAME) AND ([TEMPLATE_CODE] = @Original_TEM"& _ 
                "PLATE_CODE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCRPTNO, ACCRPT_NAME, TEMPLATE_CODE FROM MST_ACCREPORT WH"& _ 
                "ERE (ACCRPTNO = @ACCRPTNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPT_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPT_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCRPTNO, ACCRPT_NAME, TEMPLATE_CODE FROM MST_ACCREPORT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccRptDataset.MST_ACCREPORTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccRptDataset.MST_ACCREPORTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccRptDataset.MST_ACCREPORTDataTable = New CSAccRptDataset.MST_ACCREPORTDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccRptDataset.MST_ACCREPORTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccRptDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_ACCREPORT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACCRPTNO As Integer, ByVal Original_ACCRPT_NAME As String, ByVal Original_TEMPLATE_CODE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACCRPTNO,Integer)
            If (Original_ACCRPT_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACCRPT_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ACCRPT_NAME,String)
            End If
            If (Original_TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEMPLATE_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TEMPLATE_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACCRPTNO As Integer, ByVal ACCRPT_NAME As String, ByVal TEMPLATE_CODE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACCRPTNO,Integer)
            If (ACCRPT_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACCRPT_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACCRPT_NAME,String)
            End If
            If (TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEMPLATE_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TEMPLATE_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCRPTNO As Integer, ByVal ACCRPT_NAME As String, ByVal TEMPLATE_CODE As String, ByVal Original_ACCRPTNO As Integer, ByVal Original_ACCRPT_NAME As String, ByVal Original_TEMPLATE_CODE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACCRPTNO,Integer)
            If (ACCRPT_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACCRPT_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACCRPT_NAME,String)
            End If
            If (TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEMPLATE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TEMPLATE_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ACCRPTNO,Integer)
            If (Original_ACCRPT_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACCRPT_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ACCRPT_NAME,String)
            End If
            If (Original_TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEMPLATE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TEMPLATE_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCRPT_NAME As String, ByVal TEMPLATE_CODE As String, ByVal Original_ACCRPTNO As Integer, ByVal Original_ACCRPT_NAME As String, ByVal Original_TEMPLATE_CODE As String) As Integer
            Return Me.Update(Original_ACCRPTNO, ACCRPT_NAME, TEMPLATE_CODE, Original_ACCRPTNO, Original_ACCRPT_NAME, Original_TEMPLATE_CODE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_ACCREPORTDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_ACCREPORTD"
            tableMapping.ColumnMappings.Add("ACCRPTDNO", "ACCRPTDNO")
            tableMapping.ColumnMappings.Add("ACCRPTNO", "ACCRPTNO")
            tableMapping.ColumnMappings.Add("PRINTDESC", "PRINTDESC")
            tableMapping.ColumnMappings.Add("RPTTYPE_CODE", "RPTTYPE_CODE")
            tableMapping.ColumnMappings.Add("SORTORDER", "SORTORDER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_ACCREPORTD] WHERE (([ACCRPTDNO] = @Original_ACCRPTDNO) AND"& _ 
                " ([ACCRPTNO] = @Original_ACCRPTNO) AND ([PRINTDESC] = @Original_PRINTDESC) AND ("& _ 
                "[RPTTYPE_CODE] = @Original_RPTTYPE_CODE) AND ((@IsNull_SORTORDER = 1 AND [SORTOR"& _ 
                "DER] IS NULL) OR ([SORTORDER] = @Original_SORTORDER)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRINTDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINTDESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SORTORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SORTORDER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SORTORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SORTORDER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_ACCREPORTD] ([ACCRPTDNO], [ACCRPTNO], [PRINTDESC], [RPTTYP"& _ 
                "E_CODE], [SORTORDER]) VALUES (@ACCRPTDNO, @ACCRPTNO, @PRINTDESC, @RPTTYPE_CODE, "& _ 
                "@SORTORDER);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCRPTDNO, ACCRPTNO, PRINTDESC, RPTTYPE_CODE, SORTORDER FRO"& _ 
                "M MST_ACCREPORTD WHERE (ACCRPTDNO = @ACCRPTDNO) ORDER BY SORTORDER"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRINTDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINTDESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORTORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SORTORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_ACCREPORTD] SET [ACCRPTDNO] = @ACCRPTDNO, [ACCRPTNO] = @ACCRPTN"& _ 
                "O, [PRINTDESC] = @PRINTDESC, [RPTTYPE_CODE] = @RPTTYPE_CODE, [SORTORDER] = @SORT"& _ 
                "ORDER WHERE (([ACCRPTDNO] = @Original_ACCRPTDNO) AND ([ACCRPTNO] = @Original_ACC"& _ 
                "RPTNO) AND ([PRINTDESC] = @Original_PRINTDESC) AND ([RPTTYPE_CODE] = @Original_R"& _ 
                "PTTYPE_CODE) AND ((@IsNull_SORTORDER = 1 AND [SORTORDER] IS NULL) OR ([SORTORDER"& _ 
                "] = @Original_SORTORDER)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCRPTDNO, ACCRPTNO, PRINTDESC, RPTTYPE_CODE"& _ 
                ", SORTORDER FROM MST_ACCREPORTD WHERE (ACCRPTDNO = @ACCRPTDNO) ORDER BY SORTORDE"& _ 
                "R"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRINTDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINTDESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORTORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SORTORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRINTDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRINTDESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SORTORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SORTORDER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SORTORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SORTORDER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCRPTDNO, ACCRPTNO, PRINTDESC, RPTTYPE_CODE, SORTORDER FROM dbo.MST_ACCRE"& _ 
                "PORTD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SORTORDER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccRptDataset.MST_ACCREPORTDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccRptDataset.MST_ACCREPORTDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccRptDataset.MST_ACCREPORTDDataTable = New CSAccRptDataset.MST_ACCREPORTDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccRptDataset.MST_ACCREPORTDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccRptDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_ACCREPORTD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACCRPTDNO As Integer, ByVal Original_ACCRPTNO As Integer, ByVal Original_PRINTDESC As String, ByVal Original_RPTTYPE_CODE As String, ByVal Original_SORTORDER As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACCRPTDNO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ACCRPTNO,Integer)
            If (Original_PRINTDESC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRINTDESC")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRINTDESC,String)
            End If
            If (Original_RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPTTYPE_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_RPTTYPE_CODE,String)
            End If
            If (Original_SORTORDER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SORTORDER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACCRPTDNO As Integer, ByVal ACCRPTNO As Integer, ByVal PRINTDESC As String, ByVal RPTTYPE_CODE As String, ByVal SORTORDER As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACCRPTDNO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACCRPTNO,Integer)
            If (PRINTDESC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRINTDESC")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRINTDESC,String)
            End If
            If (RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPTTYPE_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RPTTYPE_CODE,String)
            End If
            If (SORTORDER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SORTORDER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCRPTDNO As Integer, ByVal ACCRPTNO As Integer, ByVal PRINTDESC As String, ByVal RPTTYPE_CODE As String, ByVal SORTORDER As Global.System.Nullable(Of Integer), ByVal Original_ACCRPTDNO As Integer, ByVal Original_ACCRPTNO As Integer, ByVal Original_PRINTDESC As String, ByVal Original_RPTTYPE_CODE As String, ByVal Original_SORTORDER As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACCRPTDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACCRPTNO,Integer)
            If (PRINTDESC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRINTDESC")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRINTDESC,String)
            End If
            If (RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPTTYPE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RPTTYPE_CODE,String)
            End If
            If (SORTORDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SORTORDER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ACCRPTDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ACCRPTNO,Integer)
            If (Original_PRINTDESC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRINTDESC")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRINTDESC,String)
            End If
            If (Original_RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPTTYPE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_RPTTYPE_CODE,String)
            End If
            If (Original_SORTORDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SORTORDER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCRPTNO As Integer, ByVal PRINTDESC As String, ByVal RPTTYPE_CODE As String, ByVal SORTORDER As Global.System.Nullable(Of Integer), ByVal Original_ACCRPTDNO As Integer, ByVal Original_ACCRPTNO As Integer, ByVal Original_PRINTDESC As String, ByVal Original_RPTTYPE_CODE As String, ByVal Original_SORTORDER As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_ACCRPTDNO, ACCRPTNO, PRINTDESC, RPTTYPE_CODE, SORTORDER, Original_ACCRPTDNO, Original_ACCRPTNO, Original_PRINTDESC, Original_RPTTYPE_CODE, Original_SORTORDER)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_ACCREPORTDDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_ACCREPORTDD"
            tableMapping.ColumnMappings.Add("ACCRPTDDNO", "ACCRPTDDNO")
            tableMapping.ColumnMappings.Add("ACCRPTDNO", "ACCRPTDNO")
            tableMapping.ColumnMappings.Add("FRACC", "FRACC")
            tableMapping.ColumnMappings.Add("TOACC", "TOACC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_ACCREPORTDD] WHERE (([ACCRPTDDNO] = @Original_ACCRPTDDNO) "& _ 
                "AND ([ACCRPTDNO] = @Original_ACCRPTDNO) AND ([FRACC] = @Original_FRACC) AND ([TO"& _ 
                "ACC] = @Original_TOACC))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FRACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FRACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_ACCREPORTDD] ([ACCRPTDDNO], [ACCRPTDNO], [FRACC], [TOACC])"& _ 
                " VALUES (@ACCRPTDDNO, @ACCRPTDNO, @FRACC, @TOACC);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCRPTDDNO, ACCRPTDNO"& _ 
                ", FRACC, TOACC FROM MST_ACCREPORTDD WHERE (ACCRPTDDNO = @ACCRPTDDNO) AND (ACCRPT"& _ 
                "DNO = @ACCRPTDNO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FRACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FRACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_ACCREPORTDD] SET [ACCRPTDDNO] = @ACCRPTDDNO, [ACCRPTDNO] = @ACC"& _ 
                "RPTDNO, [FRACC] = @FRACC, [TOACC] = @TOACC WHERE (([ACCRPTDDNO] = @Original_ACCR"& _ 
                "PTDDNO) AND ([ACCRPTDNO] = @Original_ACCRPTDNO) AND ([FRACC] = @Original_FRACC) "& _ 
                "AND ([TOACC] = @Original_TOACC));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCRPTDDNO, ACCRPTDNO, FRACC, TOACC FR"& _ 
                "OM MST_ACCREPORTDD WHERE (ACCRPTDDNO = @ACCRPTDDNO) AND (ACCRPTDNO = @ACCRPTDNO)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FRACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FRACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FRACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FRACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCRPTDDNO, ACCRPTDNO, FRACC, TOACC FROM dbo.MST_ACCREPORTDD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccRptDataset.MST_ACCREPORTDDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccRptDataset.MST_ACCREPORTDDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccRptDataset.MST_ACCREPORTDDDataTable = New CSAccRptDataset.MST_ACCREPORTDDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccRptDataset.MST_ACCREPORTDDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccRptDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_ACCREPORTDD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACCRPTDDNO As Integer, ByVal Original_ACCRPTDNO As Integer, ByVal Original_FRACC As String, ByVal Original_TOACC As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACCRPTDDNO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ACCRPTDNO,Integer)
            If (Original_FRACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FRACC")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FRACC,String)
            End If
            If (Original_TOACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TOACC")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TOACC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACCRPTDDNO As Integer, ByVal ACCRPTDNO As Integer, ByVal FRACC As String, ByVal TOACC As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACCRPTDDNO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACCRPTDNO,Integer)
            If (FRACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FRACC")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FRACC,String)
            End If
            If (TOACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TOACC")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TOACC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCRPTDDNO As Integer, ByVal ACCRPTDNO As Integer, ByVal FRACC As String, ByVal TOACC As String, ByVal Original_ACCRPTDDNO As Integer, ByVal Original_ACCRPTDNO As Integer, ByVal Original_FRACC As String, ByVal Original_TOACC As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACCRPTDDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACCRPTDNO,Integer)
            If (FRACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FRACC")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FRACC,String)
            End If
            If (TOACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TOACC")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TOACC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ACCRPTDDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ACCRPTDNO,Integer)
            If (Original_FRACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FRACC")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FRACC,String)
            End If
            If (Original_TOACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TOACC")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TOACC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FRACC As String, ByVal TOACC As String, ByVal Original_ACCRPTDDNO As Integer, ByVal Original_ACCRPTDNO As Integer, ByVal Original_FRACC As String, ByVal Original_TOACC As String) As Integer
            Return Me.Update(Original_ACCRPTDDNO, Original_ACCRPTDNO, FRACC, TOACC, Original_ACCRPTDDNO, Original_ACCRPTDNO, Original_FRACC, Original_TOACC)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_ACCTOTALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_ACCTOTAL"
            tableMapping.ColumnMappings.Add("ACCTOTALNO", "ACCTOTALNO")
            tableMapping.ColumnMappings.Add("ACCRPTDNO", "ACCRPTDNO")
            tableMapping.ColumnMappings.Add("ADDTOTALNO", "ADDTOTALNO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_ACCTOTAL] WHERE (([ACCTOTALNO] = @Original_ACCTOTALNO) AND"& _ 
                " ([ACCRPTDNO] = @Original_ACCRPTDNO) AND ([ADDTOTALNO] = @Original_ADDTOTALNO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCTOTALNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDTOTALNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_ACCTOTAL] ([ACCTOTALNO], [ACCRPTDNO], [ADDTOTALNO]) VALUES"& _ 
                " (@ACCTOTALNO, @ACCRPTDNO, @ADDTOTALNO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCTOTALNO, ACCRPTDNO, ADDTOTAL"& _ 
                "NO FROM MST_ACCTOTAL WHERE (ACCTOTALNO = @ACCTOTALNO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCTOTALNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDTOTALNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_ACCTOTAL] SET [ACCTOTALNO] = @ACCTOTALNO, [ACCRPTDNO] = @ACCRPT"& _ 
                "DNO, [ADDTOTALNO] = @ADDTOTALNO WHERE (([ACCTOTALNO] = @Original_ACCTOTALNO) AND"& _ 
                " ([ACCRPTDNO] = @Original_ACCRPTDNO) AND ([ADDTOTALNO] = @Original_ADDTOTALNO));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCTOTALNO, ACCRPTDNO, ADDTOTALNO FROM MST_ACCTOTAL WHERE (ACCTOTALNO ="& _ 
                " @ACCTOTALNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCTOTALNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDTOTALNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCTOTALNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCRPTDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCRPTDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDTOTALNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDTOTALNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCTOTALNO, ACCRPTDNO, ADDTOTALNO FROM dbo.MST_ACCTOTAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccRptDataset.MST_ACCTOTALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccRptDataset.MST_ACCTOTALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccRptDataset.MST_ACCTOTALDataTable = New CSAccRptDataset.MST_ACCTOTALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccRptDataset.MST_ACCTOTALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccRptDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_ACCTOTAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACCTOTALNO As Integer, ByVal Original_ACCRPTDNO As Integer, ByVal Original_ADDTOTALNO As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACCTOTALNO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ACCRPTDNO,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ADDTOTALNO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACCTOTALNO As Integer, ByVal ACCRPTDNO As Integer, ByVal ADDTOTALNO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACCTOTALNO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACCRPTDNO,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ADDTOTALNO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCTOTALNO As Integer, ByVal ACCRPTDNO As Integer, ByVal ADDTOTALNO As Integer, ByVal Original_ACCTOTALNO As Integer, ByVal Original_ACCRPTDNO As Integer, ByVal Original_ADDTOTALNO As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACCTOTALNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACCRPTDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ADDTOTALNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ACCTOTALNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ACCRPTDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ADDTOTALNO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCRPTDNO As Integer, ByVal ADDTOTALNO As Integer, ByVal Original_ACCTOTALNO As Integer, ByVal Original_ACCRPTDNO As Integer, ByVal Original_ADDTOTALNO As Integer) As Integer
            Return Me.Update(Original_ACCTOTALNO, ACCRPTDNO, ADDTOTALNO, Original_ACCTOTALNO, Original_ACCRPTDNO, Original_ADDTOTALNO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYS_RPTTYPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYS_RPTTYPE"
            tableMapping.ColumnMappings.Add("RPTTYPE_CODE", "RPTTYPE_CODE")
            tableMapping.ColumnMappings.Add("RPTTYPE_NAME", "RPTTYPE_NAME")
            tableMapping.ColumnMappings.Add("REVERSE_VALUE", "REVERSE_VALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SYS_RPTTYPE] WHERE (([RPTTYPE_CODE] = @Original_RPTTYPE_CODE) "& _ 
                "AND ([RPTTYPE_NAME] = @Original_RPTTYPE_NAME) AND ([REVERSE_VALUE] = @Original_R"& _ 
                "EVERSE_VALUE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVERSE_VALUE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVERSE_VALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SYS_RPTTYPE] ([RPTTYPE_CODE], [RPTTYPE_NAME], [REVERSE_VALUE])"& _ 
                " VALUES (@RPTTYPE_CODE, @RPTTYPE_NAME, @REVERSE_VALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RPTTYPE_CODE, RP"& _ 
                "TTYPE_NAME, REVERSE_VALUE FROM SYS_RPTTYPE WHERE (RPTTYPE_CODE = @RPTTYPE_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVERSE_VALUE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVERSE_VALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SYS_RPTTYPE] SET [RPTTYPE_CODE] = @RPTTYPE_CODE, [RPTTYPE_NAME] = @"& _ 
                "RPTTYPE_NAME, [REVERSE_VALUE] = @REVERSE_VALUE WHERE (([RPTTYPE_CODE] = @Origina"& _ 
                "l_RPTTYPE_CODE) AND ([RPTTYPE_NAME] = @Original_RPTTYPE_NAME) AND ([REVERSE_VALU"& _ 
                "E] = @Original_REVERSE_VALUE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RPTTYPE_CODE, RPTTYPE_NAME, REVERSE_VALU"& _ 
                "E FROM SYS_RPTTYPE WHERE (RPTTYPE_CODE = @RPTTYPE_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REVERSE_VALUE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVERSE_VALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPTTYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REVERSE_VALUE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REVERSE_VALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RPTTYPE_CODE, RPTTYPE_NAME, REVERSE_VALUE FROM dbo.SYS_RPTTYPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccRptDataset.SYS_RPTTYPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccRptDataset.SYS_RPTTYPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccRptDataset.SYS_RPTTYPEDataTable = New CSAccRptDataset.SYS_RPTTYPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccRptDataset.SYS_RPTTYPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccRptDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SYS_RPTTYPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RPTTYPE_CODE As String, ByVal Original_RPTTYPE_NAME As String, ByVal Original_REVERSE_VALUE As Boolean) As Integer
            If (Original_RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPTTYPE_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RPTTYPE_CODE,String)
            End If
            If (Original_RPTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPTTYPE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_RPTTYPE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REVERSE_VALUE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RPTTYPE_CODE As String, ByVal RPTTYPE_NAME As String, ByVal REVERSE_VALUE As Boolean) As Integer
            If (RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPTTYPE_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RPTTYPE_CODE,String)
            End If
            If (RPTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPTTYPE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RPTTYPE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REVERSE_VALUE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RPTTYPE_CODE As String, ByVal RPTTYPE_NAME As String, ByVal REVERSE_VALUE As Boolean, ByVal Original_RPTTYPE_CODE As String, ByVal Original_RPTTYPE_NAME As String, ByVal Original_REVERSE_VALUE As Boolean) As Integer
            If (RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPTTYPE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RPTTYPE_CODE,String)
            End If
            If (RPTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPTTYPE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RPTTYPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REVERSE_VALUE,Boolean)
            If (Original_RPTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPTTYPE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_RPTTYPE_CODE,String)
            End If
            If (Original_RPTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPTTYPE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_RPTTYPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_REVERSE_VALUE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RPTTYPE_NAME As String, ByVal REVERSE_VALUE As Boolean, ByVal Original_RPTTYPE_CODE As String, ByVal Original_RPTTYPE_NAME As String, ByVal Original_REVERSE_VALUE As Boolean) As Integer
            Return Me.Update(Original_RPTTYPE_CODE, RPTTYPE_NAME, REVERSE_VALUE, Original_RPTTYPE_CODE, Original_RPTTYPE_NAME, Original_REVERSE_VALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_TEMPLATETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_TEMPLATE"
            tableMapping.ColumnMappings.Add("TEMPLATE_CODE", "TEMPLATE_CODE")
            tableMapping.ColumnMappings.Add("TEMPLATE_NAME", "TEMPLATE_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_TEMPLATE] WHERE (([TEMPLATE_CODE] = @Original_TEMPLATE_COD"& _ 
                "E) AND ([TEMPLATE_NAME] = @Original_TEMPLATE_NAME))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TEMPLATE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_TEMPLATE] ([TEMPLATE_CODE], [TEMPLATE_NAME]) VALUES (@TEMP"& _ 
                "LATE_CODE, @TEMPLATE_NAME);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TEMPLATE_CODE, TEMPLATE_NAME FROM MST_TEMPLA"& _ 
                "TE WHERE (TEMPLATE_CODE = @TEMPLATE_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPLATE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_TEMPLATE] SET [TEMPLATE_CODE] = @TEMPLATE_CODE, [TEMPLATE_NAME]"& _ 
                " = @TEMPLATE_NAME WHERE (([TEMPLATE_CODE] = @Original_TEMPLATE_CODE) AND ([TEMPL"& _ 
                "ATE_NAME] = @Original_TEMPLATE_NAME));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TEMPLATE_CODE, TEMPLATE_NAME FROM"& _ 
                " MST_TEMPLATE WHERE (TEMPLATE_CODE = @TEMPLATE_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPLATE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TEMPLATE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TEMPLATE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPLATE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TEMPLATE_CODE, TEMPLATE_NAME FROM dbo.MST_TEMPLATE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccRptDataset.MST_TEMPLATEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSAccRptDataset.MST_TEMPLATEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSAccRptDataset.MST_TEMPLATEDataTable = New CSAccRptDataset.MST_TEMPLATEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSAccRptDataset.MST_TEMPLATEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSAccRptDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_TEMPLATE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TEMPLATE_CODE As String, ByVal Original_TEMPLATE_NAME As String) As Integer
            If (Original_TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEMPLATE_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TEMPLATE_CODE,String)
            End If
            If (Original_TEMPLATE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEMPLATE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TEMPLATE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TEMPLATE_CODE As String, ByVal TEMPLATE_NAME As String) As Integer
            If (TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEMPLATE_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TEMPLATE_CODE,String)
            End If
            If (TEMPLATE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEMPLATE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TEMPLATE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TEMPLATE_CODE As String, ByVal TEMPLATE_NAME As String, ByVal Original_TEMPLATE_CODE As String, ByVal Original_TEMPLATE_NAME As String) As Integer
            If (TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEMPLATE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TEMPLATE_CODE,String)
            End If
            If (TEMPLATE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TEMPLATE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TEMPLATE_NAME,String)
            End If
            If (Original_TEMPLATE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEMPLATE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_TEMPLATE_CODE,String)
            End If
            If (Original_TEMPLATE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TEMPLATE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_TEMPLATE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TEMPLATE_NAME As String, ByVal Original_TEMPLATE_CODE As String, ByVal Original_TEMPLATE_NAME As String) As Integer
            Return Me.Update(Original_TEMPLATE_CODE, TEMPLATE_NAME, Original_TEMPLATE_CODE, Original_TEMPLATE_NAME)
        End Function
    End Class
End Namespace
