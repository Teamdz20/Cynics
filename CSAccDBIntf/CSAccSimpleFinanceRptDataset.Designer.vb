'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1434
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CSAccSimpleFinanceRptDataset"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CSAccSimpleFinanceRptDataset
    Inherits Global.System.Data.DataSet
    
    Private tableSIMPLEFINANCERPT As SIMPLEFINANCERPTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SIMPLEFINANCERPT")) Is Nothing) Then
                MyBase.Tables.Add(New SIMPLEFINANCERPTDataTable(ds.Tables("SIMPLEFINANCERPT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SIMPLEFINANCERPT() As SIMPLEFINANCERPTDataTable
        Get
            Return Me.tableSIMPLEFINANCERPT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CSAccSimpleFinanceRptDataset = CType(MyBase.Clone,CSAccSimpleFinanceRptDataset)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SIMPLEFINANCERPT")) Is Nothing) Then
                MyBase.Tables.Add(New SIMPLEFINANCERPTDataTable(ds.Tables("SIMPLEFINANCERPT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSIMPLEFINANCERPT = CType(MyBase.Tables("SIMPLEFINANCERPT"),SIMPLEFINANCERPTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSIMPLEFINANCERPT) Is Nothing) Then
                Me.tableSIMPLEFINANCERPT.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CSAccSimpleFinanceRptDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CSAccSimpleFinanceRptDataset.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSIMPLEFINANCERPT = New SIMPLEFINANCERPTDataTable(false)
        MyBase.Tables.Add(Me.tableSIMPLEFINANCERPT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSIMPLEFINANCERPT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CSAccSimpleFinanceRptDataset = New CSAccSimpleFinanceRptDataset
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.SIMPLEFINANCERPT.DISPLAY_AMT1Column.Expression = "IIF(IS_DEBIT=0, AMT1 * -1, AMT1)"
        Me.SIMPLEFINANCERPT.DISPLAY_AMT2Column.Expression = "IIF(IS_DEBIT=0, AMT2 * -1, AMT2)"
        Me.SIMPLEFINANCERPT.GRP_AMT1Column.Expression = "IIF(GROUPNO=1, AMT1, AMT1 * -1)"
        Me.SIMPLEFINANCERPT.GRP_AMT2Column.Expression = "IIF(GROUPNO=1, AMT2, AMT2 * -1)"
    End Sub
    
    Public Delegate Sub SIMPLEFINANCERPTRowChangeEventHandler(ByVal sender As Object, ByVal e As SIMPLEFINANCERPTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SIMPLEFINANCERPTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIS_BS As Global.System.Data.DataColumn
        
        Private columnGROUPNO As Global.System.Data.DataColumn
        
        Private columnACC_TYPE As Global.System.Data.DataColumn
        
        Private columnTYPE_NAME As Global.System.Data.DataColumn
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_NAME As Global.System.Data.DataColumn
        
        Private columnRETAINED_EARNING As Global.System.Data.DataColumn
        
        Private columnIS_DEBIT As Global.System.Data.DataColumn
        
        Private columnAMT1 As Global.System.Data.DataColumn
        
        Private columnAMT2 As Global.System.Data.DataColumn
        
        Private columnDISPLAY_AMT1 As Global.System.Data.DataColumn
        
        Private columnDISPLAY_AMT2 As Global.System.Data.DataColumn
        
        Private columnGRP_AMT1 As Global.System.Data.DataColumn
        
        Private columnGRP_AMT2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "SIMPLEFINANCERPT"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_BSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_BS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUPNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGROUPNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TYPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RETAINED_EARNINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRETAINED_EARNING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DEBITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DEBIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISPLAY_AMT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISPLAY_AMT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISPLAY_AMT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISPLAY_AMT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRP_AMT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRP_AMT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRP_AMT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRP_AMT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SIMPLEFINANCERPTRow
            Get
                Return CType(Me.Rows(index),SIMPLEFINANCERPTRow)
            End Get
        End Property
        
        Public Event SIMPLEFINANCERPTRowChanging As SIMPLEFINANCERPTRowChangeEventHandler
        
        Public Event SIMPLEFINANCERPTRowChanged As SIMPLEFINANCERPTRowChangeEventHandler
        
        Public Event SIMPLEFINANCERPTRowDeleting As SIMPLEFINANCERPTRowChangeEventHandler
        
        Public Event SIMPLEFINANCERPTRowDeleted As SIMPLEFINANCERPTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSIMPLEFINANCERPTRow(ByVal row As SIMPLEFINANCERPTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSIMPLEFINANCERPTRow(ByVal IS_BS As Boolean, ByVal GROUPNO As Integer, ByVal ACC_TYPE As Byte, ByVal TYPE_NAME As String, ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal RETAINED_EARNING As Boolean, ByVal IS_DEBIT As Boolean, ByVal AMT1 As Decimal, ByVal AMT2 As Decimal, ByVal DISPLAY_AMT1 As Decimal, ByVal DISPLAY_AMT2 As Decimal, ByVal GRP_AMT1 As Decimal, ByVal GRP_AMT2 As Decimal) As SIMPLEFINANCERPTRow
            Dim rowSIMPLEFINANCERPTRow As SIMPLEFINANCERPTRow = CType(Me.NewRow,SIMPLEFINANCERPTRow)
            Dim columnValuesArray() As Object = New Object() {IS_BS, GROUPNO, ACC_TYPE, TYPE_NAME, ACC_CODE, ACC_NAME, RETAINED_EARNING, IS_DEBIT, AMT1, AMT2, DISPLAY_AMT1, DISPLAY_AMT2, GRP_AMT1, GRP_AMT2}
            rowSIMPLEFINANCERPTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSIMPLEFINANCERPTRow)
            Return rowSIMPLEFINANCERPTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSIMPLEFINANCERPTRow(ByVal IS_BS As Boolean, ByVal GROUPNO As Integer, ByVal ACC_TYPE As Byte, ByVal TYPE_NAME As String, ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal RETAINED_EARNING As Boolean, ByVal IS_DEBIT As Boolean, ByVal AMT1 As Decimal, ByVal AMT2 As Decimal) As SIMPLEFINANCERPTRow
            Dim rowSIMPLEFINANCERPTRow As SIMPLEFINANCERPTRow = CType(Me.NewRow,SIMPLEFINANCERPTRow)
            Dim columnValuesArray() As Object = New Object() {IS_BS, GROUPNO, ACC_TYPE, TYPE_NAME, ACC_CODE, ACC_NAME, RETAINED_EARNING, IS_DEBIT, AMT1, AMT2, Nothing, Nothing, Nothing, Nothing}
            rowSIMPLEFINANCERPTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSIMPLEFINANCERPTRow)
            Return rowSIMPLEFINANCERPTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SIMPLEFINANCERPTDataTable = CType(MyBase.Clone,SIMPLEFINANCERPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SIMPLEFINANCERPTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIS_BS = MyBase.Columns("IS_BS")
            Me.columnGROUPNO = MyBase.Columns("GROUPNO")
            Me.columnACC_TYPE = MyBase.Columns("ACC_TYPE")
            Me.columnTYPE_NAME = MyBase.Columns("TYPE_NAME")
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_NAME = MyBase.Columns("ACC_NAME")
            Me.columnRETAINED_EARNING = MyBase.Columns("RETAINED_EARNING")
            Me.columnIS_DEBIT = MyBase.Columns("IS_DEBIT")
            Me.columnAMT1 = MyBase.Columns("AMT1")
            Me.columnAMT2 = MyBase.Columns("AMT2")
            Me.columnDISPLAY_AMT1 = MyBase.Columns("DISPLAY_AMT1")
            Me.columnDISPLAY_AMT2 = MyBase.Columns("DISPLAY_AMT2")
            Me.columnGRP_AMT1 = MyBase.Columns("GRP_AMT1")
            Me.columnGRP_AMT2 = MyBase.Columns("GRP_AMT2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIS_BS = New Global.System.Data.DataColumn("IS_BS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_BS)
            Me.columnGROUPNO = New Global.System.Data.DataColumn("GROUPNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUPNO)
            Me.columnACC_TYPE = New Global.System.Data.DataColumn("ACC_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_TYPE)
            Me.columnTYPE_NAME = New Global.System.Data.DataColumn("TYPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYPE_NAME)
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_NAME = New Global.System.Data.DataColumn("ACC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_NAME)
            Me.columnRETAINED_EARNING = New Global.System.Data.DataColumn("RETAINED_EARNING", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRETAINED_EARNING)
            Me.columnIS_DEBIT = New Global.System.Data.DataColumn("IS_DEBIT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DEBIT)
            Me.columnAMT1 = New Global.System.Data.DataColumn("AMT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMT1)
            Me.columnAMT2 = New Global.System.Data.DataColumn("AMT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMT2)
            Me.columnDISPLAY_AMT1 = New Global.System.Data.DataColumn("DISPLAY_AMT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISPLAY_AMT1)
            Me.columnDISPLAY_AMT2 = New Global.System.Data.DataColumn("DISPLAY_AMT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISPLAY_AMT2)
            Me.columnGRP_AMT1 = New Global.System.Data.DataColumn("GRP_AMT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRP_AMT1)
            Me.columnGRP_AMT2 = New Global.System.Data.DataColumn("GRP_AMT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRP_AMT2)
            Me.columnTYPE_NAME.MaxLength = 20
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_NAME.MaxLength = 75
            Me.columnDISPLAY_AMT1.ReadOnly = true
            Me.columnDISPLAY_AMT2.ReadOnly = true
            Me.columnGRP_AMT1.ReadOnly = true
            Me.columnGRP_AMT2.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSIMPLEFINANCERPTRow() As SIMPLEFINANCERPTRow
            Return CType(Me.NewRow,SIMPLEFINANCERPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SIMPLEFINANCERPTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SIMPLEFINANCERPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.DISPLAY_AMT1Column.Expression = "IIF(IS_DEBIT=0, AMT1 * -1, AMT1)"
            Me.DISPLAY_AMT2Column.Expression = "IIF(IS_DEBIT=0, AMT2 * -1, AMT2)"
            Me.GRP_AMT1Column.Expression = "IIF(GROUPNO=1, AMT1, AMT1 * -1)"
            Me.GRP_AMT2Column.Expression = "IIF(GROUPNO=1, AMT2, AMT2 * -1)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SIMPLEFINANCERPTRowChangedEvent) Is Nothing) Then
                RaiseEvent SIMPLEFINANCERPTRowChanged(Me, New SIMPLEFINANCERPTRowChangeEvent(CType(e.Row,SIMPLEFINANCERPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SIMPLEFINANCERPTRowChangingEvent) Is Nothing) Then
                RaiseEvent SIMPLEFINANCERPTRowChanging(Me, New SIMPLEFINANCERPTRowChangeEvent(CType(e.Row,SIMPLEFINANCERPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SIMPLEFINANCERPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SIMPLEFINANCERPTRowDeleted(Me, New SIMPLEFINANCERPTRowChangeEvent(CType(e.Row,SIMPLEFINANCERPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SIMPLEFINANCERPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SIMPLEFINANCERPTRowDeleting(Me, New SIMPLEFINANCERPTRowChangeEvent(CType(e.Row,SIMPLEFINANCERPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSIMPLEFINANCERPTRow(ByVal row As SIMPLEFINANCERPTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSAccSimpleFinanceRptDataset = New CSAccSimpleFinanceRptDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SIMPLEFINANCERPTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SIMPLEFINANCERPTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSIMPLEFINANCERPT As SIMPLEFINANCERPTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSIMPLEFINANCERPT = CType(Me.Table,SIMPLEFINANCERPTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_BS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.IS_BSColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_BS' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.IS_BSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUPNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.GROUPNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GROUPNO' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.GROUPNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.ACC_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_TYPE' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.ACC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TYPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.TYPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TYPE_NAME' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.TYPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.ACC_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_CODE' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.ACC_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_NAME' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.ACC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RETAINED_EARNING() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.RETAINED_EARNINGColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RETAINED_EARNING' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.RETAINED_EARNINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DEBIT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.IS_DEBITColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DEBIT' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.IS_DEBITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.AMT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMT1' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.AMT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.AMT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMT2' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.AMT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISPLAY_AMT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISPLAY_AMT1' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISPLAY_AMT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISPLAY_AMT2' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRP_AMT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.GRP_AMT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRP_AMT1' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.GRP_AMT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRP_AMT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSIMPLEFINANCERPT.GRP_AMT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRP_AMT2' in table 'SIMPLEFINANCERPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIMPLEFINANCERPT.GRP_AMT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_BSNull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.IS_BSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_BSNull()
            Me(Me.tableSIMPLEFINANCERPT.IS_BSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUPNONull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.GROUPNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUPNONull()
            Me(Me.tableSIMPLEFINANCERPT.GROUPNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_TYPENull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.ACC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_TYPENull()
            Me(Me.tableSIMPLEFINANCERPT.ACC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTYPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.TYPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTYPE_NAMENull()
            Me(Me.tableSIMPLEFINANCERPT.TYPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_CODENull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.ACC_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_CODENull()
            Me(Me.tableSIMPLEFINANCERPT.ACC_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.ACC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_NAMENull()
            Me(Me.tableSIMPLEFINANCERPT.ACC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRETAINED_EARNINGNull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.RETAINED_EARNINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRETAINED_EARNINGNull()
            Me(Me.tableSIMPLEFINANCERPT.RETAINED_EARNINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DEBITNull() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.IS_DEBITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DEBITNull()
            Me(Me.tableSIMPLEFINANCERPT.IS_DEBITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMT1Null() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.AMT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMT1Null()
            Me(Me.tableSIMPLEFINANCERPT.AMT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMT2Null() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.AMT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMT2Null()
            Me(Me.tableSIMPLEFINANCERPT.AMT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISPLAY_AMT1Null() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISPLAY_AMT1Null()
            Me(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISPLAY_AMT2Null() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISPLAY_AMT2Null()
            Me(Me.tableSIMPLEFINANCERPT.DISPLAY_AMT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRP_AMT1Null() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.GRP_AMT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRP_AMT1Null()
            Me(Me.tableSIMPLEFINANCERPT.GRP_AMT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRP_AMT2Null() As Boolean
            Return Me.IsNull(Me.tableSIMPLEFINANCERPT.GRP_AMT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRP_AMT2Null()
            Me(Me.tableSIMPLEFINANCERPT.GRP_AMT2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SIMPLEFINANCERPTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SIMPLEFINANCERPTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SIMPLEFINANCERPTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SIMPLEFINANCERPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CSAccSimpleFinanceRptDatasetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SIMPLEFINANCERPTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SIMPLEFINANCERPT"
            tableMapping.ColumnMappings.Add("IS_BS", "IS_BS")
            tableMapping.ColumnMappings.Add("GROUPNO", "GROUPNO")
            tableMapping.ColumnMappings.Add("ACC_TYPE", "ACC_TYPE")
            tableMapping.ColumnMappings.Add("TYPE_NAME", "TYPE_NAME")
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_NAME", "ACC_NAME")
            tableMapping.ColumnMappings.Add("RETAINED_EARNING", "RETAINED_EARNING")
            tableMapping.ColumnMappings.Add("IS_DEBIT", "IS_DEBIT")
            tableMapping.ColumnMappings.Add("AMT1", "AMT1")
            tableMapping.ColumnMappings.Add("AMT2", "AMT2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.SIMPLEFINANCERPT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MONTH1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MONTH2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSAccSimpleFinanceRptDataset.SIMPLEFINANCERPTDataTable, ByVal YEAR1 As Global.System.Nullable(Of Integer), ByVal MONTH1 As Global.System.Nullable(Of Integer), ByVal YEAR2 As Global.System.Nullable(Of Integer), ByVal MONTH2 As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (YEAR1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(YEAR1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MONTH1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MONTH1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (YEAR2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(YEAR2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MONTH2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MONTH2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal YEAR1 As Global.System.Nullable(Of Integer), ByVal MONTH1 As Global.System.Nullable(Of Integer), ByVal YEAR2 As Global.System.Nullable(Of Integer), ByVal MONTH2 As Global.System.Nullable(Of Integer)) As CSAccSimpleFinanceRptDataset.SIMPLEFINANCERPTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (YEAR1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(YEAR1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MONTH1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MONTH1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (YEAR2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(YEAR2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MONTH2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MONTH2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CSAccSimpleFinanceRptDataset.SIMPLEFINANCERPTDataTable = New CSAccSimpleFinanceRptDataset.SIMPLEFINANCERPTDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
