'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1434
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CSGLDataset"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CSGLDataset
    Inherits Global.System.Data.DataSet
    
    Private tableMST_ACCOUNT As MST_ACCOUNTDataTable
    
    Private tableTRN_GNLJNL As TRN_GNLJNLDataTable
    
    Private tableTRN_GNLJNLD As TRN_GNLJNLDDataTable
    
    Private tableSYS_ACCTYPE As SYS_ACCTYPEDataTable
    
    Private tableTRN_ACCHISTORY As TRN_ACCHISTORYDataTable
    
    Private tableTRN_ACCPERIOD As TRN_ACCPERIODDataTable
    
    Private tableMST_CURRENCY As MST_CURRENCYDataTable
    
    Private relationFK_TRN_GNLJNLD_ACC_CODE As Global.System.Data.DataRelation
    
    Private relationFK_TRN_ACCPERIOD_ACC_CODE As Global.System.Data.DataRelation
    
    Private relationFK_TRN_GNLJNLD_GNLJNLNO As Global.System.Data.DataRelation
    
    Private relationFK_TRN_GNLJNL_MST_CURRENCY As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MST_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCOUNTDataTable(ds.Tables("MST_ACCOUNT")))
            End If
            If (Not (ds.Tables("TRN_GNLJNL")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_GNLJNLDataTable(ds.Tables("TRN_GNLJNL")))
            End If
            If (Not (ds.Tables("TRN_GNLJNLD")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_GNLJNLDDataTable(ds.Tables("TRN_GNLJNLD")))
            End If
            If (Not (ds.Tables("SYS_ACCTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_ACCTYPEDataTable(ds.Tables("SYS_ACCTYPE")))
            End If
            If (Not (ds.Tables("TRN_ACCHISTORY")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_ACCHISTORYDataTable(ds.Tables("TRN_ACCHISTORY")))
            End If
            If (Not (ds.Tables("TRN_ACCPERIOD")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_ACCPERIODDataTable(ds.Tables("TRN_ACCPERIOD")))
            End If
            If (Not (ds.Tables("MST_CURRENCY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CURRENCYDataTable(ds.Tables("MST_CURRENCY")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_ACCOUNT() As MST_ACCOUNTDataTable
        Get
            Return Me.tableMST_ACCOUNT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRN_GNLJNL() As TRN_GNLJNLDataTable
        Get
            Return Me.tableTRN_GNLJNL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRN_GNLJNLD() As TRN_GNLJNLDDataTable
        Get
            Return Me.tableTRN_GNLJNLD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYS_ACCTYPE() As SYS_ACCTYPEDataTable
        Get
            Return Me.tableSYS_ACCTYPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRN_ACCHISTORY() As TRN_ACCHISTORYDataTable
        Get
            Return Me.tableTRN_ACCHISTORY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRN_ACCPERIOD() As TRN_ACCPERIODDataTable
        Get
            Return Me.tableTRN_ACCPERIOD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_CURRENCY() As MST_CURRENCYDataTable
        Get
            Return Me.tableMST_CURRENCY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CSGLDataset = CType(MyBase.Clone,CSGLDataset)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MST_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCOUNTDataTable(ds.Tables("MST_ACCOUNT")))
            End If
            If (Not (ds.Tables("TRN_GNLJNL")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_GNLJNLDataTable(ds.Tables("TRN_GNLJNL")))
            End If
            If (Not (ds.Tables("TRN_GNLJNLD")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_GNLJNLDDataTable(ds.Tables("TRN_GNLJNLD")))
            End If
            If (Not (ds.Tables("SYS_ACCTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_ACCTYPEDataTable(ds.Tables("SYS_ACCTYPE")))
            End If
            If (Not (ds.Tables("TRN_ACCHISTORY")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_ACCHISTORYDataTable(ds.Tables("TRN_ACCHISTORY")))
            End If
            If (Not (ds.Tables("TRN_ACCPERIOD")) Is Nothing) Then
                MyBase.Tables.Add(New TRN_ACCPERIODDataTable(ds.Tables("TRN_ACCPERIOD")))
            End If
            If (Not (ds.Tables("MST_CURRENCY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CURRENCYDataTable(ds.Tables("MST_CURRENCY")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMST_ACCOUNT = CType(MyBase.Tables("MST_ACCOUNT"),MST_ACCOUNTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_ACCOUNT) Is Nothing) Then
                Me.tableMST_ACCOUNT.InitVars
            End If
        End If
        Me.tableTRN_GNLJNL = CType(MyBase.Tables("TRN_GNLJNL"),TRN_GNLJNLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRN_GNLJNL) Is Nothing) Then
                Me.tableTRN_GNLJNL.InitVars
            End If
        End If
        Me.tableTRN_GNLJNLD = CType(MyBase.Tables("TRN_GNLJNLD"),TRN_GNLJNLDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRN_GNLJNLD) Is Nothing) Then
                Me.tableTRN_GNLJNLD.InitVars
            End If
        End If
        Me.tableSYS_ACCTYPE = CType(MyBase.Tables("SYS_ACCTYPE"),SYS_ACCTYPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYS_ACCTYPE) Is Nothing) Then
                Me.tableSYS_ACCTYPE.InitVars
            End If
        End If
        Me.tableTRN_ACCHISTORY = CType(MyBase.Tables("TRN_ACCHISTORY"),TRN_ACCHISTORYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRN_ACCHISTORY) Is Nothing) Then
                Me.tableTRN_ACCHISTORY.InitVars
            End If
        End If
        Me.tableTRN_ACCPERIOD = CType(MyBase.Tables("TRN_ACCPERIOD"),TRN_ACCPERIODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRN_ACCPERIOD) Is Nothing) Then
                Me.tableTRN_ACCPERIOD.InitVars
            End If
        End If
        Me.tableMST_CURRENCY = CType(MyBase.Tables("MST_CURRENCY"),MST_CURRENCYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_CURRENCY) Is Nothing) Then
                Me.tableMST_CURRENCY.InitVars
            End If
        End If
        Me.relationFK_TRN_GNLJNLD_ACC_CODE = Me.Relations("FK_TRN_GNLJNLD_ACC_CODE")
        Me.relationFK_TRN_ACCPERIOD_ACC_CODE = Me.Relations("FK_TRN_ACCPERIOD_ACC_CODE")
        Me.relationFK_TRN_GNLJNLD_GNLJNLNO = Me.Relations("FK_TRN_GNLJNLD_GNLJNLNO")
        Me.relationFK_TRN_GNLJNL_MST_CURRENCY = Me.Relations("FK_TRN_GNLJNL_MST_CURRENCY")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CSGLDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CSGLDataset.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMST_ACCOUNT = New MST_ACCOUNTDataTable
        MyBase.Tables.Add(Me.tableMST_ACCOUNT)
        Me.tableTRN_GNLJNL = New TRN_GNLJNLDataTable(false)
        MyBase.Tables.Add(Me.tableTRN_GNLJNL)
        Me.tableTRN_GNLJNLD = New TRN_GNLJNLDDataTable(false)
        MyBase.Tables.Add(Me.tableTRN_GNLJNLD)
        Me.tableSYS_ACCTYPE = New SYS_ACCTYPEDataTable
        MyBase.Tables.Add(Me.tableSYS_ACCTYPE)
        Me.tableTRN_ACCHISTORY = New TRN_ACCHISTORYDataTable
        MyBase.Tables.Add(Me.tableTRN_ACCHISTORY)
        Me.tableTRN_ACCPERIOD = New TRN_ACCPERIODDataTable
        MyBase.Tables.Add(Me.tableTRN_ACCPERIOD)
        Me.tableMST_CURRENCY = New MST_CURRENCYDataTable
        MyBase.Tables.Add(Me.tableMST_CURRENCY)
        Me.relationFK_TRN_GNLJNLD_ACC_CODE = New Global.System.Data.DataRelation("FK_TRN_GNLJNLD_ACC_CODE", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableTRN_GNLJNLD.ACC_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_TRN_GNLJNLD_ACC_CODE)
        Me.relationFK_TRN_ACCPERIOD_ACC_CODE = New Global.System.Data.DataRelation("FK_TRN_ACCPERIOD_ACC_CODE", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableTRN_ACCPERIOD.ACC_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_TRN_ACCPERIOD_ACC_CODE)
        Me.relationFK_TRN_GNLJNLD_GNLJNLNO = New Global.System.Data.DataRelation("FK_TRN_GNLJNLD_GNLJNLNO", New Global.System.Data.DataColumn() {Me.tableTRN_GNLJNL.GNLJNLNOColumn}, New Global.System.Data.DataColumn() {Me.tableTRN_GNLJNLD.GNLJNLNOColumn}, false)
        Me.Relations.Add(Me.relationFK_TRN_GNLJNLD_GNLJNLNO)
        Me.relationFK_TRN_GNLJNL_MST_CURRENCY = New Global.System.Data.DataRelation("FK_TRN_GNLJNL_MST_CURRENCY", New Global.System.Data.DataColumn() {Me.tableMST_CURRENCY.CURR_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableTRN_GNLJNL.CURR_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_TRN_GNLJNL_MST_CURRENCY)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_ACCOUNT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRN_GNLJNL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRN_GNLJNLD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYS_ACCTYPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRN_ACCHISTORY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRN_ACCPERIOD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_CURRENCY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CSGLDataset = New CSGLDataset
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.TRN_GNLJNL.TOTAL_DEBITColumn.Expression = "SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLNO).ACC_DEBIT)"
        Me.TRN_GNLJNL.TOTAL_CREDITColumn.Expression = "SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLNO).ACC_CREDIT)"
        Me.TRN_GNLJNL.TOTAL_DIFFColumn.Expression = "SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLNO).ACC_CREDIT) - SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLN"& _ 
            "O).ACC_DEBIT)"
        Me.TRN_GNLJNLD.ACC_DEBITColumn.Expression = "IIF(ACC_AMT > 0, ACC_AMT, 0)"
        Me.TRN_GNLJNLD.ACC_CREDITColumn.Expression = "IIF(ACC_AMT <  0, ACC_AMT * -1, 0)"
    End Sub
    
    Public Delegate Sub MST_ACCOUNTRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_ACCOUNTRowChangeEvent)
    
    Public Delegate Sub TRN_GNLJNLRowChangeEventHandler(ByVal sender As Object, ByVal e As TRN_GNLJNLRowChangeEvent)
    
    Public Delegate Sub TRN_GNLJNLDRowChangeEventHandler(ByVal sender As Object, ByVal e As TRN_GNLJNLDRowChangeEvent)
    
    Public Delegate Sub SYS_ACCTYPERowChangeEventHandler(ByVal sender As Object, ByVal e As SYS_ACCTYPERowChangeEvent)
    
    Public Delegate Sub TRN_ACCHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As TRN_ACCHISTORYRowChangeEvent)
    
    Public Delegate Sub TRN_ACCPERIODRowChangeEventHandler(ByVal sender As Object, ByVal e As TRN_ACCPERIODRowChangeEvent)
    
    Public Delegate Sub MST_CURRENCYRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_CURRENCYRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_ACCOUNTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_NAME As Global.System.Data.DataColumn
        
        Private columnACC_TYPE As Global.System.Data.DataColumn
        
        Private columnRETAINED_EARNINGS As Global.System.Data.DataColumn
        
        Private columnIS_ACTIVE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_ACCOUNT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RETAINED_EARNINGSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRETAINED_EARNINGS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_ACTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_ACTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_ACCOUNTRow
            Get
                Return CType(Me.Rows(index),MST_ACCOUNTRow)
            End Get
        End Property
        
        Public Event MST_ACCOUNTRowChanging As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowChanged As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowDeleting As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowDeleted As MST_ACCOUNTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_ACCOUNTRow(ByVal row As MST_ACCOUNTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCOUNTRow(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Byte, ByVal RETAINED_EARNINGS As Boolean, ByVal IS_ACTIVE As Boolean) As MST_ACCOUNTRow
            Dim rowMST_ACCOUNTRow As MST_ACCOUNTRow = CType(Me.NewRow,MST_ACCOUNTRow)
            Dim columnValuesArray() As Object = New Object() {ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE}
            rowMST_ACCOUNTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCOUNTRow)
            Return rowMST_ACCOUNTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACC_CODE(ByVal ACC_CODE As String) As MST_ACCOUNTRow
            Return CType(Me.Rows.Find(New Object() {ACC_CODE}),MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_ACCOUNTDataTable = CType(MyBase.Clone,MST_ACCOUNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_ACCOUNTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_NAME = MyBase.Columns("ACC_NAME")
            Me.columnACC_TYPE = MyBase.Columns("ACC_TYPE")
            Me.columnRETAINED_EARNINGS = MyBase.Columns("RETAINED_EARNINGS")
            Me.columnIS_ACTIVE = MyBase.Columns("IS_ACTIVE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_NAME = New Global.System.Data.DataColumn("ACC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_NAME)
            Me.columnACC_TYPE = New Global.System.Data.DataColumn("ACC_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_TYPE)
            Me.columnRETAINED_EARNINGS = New Global.System.Data.DataColumn("RETAINED_EARNINGS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRETAINED_EARNINGS)
            Me.columnIS_ACTIVE = New Global.System.Data.DataColumn("IS_ACTIVE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_ACTIVE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACC_CODE}, true))
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.Unique = true
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_NAME.MaxLength = 75
            Me.columnACC_TYPE.DefaultValue = CType(1,Byte)
            Me.columnRETAINED_EARNINGS.DefaultValue = CType(false,Boolean)
            Me.columnIS_ACTIVE.DefaultValue = CType(true,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_ACCOUNTRow() As MST_ACCOUNTRow
            Return CType(Me.NewRow,MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_ACCOUNTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_ACCOUNTRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowChanged(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_ACCOUNTRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowChanging(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_ACCOUNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowDeleted(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_ACCOUNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowDeleting(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_ACCOUNTRow(ByVal row As MST_ACCOUNTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSGLDataset = New CSGLDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_ACCOUNTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRN_GNLJNLDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGNLJNLNO As Global.System.Data.DataColumn
        
        Private columnJNL_DESC As Global.System.Data.DataColumn
        
        Private columnJNL_DATE As Global.System.Data.DataColumn
        
        Private columnJNL_AMT As Global.System.Data.DataColumn
        
        Private columnACC_YEAR As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD As Global.System.Data.DataColumn
        
        Private columnCURR_CODE As Global.System.Data.DataColumn
        
        Private columnCURR_RATE As Global.System.Data.DataColumn
        
        Private columnTOTAL_DEBIT As Global.System.Data.DataColumn
        
        Private columnTOTAL_CREDIT As Global.System.Data.DataColumn
        
        Private columnTOTAL_DIFF As Global.System.Data.DataColumn
        
        Private columnJNL_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "TRN_GNLJNL"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GNLJNLNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGNLJNLNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JNL_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJNL_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JNL_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJNL_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JNL_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJNL_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_DEBITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_DEBIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_CREDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_CREDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_DIFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_DIFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JNL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJNL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRN_GNLJNLRow
            Get
                Return CType(Me.Rows(index),TRN_GNLJNLRow)
            End Get
        End Property
        
        Public Event TRN_GNLJNLRowChanging As TRN_GNLJNLRowChangeEventHandler
        
        Public Event TRN_GNLJNLRowChanged As TRN_GNLJNLRowChangeEventHandler
        
        Public Event TRN_GNLJNLRowDeleting As TRN_GNLJNLRowChangeEventHandler
        
        Public Event TRN_GNLJNLRowDeleted As TRN_GNLJNLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRN_GNLJNLRow(ByVal row As TRN_GNLJNLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_GNLJNLRow(ByVal GNLJNLNO As Integer, ByVal JNL_DESC As String, ByVal JNL_DATE As Date, ByVal JNL_AMT As Decimal, ByVal ACC_YEAR As Short, ByVal ACC_PERIOD As Byte, ByVal parentMST_CURRENCYRowByFK_TRN_GNLJNL_MST_CURRENCY As MST_CURRENCYRow, ByVal CURR_RATE As Decimal, ByVal TOTAL_DEBIT As Decimal, ByVal TOTAL_CREDIT As Decimal, ByVal TOTAL_DIFF As Decimal, ByVal JNL_CODE As String) As TRN_GNLJNLRow
            Dim rowTRN_GNLJNLRow As TRN_GNLJNLRow = CType(Me.NewRow,TRN_GNLJNLRow)
            Dim columnValuesArray() As Object = New Object() {GNLJNLNO, JNL_DESC, JNL_DATE, JNL_AMT, ACC_YEAR, ACC_PERIOD, Nothing, CURR_RATE, TOTAL_DEBIT, TOTAL_CREDIT, TOTAL_DIFF, JNL_CODE}
            If (Not (parentMST_CURRENCYRowByFK_TRN_GNLJNL_MST_CURRENCY) Is Nothing) Then
                columnValuesArray(6) = parentMST_CURRENCYRowByFK_TRN_GNLJNL_MST_CURRENCY(0)
            End If
            rowTRN_GNLJNLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_GNLJNLRow)
            Return rowTRN_GNLJNLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_GNLJNLRow(ByVal GNLJNLNO As Integer, ByVal JNL_DESC As String, ByVal JNL_DATE As Date, ByVal JNL_AMT As Decimal, ByVal ACC_YEAR As Short, ByVal ACC_PERIOD As Byte, ByVal parentMST_CURRENCYRowByFK_TRN_GNLJNL_MST_CURRENCY As MST_CURRENCYRow, ByVal CURR_RATE As Decimal, ByVal JNL_CODE As String) As TRN_GNLJNLRow
            Dim rowTRN_GNLJNLRow As TRN_GNLJNLRow = CType(Me.NewRow,TRN_GNLJNLRow)
            Dim columnValuesArray() As Object = New Object() {GNLJNLNO, JNL_DESC, JNL_DATE, JNL_AMT, ACC_YEAR, ACC_PERIOD, Nothing, CURR_RATE, Nothing, Nothing, Nothing, JNL_CODE}
            If (Not (parentMST_CURRENCYRowByFK_TRN_GNLJNL_MST_CURRENCY) Is Nothing) Then
                columnValuesArray(6) = parentMST_CURRENCYRowByFK_TRN_GNLJNL_MST_CURRENCY(0)
            End If
            rowTRN_GNLJNLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_GNLJNLRow)
            Return rowTRN_GNLJNLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGNLJNLNO(ByVal GNLJNLNO As Integer) As TRN_GNLJNLRow
            Return CType(Me.Rows.Find(New Object() {GNLJNLNO}),TRN_GNLJNLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRN_GNLJNLDataTable = CType(MyBase.Clone,TRN_GNLJNLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRN_GNLJNLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGNLJNLNO = MyBase.Columns("GNLJNLNO")
            Me.columnJNL_DESC = MyBase.Columns("JNL_DESC")
            Me.columnJNL_DATE = MyBase.Columns("JNL_DATE")
            Me.columnJNL_AMT = MyBase.Columns("JNL_AMT")
            Me.columnACC_YEAR = MyBase.Columns("ACC_YEAR")
            Me.columnACC_PERIOD = MyBase.Columns("ACC_PERIOD")
            Me.columnCURR_CODE = MyBase.Columns("CURR_CODE")
            Me.columnCURR_RATE = MyBase.Columns("CURR_RATE")
            Me.columnTOTAL_DEBIT = MyBase.Columns("TOTAL_DEBIT")
            Me.columnTOTAL_CREDIT = MyBase.Columns("TOTAL_CREDIT")
            Me.columnTOTAL_DIFF = MyBase.Columns("TOTAL_DIFF")
            Me.columnJNL_CODE = MyBase.Columns("JNL_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGNLJNLNO = New Global.System.Data.DataColumn("GNLJNLNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGNLJNLNO)
            Me.columnJNL_DESC = New Global.System.Data.DataColumn("JNL_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJNL_DESC)
            Me.columnJNL_DATE = New Global.System.Data.DataColumn("JNL_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJNL_DATE)
            Me.columnJNL_AMT = New Global.System.Data.DataColumn("JNL_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJNL_AMT)
            Me.columnACC_YEAR = New Global.System.Data.DataColumn("ACC_YEAR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_YEAR)
            Me.columnACC_PERIOD = New Global.System.Data.DataColumn("ACC_PERIOD", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD)
            Me.columnCURR_CODE = New Global.System.Data.DataColumn("CURR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_CODE)
            Me.columnCURR_RATE = New Global.System.Data.DataColumn("CURR_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_RATE)
            Me.columnTOTAL_DEBIT = New Global.System.Data.DataColumn("TOTAL_DEBIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_DEBIT)
            Me.columnTOTAL_CREDIT = New Global.System.Data.DataColumn("TOTAL_CREDIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_CREDIT)
            Me.columnTOTAL_DIFF = New Global.System.Data.DataColumn("TOTAL_DIFF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_DIFF)
            Me.columnJNL_CODE = New Global.System.Data.DataColumn("JNL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJNL_CODE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGNLJNLNO}, true))
            Me.columnGNLJNLNO.AllowDBNull = false
            Me.columnGNLJNLNO.Unique = true
            Me.columnJNL_DESC.MaxLength = 150
            Me.columnJNL_DATE.AllowDBNull = false
            Me.columnJNL_AMT.AllowDBNull = false
            Me.columnJNL_AMT.DefaultValue = CType(0,Decimal)
            Me.columnACC_YEAR.AllowDBNull = false
            Me.columnACC_PERIOD.AllowDBNull = false
            Me.columnCURR_CODE.AllowDBNull = false
            Me.columnCURR_CODE.MaxLength = 10
            Me.columnCURR_RATE.AllowDBNull = false
            Me.columnTOTAL_DEBIT.ReadOnly = true
            Me.columnTOTAL_CREDIT.ReadOnly = true
            Me.columnTOTAL_DIFF.ReadOnly = true
            Me.columnJNL_CODE.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRN_GNLJNLRow() As TRN_GNLJNLRow
            Return CType(Me.NewRow,TRN_GNLJNLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRN_GNLJNLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRN_GNLJNLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.TOTAL_DEBITColumn.Expression = "SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLNO).ACC_DEBIT)"
            Me.TOTAL_CREDITColumn.Expression = "SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLNO).ACC_CREDIT)"
            Me.TOTAL_DIFFColumn.Expression = "SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLNO).ACC_CREDIT) - SUM(CHILD(FK_TRN_GNLJNLD_GNLJNLN"& _ 
                "O).ACC_DEBIT)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRN_GNLJNLRowChangedEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLRowChanged(Me, New TRN_GNLJNLRowChangeEvent(CType(e.Row,TRN_GNLJNLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRN_GNLJNLRowChangingEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLRowChanging(Me, New TRN_GNLJNLRowChangeEvent(CType(e.Row,TRN_GNLJNLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRN_GNLJNLRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLRowDeleted(Me, New TRN_GNLJNLRowChangeEvent(CType(e.Row,TRN_GNLJNLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRN_GNLJNLRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLRowDeleting(Me, New TRN_GNLJNLRowChangeEvent(CType(e.Row,TRN_GNLJNLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRN_GNLJNLRow(ByVal row As TRN_GNLJNLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSGLDataset = New CSGLDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRN_GNLJNLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRN_GNLJNLDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGNLJNLDNO As Global.System.Data.DataColumn
        
        Private columnGNLJNLNO As Global.System.Data.DataColumn
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_MEMO As Global.System.Data.DataColumn
        
        Private columnACC_AMT As Global.System.Data.DataColumn
        
        Private columnACC_DEBIT As Global.System.Data.DataColumn
        
        Private columnACC_CREDIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "TRN_GNLJNLD"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GNLJNLDNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGNLJNLDNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GNLJNLNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGNLJNLNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_MEMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_MEMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_DEBITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_DEBIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CREDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CREDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRN_GNLJNLDRow
            Get
                Return CType(Me.Rows(index),TRN_GNLJNLDRow)
            End Get
        End Property
        
        Public Event TRN_GNLJNLDRowChanging As TRN_GNLJNLDRowChangeEventHandler
        
        Public Event TRN_GNLJNLDRowChanged As TRN_GNLJNLDRowChangeEventHandler
        
        Public Event TRN_GNLJNLDRowDeleting As TRN_GNLJNLDRowChangeEventHandler
        
        Public Event TRN_GNLJNLDRowDeleted As TRN_GNLJNLDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRN_GNLJNLDRow(ByVal row As TRN_GNLJNLDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_GNLJNLDRow(ByVal GNLJNLDNO As Integer, ByVal parentTRN_GNLJNLRowByFK_TRN_GNLJNLD_GNLJNLNO As TRN_GNLJNLRow, ByVal parentMST_ACCOUNTRowByFK_TRN_GNLJNLD_ACC_CODE As MST_ACCOUNTRow, ByVal ACC_MEMO As String, ByVal ACC_AMT As Decimal, ByVal ACC_DEBIT As Decimal, ByVal ACC_CREDIT As Decimal) As TRN_GNLJNLDRow
            Dim rowTRN_GNLJNLDRow As TRN_GNLJNLDRow = CType(Me.NewRow,TRN_GNLJNLDRow)
            Dim columnValuesArray() As Object = New Object() {GNLJNLDNO, Nothing, Nothing, ACC_MEMO, ACC_AMT, ACC_DEBIT, ACC_CREDIT}
            If (Not (parentTRN_GNLJNLRowByFK_TRN_GNLJNLD_GNLJNLNO) Is Nothing) Then
                columnValuesArray(1) = parentTRN_GNLJNLRowByFK_TRN_GNLJNLD_GNLJNLNO(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_TRN_GNLJNLD_ACC_CODE) Is Nothing) Then
                columnValuesArray(2) = parentMST_ACCOUNTRowByFK_TRN_GNLJNLD_ACC_CODE(0)
            End If
            rowTRN_GNLJNLDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_GNLJNLDRow)
            Return rowTRN_GNLJNLDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_GNLJNLDRow(ByVal GNLJNLDNO As Integer, ByVal parentTRN_GNLJNLRowByFK_TRN_GNLJNLD_GNLJNLNO As TRN_GNLJNLRow, ByVal parentMST_ACCOUNTRowByFK_TRN_GNLJNLD_ACC_CODE As MST_ACCOUNTRow, ByVal ACC_MEMO As String, ByVal ACC_AMT As Decimal) As TRN_GNLJNLDRow
            Dim rowTRN_GNLJNLDRow As TRN_GNLJNLDRow = CType(Me.NewRow,TRN_GNLJNLDRow)
            Dim columnValuesArray() As Object = New Object() {GNLJNLDNO, Nothing, Nothing, ACC_MEMO, ACC_AMT, Nothing, Nothing}
            If (Not (parentTRN_GNLJNLRowByFK_TRN_GNLJNLD_GNLJNLNO) Is Nothing) Then
                columnValuesArray(1) = parentTRN_GNLJNLRowByFK_TRN_GNLJNLD_GNLJNLNO(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_TRN_GNLJNLD_ACC_CODE) Is Nothing) Then
                columnValuesArray(2) = parentMST_ACCOUNTRowByFK_TRN_GNLJNLD_ACC_CODE(0)
            End If
            rowTRN_GNLJNLDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_GNLJNLDRow)
            Return rowTRN_GNLJNLDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGNLJNLDNO(ByVal GNLJNLDNO As Integer) As TRN_GNLJNLDRow
            Return CType(Me.Rows.Find(New Object() {GNLJNLDNO}),TRN_GNLJNLDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRN_GNLJNLDDataTable = CType(MyBase.Clone,TRN_GNLJNLDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRN_GNLJNLDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGNLJNLDNO = MyBase.Columns("GNLJNLDNO")
            Me.columnGNLJNLNO = MyBase.Columns("GNLJNLNO")
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_MEMO = MyBase.Columns("ACC_MEMO")
            Me.columnACC_AMT = MyBase.Columns("ACC_AMT")
            Me.columnACC_DEBIT = MyBase.Columns("ACC_DEBIT")
            Me.columnACC_CREDIT = MyBase.Columns("ACC_CREDIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGNLJNLDNO = New Global.System.Data.DataColumn("GNLJNLDNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGNLJNLDNO)
            Me.columnGNLJNLNO = New Global.System.Data.DataColumn("GNLJNLNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGNLJNLNO)
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_MEMO = New Global.System.Data.DataColumn("ACC_MEMO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_MEMO)
            Me.columnACC_AMT = New Global.System.Data.DataColumn("ACC_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_AMT)
            Me.columnACC_DEBIT = New Global.System.Data.DataColumn("ACC_DEBIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_DEBIT)
            Me.columnACC_CREDIT = New Global.System.Data.DataColumn("ACC_CREDIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CREDIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGNLJNLDNO}, true))
            Me.columnGNLJNLDNO.AllowDBNull = false
            Me.columnGNLJNLDNO.Unique = true
            Me.columnGNLJNLNO.AllowDBNull = false
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_MEMO.MaxLength = 150
            Me.columnACC_AMT.AllowDBNull = false
            Me.columnACC_AMT.DefaultValue = CType(0,Decimal)
            Me.columnACC_DEBIT.ReadOnly = true
            Me.columnACC_DEBIT.DefaultValue = CType(0,Decimal)
            Me.columnACC_CREDIT.ReadOnly = true
            Me.columnACC_CREDIT.DefaultValue = CType(0,Decimal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRN_GNLJNLDRow() As TRN_GNLJNLDRow
            Return CType(Me.NewRow,TRN_GNLJNLDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRN_GNLJNLDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRN_GNLJNLDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.ACC_DEBITColumn.Expression = "IIF(ACC_AMT > 0, ACC_AMT, 0)"
            Me.ACC_CREDITColumn.Expression = "IIF(ACC_AMT <  0, ACC_AMT * -1, 0)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRN_GNLJNLDRowChangedEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLDRowChanged(Me, New TRN_GNLJNLDRowChangeEvent(CType(e.Row,TRN_GNLJNLDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRN_GNLJNLDRowChangingEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLDRowChanging(Me, New TRN_GNLJNLDRowChangeEvent(CType(e.Row,TRN_GNLJNLDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRN_GNLJNLDRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLDRowDeleted(Me, New TRN_GNLJNLDRowChangeEvent(CType(e.Row,TRN_GNLJNLDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRN_GNLJNLDRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRN_GNLJNLDRowDeleting(Me, New TRN_GNLJNLDRowChangeEvent(CType(e.Row,TRN_GNLJNLDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRN_GNLJNLDRow(ByVal row As TRN_GNLJNLDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSGLDataset = New CSGLDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRN_GNLJNLDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYS_ACCTYPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACC_TYPE As Global.System.Data.DataColumn
        
        Private columnTYPE_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYS_ACCTYPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TYPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYS_ACCTYPERow
            Get
                Return CType(Me.Rows(index),SYS_ACCTYPERow)
            End Get
        End Property
        
        Public Event SYS_ACCTYPERowChanging As SYS_ACCTYPERowChangeEventHandler
        
        Public Event SYS_ACCTYPERowChanged As SYS_ACCTYPERowChangeEventHandler
        
        Public Event SYS_ACCTYPERowDeleting As SYS_ACCTYPERowChangeEventHandler
        
        Public Event SYS_ACCTYPERowDeleted As SYS_ACCTYPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYS_ACCTYPERow(ByVal row As SYS_ACCTYPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYS_ACCTYPERow(ByVal ACC_TYPE As Byte, ByVal TYPE_NAME As String) As SYS_ACCTYPERow
            Dim rowSYS_ACCTYPERow As SYS_ACCTYPERow = CType(Me.NewRow,SYS_ACCTYPERow)
            Dim columnValuesArray() As Object = New Object() {ACC_TYPE, TYPE_NAME}
            rowSYS_ACCTYPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYS_ACCTYPERow)
            Return rowSYS_ACCTYPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACC_TYPE(ByVal ACC_TYPE As Byte) As SYS_ACCTYPERow
            Return CType(Me.Rows.Find(New Object() {ACC_TYPE}),SYS_ACCTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYS_ACCTYPEDataTable = CType(MyBase.Clone,SYS_ACCTYPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYS_ACCTYPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACC_TYPE = MyBase.Columns("ACC_TYPE")
            Me.columnTYPE_NAME = MyBase.Columns("TYPE_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACC_TYPE = New Global.System.Data.DataColumn("ACC_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_TYPE)
            Me.columnTYPE_NAME = New Global.System.Data.DataColumn("TYPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYPE_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACC_TYPE}, true))
            Me.columnACC_TYPE.AllowDBNull = false
            Me.columnACC_TYPE.Unique = true
            Me.columnTYPE_NAME.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYS_ACCTYPERow() As SYS_ACCTYPERow
            Return CType(Me.NewRow,SYS_ACCTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYS_ACCTYPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYS_ACCTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYS_ACCTYPERowChangedEvent) Is Nothing) Then
                RaiseEvent SYS_ACCTYPERowChanged(Me, New SYS_ACCTYPERowChangeEvent(CType(e.Row,SYS_ACCTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYS_ACCTYPERowChangingEvent) Is Nothing) Then
                RaiseEvent SYS_ACCTYPERowChanging(Me, New SYS_ACCTYPERowChangeEvent(CType(e.Row,SYS_ACCTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYS_ACCTYPERowDeletedEvent) Is Nothing) Then
                RaiseEvent SYS_ACCTYPERowDeleted(Me, New SYS_ACCTYPERowChangeEvent(CType(e.Row,SYS_ACCTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYS_ACCTYPERowDeletingEvent) Is Nothing) Then
                RaiseEvent SYS_ACCTYPERowDeleting(Me, New SYS_ACCTYPERowChangeEvent(CType(e.Row,SYS_ACCTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYS_ACCTYPERow(ByVal row As SYS_ACCTYPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSGLDataset = New CSGLDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYS_ACCTYPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRN_ACCHISTORYDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnHISTORYNO As Global.System.Data.DataColumn
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_YEAR As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD As Global.System.Data.DataColumn
        
        Private columnTRANTYPE As Global.System.Data.DataColumn
        
        Private columnTRAN_CODE As Global.System.Data.DataColumn
        
        Private columnTRAN_NO As Global.System.Data.DataColumn
        
        Private columnTRAN_DATE As Global.System.Data.DataColumn
        
        Private columnACC_AMT As Global.System.Data.DataColumn
        
        Private columnTRAN_DESC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRN_ACCHISTORY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HISTORYNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHISTORYNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAN_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAN_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAN_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAN_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAN_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAN_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAN_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAN_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRN_ACCHISTORYRow
            Get
                Return CType(Me.Rows(index),TRN_ACCHISTORYRow)
            End Get
        End Property
        
        Public Event TRN_ACCHISTORYRowChanging As TRN_ACCHISTORYRowChangeEventHandler
        
        Public Event TRN_ACCHISTORYRowChanged As TRN_ACCHISTORYRowChangeEventHandler
        
        Public Event TRN_ACCHISTORYRowDeleting As TRN_ACCHISTORYRowChangeEventHandler
        
        Public Event TRN_ACCHISTORYRowDeleted As TRN_ACCHISTORYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRN_ACCHISTORYRow(ByVal row As TRN_ACCHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_ACCHISTORYRow(ByVal ACC_CODE As String, ByVal ACC_YEAR As Integer, ByVal ACC_PERIOD As Byte, ByVal TRANTYPE As String, ByVal TRAN_CODE As String, ByVal TRAN_NO As Integer, ByVal TRAN_DATE As Date, ByVal ACC_AMT As Decimal, ByVal TRAN_DESC As String) As TRN_ACCHISTORYRow
            Dim rowTRN_ACCHISTORYRow As TRN_ACCHISTORYRow = CType(Me.NewRow,TRN_ACCHISTORYRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ACC_CODE, ACC_YEAR, ACC_PERIOD, TRANTYPE, TRAN_CODE, TRAN_NO, TRAN_DATE, ACC_AMT, TRAN_DESC}
            rowTRN_ACCHISTORYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_ACCHISTORYRow)
            Return rowTRN_ACCHISTORYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByHISTORYNO(ByVal HISTORYNO As Long) As TRN_ACCHISTORYRow
            Return CType(Me.Rows.Find(New Object() {HISTORYNO}),TRN_ACCHISTORYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRN_ACCHISTORYDataTable = CType(MyBase.Clone,TRN_ACCHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRN_ACCHISTORYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnHISTORYNO = MyBase.Columns("HISTORYNO")
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_YEAR = MyBase.Columns("ACC_YEAR")
            Me.columnACC_PERIOD = MyBase.Columns("ACC_PERIOD")
            Me.columnTRANTYPE = MyBase.Columns("TRANTYPE")
            Me.columnTRAN_CODE = MyBase.Columns("TRAN_CODE")
            Me.columnTRAN_NO = MyBase.Columns("TRAN_NO")
            Me.columnTRAN_DATE = MyBase.Columns("TRAN_DATE")
            Me.columnACC_AMT = MyBase.Columns("ACC_AMT")
            Me.columnTRAN_DESC = MyBase.Columns("TRAN_DESC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnHISTORYNO = New Global.System.Data.DataColumn("HISTORYNO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHISTORYNO)
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_YEAR = New Global.System.Data.DataColumn("ACC_YEAR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_YEAR)
            Me.columnACC_PERIOD = New Global.System.Data.DataColumn("ACC_PERIOD", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD)
            Me.columnTRANTYPE = New Global.System.Data.DataColumn("TRANTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANTYPE)
            Me.columnTRAN_CODE = New Global.System.Data.DataColumn("TRAN_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAN_CODE)
            Me.columnTRAN_NO = New Global.System.Data.DataColumn("TRAN_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAN_NO)
            Me.columnTRAN_DATE = New Global.System.Data.DataColumn("TRAN_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAN_DATE)
            Me.columnACC_AMT = New Global.System.Data.DataColumn("ACC_AMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_AMT)
            Me.columnTRAN_DESC = New Global.System.Data.DataColumn("TRAN_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAN_DESC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnHISTORYNO}, true))
            Me.columnHISTORYNO.AutoIncrement = true
            Me.columnHISTORYNO.AllowDBNull = false
            Me.columnHISTORYNO.ReadOnly = true
            Me.columnHISTORYNO.Unique = true
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_YEAR.AllowDBNull = false
            Me.columnACC_PERIOD.AllowDBNull = false
            Me.columnTRANTYPE.AllowDBNull = false
            Me.columnTRANTYPE.MaxLength = 10
            Me.columnTRAN_CODE.AllowDBNull = false
            Me.columnTRAN_CODE.MaxLength = 10
            Me.columnTRAN_NO.AllowDBNull = false
            Me.columnTRAN_DATE.AllowDBNull = false
            Me.columnACC_AMT.AllowDBNull = false
            Me.columnTRAN_DESC.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRN_ACCHISTORYRow() As TRN_ACCHISTORYRow
            Return CType(Me.NewRow,TRN_ACCHISTORYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRN_ACCHISTORYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRN_ACCHISTORYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRN_ACCHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent TRN_ACCHISTORYRowChanged(Me, New TRN_ACCHISTORYRowChangeEvent(CType(e.Row,TRN_ACCHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRN_ACCHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent TRN_ACCHISTORYRowChanging(Me, New TRN_ACCHISTORYRowChangeEvent(CType(e.Row,TRN_ACCHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRN_ACCHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRN_ACCHISTORYRowDeleted(Me, New TRN_ACCHISTORYRowChangeEvent(CType(e.Row,TRN_ACCHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRN_ACCHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRN_ACCHISTORYRowDeleting(Me, New TRN_ACCHISTORYRowChangeEvent(CType(e.Row,TRN_ACCHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRN_ACCHISTORYRow(ByVal row As TRN_ACCHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSGLDataset = New CSGLDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRN_ACCHISTORYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRN_ACCPERIODDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCPERIODNO As Global.System.Data.DataColumn
        
        Private columnACC_YEAR As Global.System.Data.DataColumn
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_OPENING As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD01 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD02 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD03 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD04 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD05 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD06 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD07 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD08 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD09 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD10 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD11 As Global.System.Data.DataColumn
        
        Private columnACC_PERIOD12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRN_ACCPERIOD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCPERIODNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCPERIODNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_OPENINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_OPENING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD07Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD07
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD08Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD08
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD09Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD09
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PERIOD12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PERIOD12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRN_ACCPERIODRow
            Get
                Return CType(Me.Rows(index),TRN_ACCPERIODRow)
            End Get
        End Property
        
        Public Event TRN_ACCPERIODRowChanging As TRN_ACCPERIODRowChangeEventHandler
        
        Public Event TRN_ACCPERIODRowChanged As TRN_ACCPERIODRowChangeEventHandler
        
        Public Event TRN_ACCPERIODRowDeleting As TRN_ACCPERIODRowChangeEventHandler
        
        Public Event TRN_ACCPERIODRowDeleted As TRN_ACCPERIODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRN_ACCPERIODRow(ByVal row As TRN_ACCPERIODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRN_ACCPERIODRow(ByVal ACC_YEAR As Integer, ByVal parentMST_ACCOUNTRowByFK_TRN_ACCPERIOD_ACC_CODE As MST_ACCOUNTRow, ByVal ACC_OPENING As Decimal, ByVal ACC_PERIOD01 As Decimal, ByVal ACC_PERIOD02 As Decimal, ByVal ACC_PERIOD03 As Decimal, ByVal ACC_PERIOD04 As Decimal, ByVal ACC_PERIOD05 As Decimal, ByVal ACC_PERIOD06 As Decimal, ByVal ACC_PERIOD07 As Decimal, ByVal ACC_PERIOD08 As Decimal, ByVal ACC_PERIOD09 As Decimal, ByVal ACC_PERIOD10 As Decimal, ByVal ACC_PERIOD11 As Decimal, ByVal ACC_PERIOD12 As Decimal) As TRN_ACCPERIODRow
            Dim rowTRN_ACCPERIODRow As TRN_ACCPERIODRow = CType(Me.NewRow,TRN_ACCPERIODRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ACC_YEAR, Nothing, ACC_OPENING, ACC_PERIOD01, ACC_PERIOD02, ACC_PERIOD03, ACC_PERIOD04, ACC_PERIOD05, ACC_PERIOD06, ACC_PERIOD07, ACC_PERIOD08, ACC_PERIOD09, ACC_PERIOD10, ACC_PERIOD11, ACC_PERIOD12}
            If (Not (parentMST_ACCOUNTRowByFK_TRN_ACCPERIOD_ACC_CODE) Is Nothing) Then
                columnValuesArray(2) = parentMST_ACCOUNTRowByFK_TRN_ACCPERIOD_ACC_CODE(0)
            End If
            rowTRN_ACCPERIODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRN_ACCPERIODRow)
            Return rowTRN_ACCPERIODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACCPERIODNO(ByVal ACCPERIODNO As Integer) As TRN_ACCPERIODRow
            Return CType(Me.Rows.Find(New Object() {ACCPERIODNO}),TRN_ACCPERIODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRN_ACCPERIODDataTable = CType(MyBase.Clone,TRN_ACCPERIODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRN_ACCPERIODDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCPERIODNO = MyBase.Columns("ACCPERIODNO")
            Me.columnACC_YEAR = MyBase.Columns("ACC_YEAR")
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_OPENING = MyBase.Columns("ACC_OPENING")
            Me.columnACC_PERIOD01 = MyBase.Columns("ACC_PERIOD01")
            Me.columnACC_PERIOD02 = MyBase.Columns("ACC_PERIOD02")
            Me.columnACC_PERIOD03 = MyBase.Columns("ACC_PERIOD03")
            Me.columnACC_PERIOD04 = MyBase.Columns("ACC_PERIOD04")
            Me.columnACC_PERIOD05 = MyBase.Columns("ACC_PERIOD05")
            Me.columnACC_PERIOD06 = MyBase.Columns("ACC_PERIOD06")
            Me.columnACC_PERIOD07 = MyBase.Columns("ACC_PERIOD07")
            Me.columnACC_PERIOD08 = MyBase.Columns("ACC_PERIOD08")
            Me.columnACC_PERIOD09 = MyBase.Columns("ACC_PERIOD09")
            Me.columnACC_PERIOD10 = MyBase.Columns("ACC_PERIOD10")
            Me.columnACC_PERIOD11 = MyBase.Columns("ACC_PERIOD11")
            Me.columnACC_PERIOD12 = MyBase.Columns("ACC_PERIOD12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCPERIODNO = New Global.System.Data.DataColumn("ACCPERIODNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCPERIODNO)
            Me.columnACC_YEAR = New Global.System.Data.DataColumn("ACC_YEAR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_YEAR)
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_OPENING = New Global.System.Data.DataColumn("ACC_OPENING", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_OPENING)
            Me.columnACC_PERIOD01 = New Global.System.Data.DataColumn("ACC_PERIOD01", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD01)
            Me.columnACC_PERIOD02 = New Global.System.Data.DataColumn("ACC_PERIOD02", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD02)
            Me.columnACC_PERIOD03 = New Global.System.Data.DataColumn("ACC_PERIOD03", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD03)
            Me.columnACC_PERIOD04 = New Global.System.Data.DataColumn("ACC_PERIOD04", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD04)
            Me.columnACC_PERIOD05 = New Global.System.Data.DataColumn("ACC_PERIOD05", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD05)
            Me.columnACC_PERIOD06 = New Global.System.Data.DataColumn("ACC_PERIOD06", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD06)
            Me.columnACC_PERIOD07 = New Global.System.Data.DataColumn("ACC_PERIOD07", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD07)
            Me.columnACC_PERIOD08 = New Global.System.Data.DataColumn("ACC_PERIOD08", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD08)
            Me.columnACC_PERIOD09 = New Global.System.Data.DataColumn("ACC_PERIOD09", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD09)
            Me.columnACC_PERIOD10 = New Global.System.Data.DataColumn("ACC_PERIOD10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD10)
            Me.columnACC_PERIOD11 = New Global.System.Data.DataColumn("ACC_PERIOD11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD11)
            Me.columnACC_PERIOD12 = New Global.System.Data.DataColumn("ACC_PERIOD12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PERIOD12)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCPERIODNO}, true))
            Me.columnACCPERIODNO.AutoIncrement = true
            Me.columnACCPERIODNO.AllowDBNull = false
            Me.columnACCPERIODNO.ReadOnly = true
            Me.columnACCPERIODNO.Unique = true
            Me.columnACC_YEAR.AllowDBNull = false
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_OPENING.AllowDBNull = false
            Me.columnACC_PERIOD01.AllowDBNull = false
            Me.columnACC_PERIOD02.AllowDBNull = false
            Me.columnACC_PERIOD03.AllowDBNull = false
            Me.columnACC_PERIOD04.AllowDBNull = false
            Me.columnACC_PERIOD05.AllowDBNull = false
            Me.columnACC_PERIOD06.AllowDBNull = false
            Me.columnACC_PERIOD07.AllowDBNull = false
            Me.columnACC_PERIOD08.AllowDBNull = false
            Me.columnACC_PERIOD09.AllowDBNull = false
            Me.columnACC_PERIOD10.AllowDBNull = false
            Me.columnACC_PERIOD11.AllowDBNull = false
            Me.columnACC_PERIOD12.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRN_ACCPERIODRow() As TRN_ACCPERIODRow
            Return CType(Me.NewRow,TRN_ACCPERIODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRN_ACCPERIODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRN_ACCPERIODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRN_ACCPERIODRowChangedEvent) Is Nothing) Then
                RaiseEvent TRN_ACCPERIODRowChanged(Me, New TRN_ACCPERIODRowChangeEvent(CType(e.Row,TRN_ACCPERIODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRN_ACCPERIODRowChangingEvent) Is Nothing) Then
                RaiseEvent TRN_ACCPERIODRowChanging(Me, New TRN_ACCPERIODRowChangeEvent(CType(e.Row,TRN_ACCPERIODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRN_ACCPERIODRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRN_ACCPERIODRowDeleted(Me, New TRN_ACCPERIODRowChangeEvent(CType(e.Row,TRN_ACCPERIODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRN_ACCPERIODRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRN_ACCPERIODRowDeleting(Me, New TRN_ACCPERIODRowChangeEvent(CType(e.Row,TRN_ACCPERIODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRN_ACCPERIODRow(ByVal row As TRN_ACCPERIODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSGLDataset = New CSGLDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRN_ACCPERIODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_CURRENCYDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCURR_CODE As Global.System.Data.DataColumn
        
        Private columnCURR_NAME As Global.System.Data.DataColumn
        
        Private columnCURR_RATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_CURRENCY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_CURRENCYRow
            Get
                Return CType(Me.Rows(index),MST_CURRENCYRow)
            End Get
        End Property
        
        Public Event MST_CURRENCYRowChanging As MST_CURRENCYRowChangeEventHandler
        
        Public Event MST_CURRENCYRowChanged As MST_CURRENCYRowChangeEventHandler
        
        Public Event MST_CURRENCYRowDeleting As MST_CURRENCYRowChangeEventHandler
        
        Public Event MST_CURRENCYRowDeleted As MST_CURRENCYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_CURRENCYRow(ByVal row As MST_CURRENCYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_CURRENCYRow(ByVal CURR_CODE As String, ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal) As MST_CURRENCYRow
            Dim rowMST_CURRENCYRow As MST_CURRENCYRow = CType(Me.NewRow,MST_CURRENCYRow)
            Dim columnValuesArray() As Object = New Object() {CURR_CODE, CURR_NAME, CURR_RATE}
            rowMST_CURRENCYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_CURRENCYRow)
            Return rowMST_CURRENCYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCURR_CODE(ByVal CURR_CODE As String) As MST_CURRENCYRow
            Return CType(Me.Rows.Find(New Object() {CURR_CODE}),MST_CURRENCYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_CURRENCYDataTable = CType(MyBase.Clone,MST_CURRENCYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_CURRENCYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCURR_CODE = MyBase.Columns("CURR_CODE")
            Me.columnCURR_NAME = MyBase.Columns("CURR_NAME")
            Me.columnCURR_RATE = MyBase.Columns("CURR_RATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCURR_CODE = New Global.System.Data.DataColumn("CURR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_CODE)
            Me.columnCURR_NAME = New Global.System.Data.DataColumn("CURR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_NAME)
            Me.columnCURR_RATE = New Global.System.Data.DataColumn("CURR_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_RATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCURR_CODE}, true))
            Me.columnCURR_CODE.AllowDBNull = false
            Me.columnCURR_CODE.Unique = true
            Me.columnCURR_CODE.MaxLength = 10
            Me.columnCURR_NAME.MaxLength = 30
            Me.columnCURR_RATE.AllowDBNull = false
            Me.columnCURR_RATE.DefaultValue = CType(1,Decimal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_CURRENCYRow() As MST_CURRENCYRow
            Return CType(Me.NewRow,MST_CURRENCYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_CURRENCYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_CURRENCYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_CURRENCYRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowChanged(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_CURRENCYRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowChanging(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_CURRENCYRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowDeleted(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_CURRENCYRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowDeleting(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_CURRENCYRow(ByVal row As MST_CURRENCYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSGLDataset = New CSGLDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_CURRENCYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_ACCOUNTRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_ACCOUNT As MST_ACCOUNTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_ACCOUNT = CType(Me.Table,MST_ACCOUNTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableMST_ACCOUNT.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_NAME' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_TYPE' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RETAINED_EARNINGS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RETAINED_EARNINGS' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_ACTIVE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_ACTIVE' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.ACC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_NAMENull()
            Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.ACC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_TYPENull()
            Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRETAINED_EARNINGSNull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRETAINED_EARNINGSNull()
            Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_ACTIVENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.IS_ACTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_ACTIVENull()
            Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTRN_GNLJNLDRows() As TRN_GNLJNLDRow()
            If (Me.Table.ChildRelations("FK_TRN_GNLJNLD_ACC_CODE") Is Nothing) Then
                Return New TRN_GNLJNLDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRN_GNLJNLD_ACC_CODE")),TRN_GNLJNLDRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTRN_ACCPERIODRows() As TRN_ACCPERIODRow()
            If (Me.Table.ChildRelations("FK_TRN_ACCPERIOD_ACC_CODE") Is Nothing) Then
                Return New TRN_ACCPERIODRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRN_ACCPERIOD_ACC_CODE")),TRN_ACCPERIODRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRN_GNLJNLRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRN_GNLJNL As TRN_GNLJNLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRN_GNLJNL = CType(Me.Table,TRN_GNLJNLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GNLJNLNO() As Integer
            Get
                Return CType(Me(Me.tableTRN_GNLJNL.GNLJNLNOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.GNLJNLNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JNL_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNL.JNL_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JNL_DESC' in table 'TRN_GNLJNL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.JNL_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JNL_DATE() As Date
            Get
                Return CType(Me(Me.tableTRN_GNLJNL.JNL_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.JNL_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JNL_AMT() As Decimal
            Get
                Return CType(Me(Me.tableTRN_GNLJNL.JNL_AMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.JNL_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_YEAR() As Short
            Get
                Return CType(Me(Me.tableTRN_GNLJNL.ACC_YEARColumn),Short)
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.ACC_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD() As Byte
            Get
                Return CType(Me(Me.tableTRN_GNLJNL.ACC_PERIODColumn),Byte)
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.ACC_PERIODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_CODE() As String
            Get
                Return CType(Me(Me.tableTRN_GNLJNL.CURR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.CURR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_RATE() As Decimal
            Get
                Return CType(Me(Me.tableTRN_GNLJNL.CURR_RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.CURR_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_DEBIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNL.TOTAL_DEBITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_DEBIT' in table 'TRN_GNLJNL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.TOTAL_DEBITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_CREDIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNL.TOTAL_CREDITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_CREDIT' in table 'TRN_GNLJNL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.TOTAL_CREDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_DIFF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNL.TOTAL_DIFFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_DIFF' in table 'TRN_GNLJNL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.TOTAL_DIFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JNL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNL.JNL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JNL_CODE' in table 'TRN_GNLJNL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNL.JNL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_CURRENCYRow() As MST_CURRENCYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRN_GNLJNL_MST_CURRENCY")),MST_CURRENCYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRN_GNLJNL_MST_CURRENCY"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJNL_DESCNull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNL.JNL_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJNL_DESCNull()
            Me(Me.tableTRN_GNLJNL.JNL_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_DEBITNull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNL.TOTAL_DEBITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_DEBITNull()
            Me(Me.tableTRN_GNLJNL.TOTAL_DEBITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_CREDITNull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNL.TOTAL_CREDITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_CREDITNull()
            Me(Me.tableTRN_GNLJNL.TOTAL_CREDITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_DIFFNull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNL.TOTAL_DIFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_DIFFNull()
            Me(Me.tableTRN_GNLJNL.TOTAL_DIFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJNL_CODENull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNL.JNL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJNL_CODENull()
            Me(Me.tableTRN_GNLJNL.JNL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTRN_GNLJNLDRows() As TRN_GNLJNLDRow()
            If (Me.Table.ChildRelations("FK_TRN_GNLJNLD_GNLJNLNO") Is Nothing) Then
                Return New TRN_GNLJNLDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRN_GNLJNLD_GNLJNLNO")),TRN_GNLJNLDRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRN_GNLJNLDRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRN_GNLJNLD As TRN_GNLJNLDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRN_GNLJNLD = CType(Me.Table,TRN_GNLJNLDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GNLJNLDNO() As Integer
            Get
                Return CType(Me(Me.tableTRN_GNLJNLD.GNLJNLDNOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRN_GNLJNLD.GNLJNLDNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GNLJNLNO() As Integer
            Get
                Return CType(Me(Me.tableTRN_GNLJNLD.GNLJNLNOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRN_GNLJNLD.GNLJNLNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableTRN_GNLJNLD.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_GNLJNLD.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_MEMO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNLD.ACC_MEMOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_MEMO' in table 'TRN_GNLJNLD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNLD.ACC_MEMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_AMT() As Decimal
            Get
                Return CType(Me(Me.tableTRN_GNLJNLD.ACC_AMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRN_GNLJNLD.ACC_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_DEBIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNLD.ACC_DEBITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_DEBIT' in table 'TRN_GNLJNLD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNLD.ACC_DEBITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CREDIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTRN_GNLJNLD.ACC_CREDITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_CREDIT' in table 'TRN_GNLJNLD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_GNLJNLD.ACC_CREDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRow() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRN_GNLJNLD_ACC_CODE")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRN_GNLJNLD_ACC_CODE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRN_GNLJNLRow() As TRN_GNLJNLRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRN_GNLJNLD_GNLJNLNO")),TRN_GNLJNLRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRN_GNLJNLD_GNLJNLNO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_MEMONull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNLD.ACC_MEMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_MEMONull()
            Me(Me.tableTRN_GNLJNLD.ACC_MEMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_DEBITNull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNLD.ACC_DEBITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_DEBITNull()
            Me(Me.tableTRN_GNLJNLD.ACC_DEBITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_CREDITNull() As Boolean
            Return Me.IsNull(Me.tableTRN_GNLJNLD.ACC_CREDITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_CREDITNull()
            Me(Me.tableTRN_GNLJNLD.ACC_CREDITColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYS_ACCTYPERow
        Inherits Global.System.Data.DataRow
        
        Private tableSYS_ACCTYPE As SYS_ACCTYPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYS_ACCTYPE = CType(Me.Table,SYS_ACCTYPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_TYPE() As Byte
            Get
                Return CType(Me(Me.tableSYS_ACCTYPE.ACC_TYPEColumn),Byte)
            End Get
            Set
                Me(Me.tableSYS_ACCTYPE.ACC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TYPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_ACCTYPE.TYPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TYPE_NAME' in table 'SYS_ACCTYPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_ACCTYPE.TYPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTYPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSYS_ACCTYPE.TYPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTYPE_NAMENull()
            Me(Me.tableSYS_ACCTYPE.TYPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRN_ACCHISTORYRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRN_ACCHISTORY As TRN_ACCHISTORYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRN_ACCHISTORY = CType(Me.Table,TRN_ACCHISTORYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HISTORYNO() As Long
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.HISTORYNOColumn),Long)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.HISTORYNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_YEAR() As Integer
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.ACC_YEARColumn),Integer)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.ACC_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD() As Byte
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.ACC_PERIODColumn),Byte)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.ACC_PERIODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANTYPE() As String
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.TRANTYPEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.TRANTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAN_CODE() As String
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.TRAN_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.TRAN_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAN_NO() As Integer
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.TRAN_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.TRAN_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAN_DATE() As Date
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.TRAN_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.TRAN_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_AMT() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCHISTORY.ACC_AMTColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.ACC_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAN_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRN_ACCHISTORY.TRAN_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRAN_DESC' in table 'TRN_ACCHISTORY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRN_ACCHISTORY.TRAN_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRAN_DESCNull() As Boolean
            Return Me.IsNull(Me.tableTRN_ACCHISTORY.TRAN_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRAN_DESCNull()
            Me(Me.tableTRN_ACCHISTORY.TRAN_DESCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRN_ACCPERIODRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRN_ACCPERIOD As TRN_ACCPERIODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRN_ACCPERIOD = CType(Me.Table,TRN_ACCPERIODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCPERIODNO() As Integer
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACCPERIODNOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACCPERIODNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_YEAR() As Integer
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_YEARColumn),Integer)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_OPENING() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_OPENINGColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_OPENINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD01() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD01Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD02() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD02Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD03() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD03Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD04() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD04Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD05() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD05Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD06() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD06Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD07() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD07Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD07Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD08() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD08Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD08Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD09() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD09Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD09Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD10() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD10Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD11() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD11Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PERIOD12() As Decimal
            Get
                Return CType(Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD12Column),Decimal)
            End Get
            Set
                Me(Me.tableTRN_ACCPERIOD.ACC_PERIOD12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRow() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRN_ACCPERIOD_ACC_CODE")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRN_ACCPERIOD_ACC_CODE"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_CURRENCYRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_CURRENCY As MST_CURRENCYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_CURRENCY = CType(Me.Table,MST_CURRENCYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_CODE() As String
            Get
                Return CType(Me(Me.tableMST_CURRENCY.CURR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CURRENCY.CURR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CURRENCY.CURR_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURR_NAME' in table 'MST_CURRENCY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CURRENCY.CURR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_RATE() As Decimal
            Get
                Return CType(Me(Me.tableMST_CURRENCY.CURR_RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableMST_CURRENCY.CURR_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURR_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_CURRENCY.CURR_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURR_NAMENull()
            Me(Me.tableMST_CURRENCY.CURR_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTRN_GNLJNLRows() As TRN_GNLJNLRow()
            If (Me.Table.ChildRelations("FK_TRN_GNLJNL_MST_CURRENCY") Is Nothing) Then
                Return New TRN_GNLJNLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRN_GNLJNL_MST_CURRENCY")),TRN_GNLJNLRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_ACCOUNTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_ACCOUNTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_ACCOUNTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_ACCOUNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRN_GNLJNLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRN_GNLJNLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRN_GNLJNLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRN_GNLJNLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRN_GNLJNLDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRN_GNLJNLDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRN_GNLJNLDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRN_GNLJNLDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYS_ACCTYPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYS_ACCTYPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYS_ACCTYPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYS_ACCTYPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRN_ACCHISTORYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRN_ACCHISTORYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRN_ACCHISTORYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRN_ACCHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRN_ACCPERIODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRN_ACCPERIODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRN_ACCPERIODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRN_ACCPERIODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_CURRENCYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_CURRENCYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_CURRENCYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_CURRENCYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CSGLDatasetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_ACCOUNTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_ACCOUNT"
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_NAME", "ACC_NAME")
            tableMapping.ColumnMappings.Add("ACC_TYPE", "ACC_TYPE")
            tableMapping.ColumnMappings.Add("RETAINED_EARNINGS", "RETAINED_EARNINGS")
            tableMapping.ColumnMappings.Add("IS_ACTIVE", "IS_ACTIVE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_ACCOUNT] WHERE (([ACC_CODE] = @Original_ACC_CODE) AND ((@I"& _ 
                "sNull_ACC_NAME = 1 AND [ACC_NAME] IS NULL) OR ([ACC_NAME] = @Original_ACC_NAME))"& _ 
                " AND ((@IsNull_ACC_TYPE = 1 AND [ACC_TYPE] IS NULL) OR ([ACC_TYPE] = @Original_A"& _ 
                "CC_TYPE)) AND ((@IsNull_RETAINED_EARNINGS = 1 AND [RETAINED_EARNINGS] IS NULL) O"& _ 
                "R ([RETAINED_EARNINGS] = @Original_RETAINED_EARNINGS)) AND ((@IsNull_IS_ACTIVE ="& _ 
                " 1 AND [IS_ACTIVE] IS NULL) OR ([IS_ACTIVE] = @Original_IS_ACTIVE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_ACTIVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_ACCOUNT] ([ACC_CODE], [ACC_NAME], [ACC_TYPE], [RETAINED_EA"& _ 
                "RNINGS], [IS_ACTIVE]) VALUES (@ACC_CODE, @ACC_NAME, @ACC_TYPE, @RETAINED_EARNING"& _ 
                "S, @IS_ACTIVE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTI"& _ 
                "VE FROM MST_ACCOUNT WHERE (ACC_CODE = @ACC_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_ACCOUNT] SET [ACC_CODE] = @ACC_CODE, [ACC_NAME] = @ACC_NAME, [A"& _ 
                "CC_TYPE] = @ACC_TYPE, [RETAINED_EARNINGS] = @RETAINED_EARNINGS, [IS_ACTIVE] = @I"& _ 
                "S_ACTIVE WHERE (([ACC_CODE] = @Original_ACC_CODE) AND ((@IsNull_ACC_NAME = 1 AND"& _ 
                " [ACC_NAME] IS NULL) OR ([ACC_NAME] = @Original_ACC_NAME)) AND ((@IsNull_ACC_TYP"& _ 
                "E = 1 AND [ACC_TYPE] IS NULL) OR ([ACC_TYPE] = @Original_ACC_TYPE)) AND ((@IsNul"& _ 
                "l_RETAINED_EARNINGS = 1 AND [RETAINED_EARNINGS] IS NULL) OR ([RETAINED_EARNINGS]"& _ 
                " = @Original_RETAINED_EARNINGS)) AND ((@IsNull_IS_ACTIVE = 1 AND [IS_ACTIVE] IS "& _ 
                "NULL) OR ([IS_ACTIVE] = @Original_IS_ACTIVE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_CODE, ACC_NAME, ACC_"& _ 
                "TYPE, RETAINED_EARNINGS, IS_ACTIVE FROM MST_ACCOUNT WHERE (ACC_CODE = @ACC_CODE)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_ACTIVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE FROM dbo.MST_AC"& _ 
                "COUNT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSGLDataset.MST_ACCOUNTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSGLDataset.MST_ACCOUNTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSGLDataset.MST_ACCOUNTDataTable = New CSGLDataset.MST_ACCOUNTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSGLDataset.MST_ACCOUNTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSGLDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_ACCOUNT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACC_NAME,String)
            End If
            If (Original_ACC_TYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_ACTIVE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            If (ACC_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACC_NAME,String)
            End If
            If (ACC_TYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_ACTIVE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean), ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            If (ACC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACC_NAME,String)
            End If
            If (ACC_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_ACTIVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ACC_NAME,String)
            End If
            If (Original_ACC_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_ACTIVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean), ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE, Original_ACC_CODE, Original_ACC_NAME, Original_ACC_TYPE, Original_RETAINED_EARNINGS, Original_IS_ACTIVE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRN_GNLJNLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRN_GNLJNL"
            tableMapping.ColumnMappings.Add("GNLJNLNO", "GNLJNLNO")
            tableMapping.ColumnMappings.Add("JNL_DESC", "JNL_DESC")
            tableMapping.ColumnMappings.Add("JNL_DATE", "JNL_DATE")
            tableMapping.ColumnMappings.Add("JNL_AMT", "JNL_AMT")
            tableMapping.ColumnMappings.Add("ACC_YEAR", "ACC_YEAR")
            tableMapping.ColumnMappings.Add("ACC_PERIOD", "ACC_PERIOD")
            tableMapping.ColumnMappings.Add("CURR_CODE", "CURR_CODE")
            tableMapping.ColumnMappings.Add("CURR_RATE", "CURR_RATE")
            tableMapping.ColumnMappings.Add("JNL_CODE", "JNL_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRN_GNLJNL] WHERE (([GNLJNLNO] = @Original_GNLJNLNO) AND ((@IsNull_J"& _ 
                "NL_DESC = 1 AND [JNL_DESC] IS NULL) OR ([JNL_DESC] = @Original_JNL_DESC)) AND (["& _ 
                "JNL_DATE] = @Original_JNL_DATE) AND ([JNL_AMT] = @Original_JNL_AMT) AND ([ACC_YE"& _ 
                "AR] = @Original_ACC_YEAR) AND ([ACC_PERIOD] = @Original_ACC_PERIOD) AND ([CURR_C"& _ 
                "ODE] = @Original_CURR_CODE) AND ([CURR_RATE] = @Original_CURR_RATE) AND ((@IsNul"& _ 
                "l_JNL_CODE = 1 AND [JNL_CODE] IS NULL) OR ([JNL_CODE] = @Original_JNL_CODE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_JNL_DESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_AMT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_JNL_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TRN_GNLJNL] ([GNLJNLNO], [JNL_DESC], [JNL_DATE], [JNL_AMT], [ACC_YEA"& _ 
                "R], [ACC_PERIOD], [CURR_CODE], [CURR_RATE], [JNL_CODE]) VALUES (@GNLJNLNO, @JNL_"& _ 
                "DESC, @JNL_DATE, @JNL_AMT, @ACC_YEAR, @ACC_PERIOD, @CURR_CODE, @CURR_RATE, @JNL_"& _ 
                "CODE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GNLJNLNO, JNL_DESC, JNL_DATE, JNL_AMT, ACC_YEAR, ACC_PERIOD, CURR"& _ 
                "_CODE, CURR_RATE, JNL_CODE FROM TRN_GNLJNL WHERE (GNLJNLNO = @GNLJNLNO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_AMT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRN_GNLJNL] SET [GNLJNLNO] = @GNLJNLNO, [JNL_DESC] = @JNL_DESC, [JNL_DATE"& _ 
                "] = @JNL_DATE, [JNL_AMT] = @JNL_AMT, [ACC_YEAR] = @ACC_YEAR, [ACC_PERIOD] = @ACC"& _ 
                "_PERIOD, [CURR_CODE] = @CURR_CODE, [CURR_RATE] = @CURR_RATE, [JNL_CODE] = @JNL_C"& _ 
                "ODE WHERE (([GNLJNLNO] = @Original_GNLJNLNO) AND ((@IsNull_JNL_DESC = 1 AND [JNL"& _ 
                "_DESC] IS NULL) OR ([JNL_DESC] = @Original_JNL_DESC)) AND ([JNL_DATE] = @Origina"& _ 
                "l_JNL_DATE) AND ([JNL_AMT] = @Original_JNL_AMT) AND ([ACC_YEAR] = @Original_ACC_"& _ 
                "YEAR) AND ([ACC_PERIOD] = @Original_ACC_PERIOD) AND ([CURR_CODE] = @Original_CUR"& _ 
                "R_CODE) AND ([CURR_RATE] = @Original_CURR_RATE) AND ((@IsNull_JNL_CODE = 1 AND ["& _ 
                "JNL_CODE] IS NULL) OR ([JNL_CODE] = @Original_JNL_CODE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GNLJNLNO, JNL"& _ 
                "_DESC, JNL_DATE, JNL_AMT, ACC_YEAR, ACC_PERIOD, CURR_CODE, CURR_RATE, JNL_CODE F"& _ 
                "ROM TRN_GNLJNL WHERE (GNLJNLNO = @GNLJNLNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_AMT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JNL_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_JNL_DESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_AMT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_JNL_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JNL_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     GNLJNLNO, JNL_DESC, JNL_DATE, JNL_AMT, ACC_YEAR, ACC_PERIOD, CURR_CODE"& _ 
                ", CURR_RATE, JNL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRN_GNLJNL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (JNL_DATE BETWEEN @STA"& _ 
                "RTDATE AND @ENDDATE)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STARTDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENDDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSGLDataset.TRN_GNLJNLDataTable, ByVal STARTDATE As Date, ByVal ENDDATE As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTDATE,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDDATE,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal STARTDATE As Date, ByVal ENDDATE As Date) As CSGLDataset.TRN_GNLJNLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTDATE,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDDATE,Date)
            Dim dataTable As CSGLDataset.TRN_GNLJNLDataTable = New CSGLDataset.TRN_GNLJNLDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSGLDataset.TRN_GNLJNLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSGLDataset) As Integer
            Return Me.Adapter.Update(dataSet, "TRN_GNLJNL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_GNLJNLNO As Integer, ByVal Original_JNL_DESC As String, ByVal Original_JNL_DATE As Date, ByVal Original_JNL_AMT As Decimal, ByVal Original_ACC_YEAR As Short, ByVal Original_ACC_PERIOD As Byte, ByVal Original_CURR_CODE As String, ByVal Original_CURR_RATE As Decimal, ByVal Original_JNL_CODE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GNLJNLNO,Integer)
            If (Original_JNL_DESC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_JNL_DESC,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_JNL_DATE,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_JNL_AMT,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ACC_YEAR,Short)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ACC_PERIOD,Byte)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CURR_CODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CURR_RATE,Decimal)
            If (Original_JNL_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_JNL_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal GNLJNLNO As Integer, ByVal JNL_DESC As String, ByVal JNL_DATE As Date, ByVal JNL_AMT As Decimal, ByVal ACC_YEAR As Short, ByVal ACC_PERIOD As Byte, ByVal CURR_CODE As String, ByVal CURR_RATE As Decimal, ByVal JNL_CODE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GNLJNLNO,Integer)
            If (JNL_DESC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(JNL_DESC,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(JNL_DATE,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(JNL_AMT,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ACC_YEAR,Short)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ACC_PERIOD,Byte)
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CURR_CODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(CURR_RATE,Decimal)
            If (JNL_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(JNL_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal GNLJNLNO As Integer,  _
                    ByVal JNL_DESC As String,  _
                    ByVal JNL_DATE As Date,  _
                    ByVal JNL_AMT As Decimal,  _
                    ByVal ACC_YEAR As Short,  _
                    ByVal ACC_PERIOD As Byte,  _
                    ByVal CURR_CODE As String,  _
                    ByVal CURR_RATE As Decimal,  _
                    ByVal JNL_CODE As String,  _
                    ByVal Original_GNLJNLNO As Integer,  _
                    ByVal Original_JNL_DESC As String,  _
                    ByVal Original_JNL_DATE As Date,  _
                    ByVal Original_JNL_AMT As Decimal,  _
                    ByVal Original_ACC_YEAR As Short,  _
                    ByVal Original_ACC_PERIOD As Byte,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_CURR_RATE As Decimal,  _
                    ByVal Original_JNL_CODE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GNLJNLNO,Integer)
            If (JNL_DESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(JNL_DESC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(JNL_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(JNL_AMT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ACC_YEAR,Short)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ACC_PERIOD,Byte)
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CURR_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CURR_RATE,Decimal)
            If (JNL_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(JNL_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_GNLJNLNO,Integer)
            If (Original_JNL_DESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_JNL_DESC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_JNL_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_JNL_AMT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ACC_YEAR,Short)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ACC_PERIOD,Byte)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CURR_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CURR_RATE,Decimal)
            If (Original_JNL_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_JNL_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal JNL_DESC As String,  _
                    ByVal JNL_DATE As Date,  _
                    ByVal JNL_AMT As Decimal,  _
                    ByVal ACC_YEAR As Short,  _
                    ByVal ACC_PERIOD As Byte,  _
                    ByVal CURR_CODE As String,  _
                    ByVal CURR_RATE As Decimal,  _
                    ByVal JNL_CODE As String,  _
                    ByVal Original_GNLJNLNO As Integer,  _
                    ByVal Original_JNL_DESC As String,  _
                    ByVal Original_JNL_DATE As Date,  _
                    ByVal Original_JNL_AMT As Decimal,  _
                    ByVal Original_ACC_YEAR As Short,  _
                    ByVal Original_ACC_PERIOD As Byte,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_CURR_RATE As Decimal,  _
                    ByVal Original_JNL_CODE As String) As Integer
            Return Me.Update(Original_GNLJNLNO, JNL_DESC, JNL_DATE, JNL_AMT, ACC_YEAR, ACC_PERIOD, CURR_CODE, CURR_RATE, JNL_CODE, Original_GNLJNLNO, Original_JNL_DESC, Original_JNL_DATE, Original_JNL_AMT, Original_ACC_YEAR, Original_ACC_PERIOD, Original_CURR_CODE, Original_CURR_RATE, Original_JNL_CODE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRN_GNLJNLDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRN_GNLJNLD"
            tableMapping.ColumnMappings.Add("GNLJNLDNO", "GNLJNLDNO")
            tableMapping.ColumnMappings.Add("GNLJNLNO", "GNLJNLNO")
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_MEMO", "ACC_MEMO")
            tableMapping.ColumnMappings.Add("ACC_AMT", "ACC_AMT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRN_GNLJNLD] WHERE (([GNLJNLDNO] = @Original_GNLJNLDNO) AND ([GNLJNL"& _ 
                "NO] = @Original_GNLJNLNO) AND ([ACC_CODE] = @Original_ACC_CODE) AND ((@IsNull_AC"& _ 
                "C_MEMO = 1 AND [ACC_MEMO] IS NULL) OR ([ACC_MEMO] = @Original_ACC_MEMO)) AND ([A"& _ 
                "CC_AMT] = @Original_ACC_AMT))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GNLJNLDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_MEMO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_MEMO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_MEMO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_MEMO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TRN_GNLJNLD] ([GNLJNLDNO], [GNLJNLNO], [ACC_CODE], [ACC_MEMO], [ACC_"& _ 
                "AMT]) VALUES (@GNLJNLDNO, @GNLJNLNO, @ACC_CODE, @ACC_MEMO, @ACC_AMT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GN"& _ 
                "LJNLDNO, GNLJNLNO, ACC_CODE, ACC_MEMO, ACC_AMT FROM TRN_GNLJNLD WHERE (GNLJNLDNO"& _ 
                " = @GNLJNLDNO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GNLJNLDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_MEMO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_MEMO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRN_GNLJNLD] SET [GNLJNLDNO] = @GNLJNLDNO, [GNLJNLNO] = @GNLJNLNO, [ACC_C"& _ 
                "ODE] = @ACC_CODE, [ACC_MEMO] = @ACC_MEMO, [ACC_AMT] = @ACC_AMT WHERE (([GNLJNLDN"& _ 
                "O] = @Original_GNLJNLDNO) AND ([GNLJNLNO] = @Original_GNLJNLNO) AND ([ACC_CODE] "& _ 
                "= @Original_ACC_CODE) AND ((@IsNull_ACC_MEMO = 1 AND [ACC_MEMO] IS NULL) OR ([AC"& _ 
                "C_MEMO] = @Original_ACC_MEMO)) AND ([ACC_AMT] = @Original_ACC_AMT));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GNL"& _ 
                "JNLDNO, GNLJNLNO, ACC_CODE, ACC_MEMO, ACC_AMT FROM TRN_GNLJNLD WHERE (GNLJNLDNO "& _ 
                "= @GNLJNLDNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GNLJNLDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLDNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_MEMO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_MEMO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GNLJNLDNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLDNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GNLJNLNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GNLJNLNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_MEMO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_MEMO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_MEMO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_MEMO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        T1.GNLJNLDNO, T1.GNLJNLNO, T1.ACC_CODE, T1.ACC_MEMO, T1.ACC_AMT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM            TRN_GNLJNLD AS T1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRN_GNLJNL "& _ 
                "AS T2 ON T2.GNLJNLNO = T1.GNLJNLNO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (T2.JNL_DATE BETWEEN @STARTDATE"& _ 
                " AND @ENDDATE)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STARTDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENDDATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "JNL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSGLDataset.TRN_GNLJNLDDataTable, ByVal STARTDATE As Date, ByVal ENDDATE As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTDATE,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDDATE,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal STARTDATE As Date, ByVal ENDDATE As Date) As CSGLDataset.TRN_GNLJNLDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(STARTDATE,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ENDDATE,Date)
            Dim dataTable As CSGLDataset.TRN_GNLJNLDDataTable = New CSGLDataset.TRN_GNLJNLDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSGLDataset.TRN_GNLJNLDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSGLDataset) As Integer
            Return Me.Adapter.Update(dataSet, "TRN_GNLJNLD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_GNLJNLDNO As Integer, ByVal Original_GNLJNLNO As Integer, ByVal Original_ACC_CODE As String, ByVal Original_ACC_MEMO As String, ByVal Original_ACC_AMT As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GNLJNLDNO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GNLJNLNO,Integer)
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_MEMO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ACC_MEMO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ACC_AMT,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal GNLJNLDNO As Integer, ByVal GNLJNLNO As Integer, ByVal ACC_CODE As String, ByVal ACC_MEMO As String, ByVal ACC_AMT As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GNLJNLDNO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(GNLJNLNO,Integer)
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ACC_CODE,String)
            End If
            If (ACC_MEMO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ACC_MEMO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ACC_AMT,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal GNLJNLDNO As Integer, ByVal GNLJNLNO As Integer, ByVal ACC_CODE As String, ByVal ACC_MEMO As String, ByVal ACC_AMT As Decimal, ByVal Original_GNLJNLDNO As Integer, ByVal Original_GNLJNLNO As Integer, ByVal Original_ACC_CODE As String, ByVal Original_ACC_MEMO As String, ByVal Original_ACC_AMT As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GNLJNLDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GNLJNLNO,Integer)
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ACC_CODE,String)
            End If
            If (ACC_MEMO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ACC_MEMO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ACC_AMT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_GNLJNLDNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_GNLJNLNO,Integer)
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_MEMO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ACC_MEMO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ACC_AMT,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal GNLJNLNO As Integer, ByVal ACC_CODE As String, ByVal ACC_MEMO As String, ByVal ACC_AMT As Decimal, ByVal Original_GNLJNLDNO As Integer, ByVal Original_GNLJNLNO As Integer, ByVal Original_ACC_CODE As String, ByVal Original_ACC_MEMO As String, ByVal Original_ACC_AMT As Decimal) As Integer
            Return Me.Update(Original_GNLJNLDNO, GNLJNLNO, ACC_CODE, ACC_MEMO, ACC_AMT, Original_GNLJNLDNO, Original_GNLJNLNO, Original_ACC_CODE, Original_ACC_MEMO, Original_ACC_AMT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYS_ACCTYPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYS_ACCTYPE"
            tableMapping.ColumnMappings.Add("ACC_TYPE", "ACC_TYPE")
            tableMapping.ColumnMappings.Add("TYPE_NAME", "TYPE_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SYS_ACCTYPE] WHERE (([ACC_TYPE] = @Original_ACC_TYPE) AND ((@I"& _ 
                "sNull_TYPE_NAME = 1 AND [TYPE_NAME] IS NULL) OR ([TYPE_NAME] = @Original_TYPE_NA"& _ 
                "ME)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TYPE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SYS_ACCTYPE] ([ACC_TYPE], [TYPE_NAME]) VALUES (@ACC_TYPE, @TYP"& _ 
                "E_NAME);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_TYPE, TYPE_NAME FROM SYS_ACCTYPE WHERE (ACC_TYPE = @ACC_TYP"& _ 
                "E)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SYS_ACCTYPE] SET [ACC_TYPE] = @ACC_TYPE, [TYPE_NAME] = @TYPE_NAME W"& _ 
                "HERE (([ACC_TYPE] = @Original_ACC_TYPE) AND ((@IsNull_TYPE_NAME = 1 AND [TYPE_NA"& _ 
                "ME] IS NULL) OR ([TYPE_NAME] = @Original_TYPE_NAME)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_TYPE, TYPE_NA"& _ 
                "ME FROM SYS_ACCTYPE WHERE (ACC_TYPE = @ACC_TYPE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TYPE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACC_TYPE, TYPE_NAME FROM dbo.SYS_ACCTYPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSGLDataset.SYS_ACCTYPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSGLDataset.SYS_ACCTYPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSGLDataset.SYS_ACCTYPEDataTable = New CSGLDataset.SYS_ACCTYPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSGLDataset.SYS_ACCTYPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSGLDataset) As Integer
            Return Me.Adapter.Update(dataSet, "SYS_ACCTYPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACC_TYPE As Byte, ByVal Original_TYPE_NAME As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACC_TYPE,Byte)
            If (Original_TYPE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TYPE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACC_TYPE As Byte, ByVal TYPE_NAME As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACC_TYPE,Byte)
            If (TYPE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TYPE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_TYPE As Byte, ByVal TYPE_NAME As String, ByVal Original_ACC_TYPE As Byte, ByVal Original_TYPE_NAME As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACC_TYPE,Byte)
            If (TYPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TYPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ACC_TYPE,Byte)
            If (Original_TYPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_TYPE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TYPE_NAME As String, ByVal Original_ACC_TYPE As Byte, ByVal Original_TYPE_NAME As String) As Integer
            Return Me.Update(Original_ACC_TYPE, TYPE_NAME, Original_ACC_TYPE, Original_TYPE_NAME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRN_ACCHISTORYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRN_ACCHISTORY"
            tableMapping.ColumnMappings.Add("HISTORYNO", "HISTORYNO")
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_YEAR", "ACC_YEAR")
            tableMapping.ColumnMappings.Add("ACC_PERIOD", "ACC_PERIOD")
            tableMapping.ColumnMappings.Add("TRANTYPE", "TRANTYPE")
            tableMapping.ColumnMappings.Add("TRAN_CODE", "TRAN_CODE")
            tableMapping.ColumnMappings.Add("TRAN_NO", "TRAN_NO")
            tableMapping.ColumnMappings.Add("TRAN_DATE", "TRAN_DATE")
            tableMapping.ColumnMappings.Add("ACC_AMT", "ACC_AMT")
            tableMapping.ColumnMappings.Add("TRAN_DESC", "TRAN_DESC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TRN_ACCHISTORY] WHERE (([HISTORYNO] = @Original_HISTORYNO) AND"& _ 
                " ([ACC_CODE] = @Original_ACC_CODE) AND ([ACC_YEAR] = @Original_ACC_YEAR) AND ([A"& _ 
                "CC_PERIOD] = @Original_ACC_PERIOD) AND ([TRANTYPE] = @Original_TRANTYPE) AND ([T"& _ 
                "RAN_CODE] = @Original_TRAN_CODE) AND ([TRAN_NO] = @Original_TRAN_NO) AND ([TRAN_"& _ 
                "DATE] = @Original_TRAN_DATE) AND ([ACC_AMT] = @Original_ACC_AMT) AND ((@IsNull_T"& _ 
                "RAN_DESC = 1 AND [TRAN_DESC] IS NULL) OR ([TRAN_DESC] = @Original_TRAN_DESC)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HISTORYNO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HISTORYNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRANTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRAN_DESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TRN_ACCHISTORY] ([ACC_CODE], [ACC_YEAR], [ACC_PERIOD], [TRANTY"& _ 
                "PE], [TRAN_CODE], [TRAN_NO], [TRAN_DATE], [ACC_AMT], [TRAN_DESC]) VALUES (@ACC_C"& _ 
                "ODE, @ACC_YEAR, @ACC_PERIOD, @TRANTYPE, @TRAN_CODE, @TRAN_NO, @TRAN_DATE, @ACC_A"& _ 
                "MT, @TRAN_DESC);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT HISTORYNO, ACC_CODE, ACC_YEAR, ACC_PERIOD, TRANTYPE, TR"& _ 
                "AN_CODE, TRAN_NO, TRAN_DATE, ACC_AMT, TRAN_DESC FROM TRN_ACCHISTORY WHERE (HISTO"& _ 
                "RYNO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TRN_ACCHISTORY] SET [ACC_CODE] = @ACC_CODE, [ACC_YEAR] = @ACC_YEAR,"& _ 
                " [ACC_PERIOD] = @ACC_PERIOD, [TRANTYPE] = @TRANTYPE, [TRAN_CODE] = @TRAN_CODE, ["& _ 
                "TRAN_NO] = @TRAN_NO, [TRAN_DATE] = @TRAN_DATE, [ACC_AMT] = @ACC_AMT, [TRAN_DESC]"& _ 
                " = @TRAN_DESC WHERE (([HISTORYNO] = @Original_HISTORYNO) AND ([ACC_CODE] = @Orig"& _ 
                "inal_ACC_CODE) AND ([ACC_YEAR] = @Original_ACC_YEAR) AND ([ACC_PERIOD] = @Origin"& _ 
                "al_ACC_PERIOD) AND ([TRANTYPE] = @Original_TRANTYPE) AND ([TRAN_CODE] = @Origina"& _ 
                "l_TRAN_CODE) AND ([TRAN_NO] = @Original_TRAN_NO) AND ([TRAN_DATE] = @Original_TR"& _ 
                "AN_DATE) AND ([ACC_AMT] = @Original_ACC_AMT) AND ((@IsNull_TRAN_DESC = 1 AND [TR"& _ 
                "AN_DESC] IS NULL) OR ([TRAN_DESC] = @Original_TRAN_DESC)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT HISTORYNO, A"& _ 
                "CC_CODE, ACC_YEAR, ACC_PERIOD, TRANTYPE, TRAN_CODE, TRAN_NO, TRAN_DATE, ACC_AMT,"& _ 
                " TRAN_DESC FROM TRN_ACCHISTORY WHERE (HISTORYNO = @HISTORYNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HISTORYNO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HISTORYNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRANTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AMT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AMT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRAN_DESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_DESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_DESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HISTORYNO", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "HISTORYNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT HISTORYNO, ACC_CODE, ACC_YEAR, ACC_PERIOD, TRANTYPE, TRAN_CODE, TRAN_NO, T"& _ 
                "RAN_DATE, ACC_AMT, TRAN_DESC FROM dbo.TRN_ACCHISTORY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSGLDataset.TRN_ACCHISTORYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSGLDataset.TRN_ACCHISTORYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSGLDataset.TRN_ACCHISTORYDataTable = New CSGLDataset.TRN_ACCHISTORYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSGLDataset.TRN_ACCHISTORYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSGLDataset) As Integer
            Return Me.Adapter.Update(dataSet, "TRN_ACCHISTORY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_HISTORYNO As Long, ByVal Original_ACC_CODE As String, ByVal Original_ACC_YEAR As Integer, ByVal Original_ACC_PERIOD As Byte, ByVal Original_TRANTYPE As String, ByVal Original_TRAN_CODE As String, ByVal Original_TRAN_NO As Integer, ByVal Original_TRAN_DATE As Date, ByVal Original_ACC_AMT As Decimal, ByVal Original_TRAN_DESC As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_HISTORYNO,Long)
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ACC_CODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACC_YEAR,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ACC_PERIOD,Byte)
            If (Original_TRANTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRANTYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TRANTYPE,String)
            End If
            If (Original_TRAN_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRAN_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TRAN_CODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_TRAN_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TRAN_DATE,Date)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ACC_AMT,Decimal)
            If (Original_TRAN_DESC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_TRAN_DESC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACC_CODE As String, ByVal ACC_YEAR As Integer, ByVal ACC_PERIOD As Byte, ByVal TRANTYPE As String, ByVal TRAN_CODE As String, ByVal TRAN_NO As Integer, ByVal TRAN_DATE As Date, ByVal ACC_AMT As Decimal, ByVal TRAN_DESC As String) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACC_YEAR,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ACC_PERIOD,Byte)
            If (TRANTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRANTYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRANTYPE,String)
            End If
            If (TRAN_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRAN_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRAN_CODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(TRAN_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(TRAN_DATE,Date)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ACC_AMT,Decimal)
            If (TRAN_DESC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TRAN_DESC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ACC_CODE As String,  _
                    ByVal ACC_YEAR As Integer,  _
                    ByVal ACC_PERIOD As Byte,  _
                    ByVal TRANTYPE As String,  _
                    ByVal TRAN_CODE As String,  _
                    ByVal TRAN_NO As Integer,  _
                    ByVal TRAN_DATE As Date,  _
                    ByVal ACC_AMT As Decimal,  _
                    ByVal TRAN_DESC As String,  _
                    ByVal Original_HISTORYNO As Long,  _
                    ByVal Original_ACC_CODE As String,  _
                    ByVal Original_ACC_YEAR As Integer,  _
                    ByVal Original_ACC_PERIOD As Byte,  _
                    ByVal Original_TRANTYPE As String,  _
                    ByVal Original_TRAN_CODE As String,  _
                    ByVal Original_TRAN_NO As Integer,  _
                    ByVal Original_TRAN_DATE As Date,  _
                    ByVal Original_ACC_AMT As Decimal,  _
                    ByVal Original_TRAN_DESC As String,  _
                    ByVal HISTORYNO As Long) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACC_YEAR,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ACC_PERIOD,Byte)
            If (TRANTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRANTYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRANTYPE,String)
            End If
            If (TRAN_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRAN_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRAN_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TRAN_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TRAN_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ACC_AMT,Decimal)
            If (TRAN_DESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TRAN_DESC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_HISTORYNO,Long)
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ACC_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ACC_YEAR,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ACC_PERIOD,Byte)
            If (Original_TRANTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRANTYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_TRANTYPE,String)
            End If
            If (Original_TRAN_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRAN_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_TRAN_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_TRAN_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_TRAN_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ACC_AMT,Decimal)
            If (Original_TRAN_DESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_TRAN_DESC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(HISTORYNO,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ACC_CODE As String,  _
                    ByVal ACC_YEAR As Integer,  _
                    ByVal ACC_PERIOD As Byte,  _
                    ByVal TRANTYPE As String,  _
                    ByVal TRAN_CODE As String,  _
                    ByVal TRAN_NO As Integer,  _
                    ByVal TRAN_DATE As Date,  _
                    ByVal ACC_AMT As Decimal,  _
                    ByVal TRAN_DESC As String,  _
                    ByVal Original_HISTORYNO As Long,  _
                    ByVal Original_ACC_CODE As String,  _
                    ByVal Original_ACC_YEAR As Integer,  _
                    ByVal Original_ACC_PERIOD As Byte,  _
                    ByVal Original_TRANTYPE As String,  _
                    ByVal Original_TRAN_CODE As String,  _
                    ByVal Original_TRAN_NO As Integer,  _
                    ByVal Original_TRAN_DATE As Date,  _
                    ByVal Original_ACC_AMT As Decimal,  _
                    ByVal Original_TRAN_DESC As String) As Integer
            Return Me.Update(ACC_CODE, ACC_YEAR, ACC_PERIOD, TRANTYPE, TRAN_CODE, TRAN_NO, TRAN_DATE, ACC_AMT, TRAN_DESC, Original_HISTORYNO, Original_ACC_CODE, Original_ACC_YEAR, Original_ACC_PERIOD, Original_TRANTYPE, Original_TRAN_CODE, Original_TRAN_NO, Original_TRAN_DATE, Original_ACC_AMT, Original_TRAN_DESC, Original_HISTORYNO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRN_ACCPERIODTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRN_ACCPERIOD"
            tableMapping.ColumnMappings.Add("ACCPERIODNO", "ACCPERIODNO")
            tableMapping.ColumnMappings.Add("ACC_YEAR", "ACC_YEAR")
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_OPENING", "ACC_OPENING")
            tableMapping.ColumnMappings.Add("ACC_PERIOD01", "ACC_PERIOD01")
            tableMapping.ColumnMappings.Add("ACC_PERIOD02", "ACC_PERIOD02")
            tableMapping.ColumnMappings.Add("ACC_PERIOD03", "ACC_PERIOD03")
            tableMapping.ColumnMappings.Add("ACC_PERIOD04", "ACC_PERIOD04")
            tableMapping.ColumnMappings.Add("ACC_PERIOD05", "ACC_PERIOD05")
            tableMapping.ColumnMappings.Add("ACC_PERIOD06", "ACC_PERIOD06")
            tableMapping.ColumnMappings.Add("ACC_PERIOD07", "ACC_PERIOD07")
            tableMapping.ColumnMappings.Add("ACC_PERIOD08", "ACC_PERIOD08")
            tableMapping.ColumnMappings.Add("ACC_PERIOD09", "ACC_PERIOD09")
            tableMapping.ColumnMappings.Add("ACC_PERIOD10", "ACC_PERIOD10")
            tableMapping.ColumnMappings.Add("ACC_PERIOD11", "ACC_PERIOD11")
            tableMapping.ColumnMappings.Add("ACC_PERIOD12", "ACC_PERIOD12")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TRN_ACCPERIOD] WHERE (([ACCPERIODNO] = @Original_ACCPERIODNO) "& _ 
                "AND ([ACC_YEAR] = @Original_ACC_YEAR) AND ([ACC_CODE] = @Original_ACC_CODE) AND "& _ 
                "([ACC_OPENING] = @Original_ACC_OPENING) AND ([ACC_PERIOD01] = @Original_ACC_PERI"& _ 
                "OD01) AND ([ACC_PERIOD02] = @Original_ACC_PERIOD02) AND ([ACC_PERIOD03] = @Origi"& _ 
                "nal_ACC_PERIOD03) AND ([ACC_PERIOD04] = @Original_ACC_PERIOD04) AND ([ACC_PERIOD"& _ 
                "05] = @Original_ACC_PERIOD05) AND ([ACC_PERIOD06] = @Original_ACC_PERIOD06) AND "& _ 
                "([ACC_PERIOD07] = @Original_ACC_PERIOD07) AND ([ACC_PERIOD08] = @Original_ACC_PE"& _ 
                "RIOD08) AND ([ACC_PERIOD09] = @Original_ACC_PERIOD09) AND ([ACC_PERIOD10] = @Ori"& _ 
                "ginal_ACC_PERIOD10) AND ([ACC_PERIOD11] = @Original_ACC_PERIOD11) AND ([ACC_PERI"& _ 
                "OD12] = @Original_ACC_PERIOD12))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCPERIODNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCPERIODNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_OPENING", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_OPENING", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD01", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD02", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD03", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD04", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD05", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD05", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD06", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD06", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD07", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD07", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD08", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD08", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD09", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD09", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD10", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD10", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD11", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD11", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD12", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD12", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TRN_ACCPERIOD] ([ACC_YEAR], [ACC_CODE], [ACC_OPENING], [ACC_PE"& _ 
                "RIOD01], [ACC_PERIOD02], [ACC_PERIOD03], [ACC_PERIOD04], [ACC_PERIOD05], [ACC_PE"& _ 
                "RIOD06], [ACC_PERIOD07], [ACC_PERIOD08], [ACC_PERIOD09], [ACC_PERIOD10], [ACC_PE"& _ 
                "RIOD11], [ACC_PERIOD12]) VALUES (@ACC_YEAR, @ACC_CODE, @ACC_OPENING, @ACC_PERIOD"& _ 
                "01, @ACC_PERIOD02, @ACC_PERIOD03, @ACC_PERIOD04, @ACC_PERIOD05, @ACC_PERIOD06, @"& _ 
                "ACC_PERIOD07, @ACC_PERIOD08, @ACC_PERIOD09, @ACC_PERIOD10, @ACC_PERIOD11, @ACC_P"& _ 
                "ERIOD12);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCPERIODNO, ACC_YEAR, ACC_CODE, ACC_OPENING, ACC_PERIOD01, AC"& _ 
                "C_PERIOD02, ACC_PERIOD03, ACC_PERIOD04, ACC_PERIOD05, ACC_PERIOD06, ACC_PERIOD07"& _ 
                ", ACC_PERIOD08, ACC_PERIOD09, ACC_PERIOD10, ACC_PERIOD11, ACC_PERIOD12 FROM TRN_"& _ 
                "ACCPERIOD WHERE (ACCPERIODNO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_OPENING", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_OPENING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD01", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD02", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD03", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD04", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD05", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD05", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD06", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD06", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD07", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD07", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD08", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD08", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD09", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD09", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD10", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD11", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD12", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TRN_ACCPERIOD] SET [ACC_YEAR] = @ACC_YEAR, [ACC_CODE] = @ACC_CODE, "& _ 
                "[ACC_OPENING] = @ACC_OPENING, [ACC_PERIOD01] = @ACC_PERIOD01, [ACC_PERIOD02] = @"& _ 
                "ACC_PERIOD02, [ACC_PERIOD03] = @ACC_PERIOD03, [ACC_PERIOD04] = @ACC_PERIOD04, [A"& _ 
                "CC_PERIOD05] = @ACC_PERIOD05, [ACC_PERIOD06] = @ACC_PERIOD06, [ACC_PERIOD07] = @"& _ 
                "ACC_PERIOD07, [ACC_PERIOD08] = @ACC_PERIOD08, [ACC_PERIOD09] = @ACC_PERIOD09, [A"& _ 
                "CC_PERIOD10] = @ACC_PERIOD10, [ACC_PERIOD11] = @ACC_PERIOD11, [ACC_PERIOD12] = @"& _ 
                "ACC_PERIOD12 WHERE (([ACCPERIODNO] = @Original_ACCPERIODNO) AND ([ACC_YEAR] = @O"& _ 
                "riginal_ACC_YEAR) AND ([ACC_CODE] = @Original_ACC_CODE) AND ([ACC_OPENING] = @Or"& _ 
                "iginal_ACC_OPENING) AND ([ACC_PERIOD01] = @Original_ACC_PERIOD01) AND ([ACC_PERI"& _ 
                "OD02] = @Original_ACC_PERIOD02) AND ([ACC_PERIOD03] = @Original_ACC_PERIOD03) AN"& _ 
                "D ([ACC_PERIOD04] = @Original_ACC_PERIOD04) AND ([ACC_PERIOD05] = @Original_ACC_"& _ 
                "PERIOD05) AND ([ACC_PERIOD06] = @Original_ACC_PERIOD06) AND ([ACC_PERIOD07] = @O"& _ 
                "riginal_ACC_PERIOD07) AND ([ACC_PERIOD08] = @Original_ACC_PERIOD08) AND ([ACC_PE"& _ 
                "RIOD09] = @Original_ACC_PERIOD09) AND ([ACC_PERIOD10] = @Original_ACC_PERIOD10) "& _ 
                "AND ([ACC_PERIOD11] = @Original_ACC_PERIOD11) AND ([ACC_PERIOD12] = @Original_AC"& _ 
                "C_PERIOD12));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCPERIODNO, ACC_YEAR, ACC_CODE, ACC_OPENING, ACC_PERIOD01"& _ 
                ", ACC_PERIOD02, ACC_PERIOD03, ACC_PERIOD04, ACC_PERIOD05, ACC_PERIOD06, ACC_PERI"& _ 
                "OD07, ACC_PERIOD08, ACC_PERIOD09, ACC_PERIOD10, ACC_PERIOD11, ACC_PERIOD12 FROM "& _ 
                "TRN_ACCPERIOD WHERE (ACCPERIODNO = @ACCPERIODNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_OPENING", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_OPENING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD01", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD02", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD03", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD04", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD05", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD05", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD06", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD06", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD07", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD07", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD08", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD08", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD09", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD09", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD10", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD11", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PERIOD12", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCPERIODNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCPERIODNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_OPENING", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_OPENING", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD01", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD02", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD03", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD04", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD05", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD05", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD06", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD06", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD07", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD07", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD08", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD08", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD09", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD09", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD10", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD10", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD11", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD11", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PERIOD12", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PERIOD12", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCPERIODNO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCPERIODNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCPERIODNO, ACC_YEAR, ACC_CODE, ACC_OPENING, ACC_PERIOD01, ACC_PERIOD02, "& _ 
                "ACC_PERIOD03, ACC_PERIOD04, ACC_PERIOD05, ACC_PERIOD06, ACC_PERIOD07, ACC_PERIOD"& _ 
                "08, ACC_PERIOD09, ACC_PERIOD10, ACC_PERIOD11, ACC_PERIOD12 FROM dbo.TRN_ACCPERIO"& _ 
                "D"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSGLDataset.TRN_ACCPERIODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSGLDataset.TRN_ACCPERIODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSGLDataset.TRN_ACCPERIODDataTable = New CSGLDataset.TRN_ACCPERIODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSGLDataset.TRN_ACCPERIODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSGLDataset) As Integer
            Return Me.Adapter.Update(dataSet, "TRN_ACCPERIOD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ACCPERIODNO As Integer,  _
                    ByVal Original_ACC_YEAR As Integer,  _
                    ByVal Original_ACC_CODE As String,  _
                    ByVal Original_ACC_OPENING As Decimal,  _
                    ByVal Original_ACC_PERIOD01 As Decimal,  _
                    ByVal Original_ACC_PERIOD02 As Decimal,  _
                    ByVal Original_ACC_PERIOD03 As Decimal,  _
                    ByVal Original_ACC_PERIOD04 As Decimal,  _
                    ByVal Original_ACC_PERIOD05 As Decimal,  _
                    ByVal Original_ACC_PERIOD06 As Decimal,  _
                    ByVal Original_ACC_PERIOD07 As Decimal,  _
                    ByVal Original_ACC_PERIOD08 As Decimal,  _
                    ByVal Original_ACC_PERIOD09 As Decimal,  _
                    ByVal Original_ACC_PERIOD10 As Decimal,  _
                    ByVal Original_ACC_PERIOD11 As Decimal,  _
                    ByVal Original_ACC_PERIOD12 As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACCPERIODNO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ACC_YEAR,Integer)
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACC_CODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ACC_OPENING,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ACC_PERIOD01,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ACC_PERIOD02,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ACC_PERIOD03,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ACC_PERIOD04,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ACC_PERIOD05,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ACC_PERIOD06,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ACC_PERIOD07,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ACC_PERIOD08,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ACC_PERIOD09,Decimal)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ACC_PERIOD10,Decimal)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ACC_PERIOD11,Decimal)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_ACC_PERIOD12,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACC_YEAR As Integer, ByVal ACC_CODE As String, ByVal ACC_OPENING As Decimal, ByVal ACC_PERIOD01 As Decimal, ByVal ACC_PERIOD02 As Decimal, ByVal ACC_PERIOD03 As Decimal, ByVal ACC_PERIOD04 As Decimal, ByVal ACC_PERIOD05 As Decimal, ByVal ACC_PERIOD06 As Decimal, ByVal ACC_PERIOD07 As Decimal, ByVal ACC_PERIOD08 As Decimal, ByVal ACC_PERIOD09 As Decimal, ByVal ACC_PERIOD10 As Decimal, ByVal ACC_PERIOD11 As Decimal, ByVal ACC_PERIOD12 As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACC_YEAR,Integer)
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACC_CODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ACC_OPENING,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ACC_PERIOD01,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ACC_PERIOD02,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ACC_PERIOD03,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(ACC_PERIOD04,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ACC_PERIOD05,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ACC_PERIOD06,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ACC_PERIOD07,Decimal)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ACC_PERIOD08,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ACC_PERIOD09,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ACC_PERIOD10,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(ACC_PERIOD11,Decimal)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(ACC_PERIOD12,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ACC_YEAR As Integer,  _
                    ByVal ACC_CODE As String,  _
                    ByVal ACC_OPENING As Decimal,  _
                    ByVal ACC_PERIOD01 As Decimal,  _
                    ByVal ACC_PERIOD02 As Decimal,  _
                    ByVal ACC_PERIOD03 As Decimal,  _
                    ByVal ACC_PERIOD04 As Decimal,  _
                    ByVal ACC_PERIOD05 As Decimal,  _
                    ByVal ACC_PERIOD06 As Decimal,  _
                    ByVal ACC_PERIOD07 As Decimal,  _
                    ByVal ACC_PERIOD08 As Decimal,  _
                    ByVal ACC_PERIOD09 As Decimal,  _
                    ByVal ACC_PERIOD10 As Decimal,  _
                    ByVal ACC_PERIOD11 As Decimal,  _
                    ByVal ACC_PERIOD12 As Decimal,  _
                    ByVal Original_ACCPERIODNO As Integer,  _
                    ByVal Original_ACC_YEAR As Integer,  _
                    ByVal Original_ACC_CODE As String,  _
                    ByVal Original_ACC_OPENING As Decimal,  _
                    ByVal Original_ACC_PERIOD01 As Decimal,  _
                    ByVal Original_ACC_PERIOD02 As Decimal,  _
                    ByVal Original_ACC_PERIOD03 As Decimal,  _
                    ByVal Original_ACC_PERIOD04 As Decimal,  _
                    ByVal Original_ACC_PERIOD05 As Decimal,  _
                    ByVal Original_ACC_PERIOD06 As Decimal,  _
                    ByVal Original_ACC_PERIOD07 As Decimal,  _
                    ByVal Original_ACC_PERIOD08 As Decimal,  _
                    ByVal Original_ACC_PERIOD09 As Decimal,  _
                    ByVal Original_ACC_PERIOD10 As Decimal,  _
                    ByVal Original_ACC_PERIOD11 As Decimal,  _
                    ByVal Original_ACC_PERIOD12 As Decimal,  _
                    ByVal ACCPERIODNO As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACC_YEAR,Integer)
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACC_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ACC_OPENING,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ACC_PERIOD01,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ACC_PERIOD02,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ACC_PERIOD03,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ACC_PERIOD04,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ACC_PERIOD05,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ACC_PERIOD06,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ACC_PERIOD07,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ACC_PERIOD08,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ACC_PERIOD09,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ACC_PERIOD10,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ACC_PERIOD11,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ACC_PERIOD12,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ACCPERIODNO,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ACC_YEAR,Integer)
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ACC_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ACC_OPENING,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ACC_PERIOD01,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ACC_PERIOD02,Decimal)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ACC_PERIOD03,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ACC_PERIOD04,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ACC_PERIOD05,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ACC_PERIOD06,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ACC_PERIOD07,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ACC_PERIOD08,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ACC_PERIOD09,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ACC_PERIOD10,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ACC_PERIOD11,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_ACC_PERIOD12,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(ACCPERIODNO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ACC_YEAR As Integer,  _
                    ByVal ACC_CODE As String,  _
                    ByVal ACC_OPENING As Decimal,  _
                    ByVal ACC_PERIOD01 As Decimal,  _
                    ByVal ACC_PERIOD02 As Decimal,  _
                    ByVal ACC_PERIOD03 As Decimal,  _
                    ByVal ACC_PERIOD04 As Decimal,  _
                    ByVal ACC_PERIOD05 As Decimal,  _
                    ByVal ACC_PERIOD06 As Decimal,  _
                    ByVal ACC_PERIOD07 As Decimal,  _
                    ByVal ACC_PERIOD08 As Decimal,  _
                    ByVal ACC_PERIOD09 As Decimal,  _
                    ByVal ACC_PERIOD10 As Decimal,  _
                    ByVal ACC_PERIOD11 As Decimal,  _
                    ByVal ACC_PERIOD12 As Decimal,  _
                    ByVal Original_ACCPERIODNO As Integer,  _
                    ByVal Original_ACC_YEAR As Integer,  _
                    ByVal Original_ACC_CODE As String,  _
                    ByVal Original_ACC_OPENING As Decimal,  _
                    ByVal Original_ACC_PERIOD01 As Decimal,  _
                    ByVal Original_ACC_PERIOD02 As Decimal,  _
                    ByVal Original_ACC_PERIOD03 As Decimal,  _
                    ByVal Original_ACC_PERIOD04 As Decimal,  _
                    ByVal Original_ACC_PERIOD05 As Decimal,  _
                    ByVal Original_ACC_PERIOD06 As Decimal,  _
                    ByVal Original_ACC_PERIOD07 As Decimal,  _
                    ByVal Original_ACC_PERIOD08 As Decimal,  _
                    ByVal Original_ACC_PERIOD09 As Decimal,  _
                    ByVal Original_ACC_PERIOD10 As Decimal,  _
                    ByVal Original_ACC_PERIOD11 As Decimal,  _
                    ByVal Original_ACC_PERIOD12 As Decimal) As Integer
            Return Me.Update(ACC_YEAR, ACC_CODE, ACC_OPENING, ACC_PERIOD01, ACC_PERIOD02, ACC_PERIOD03, ACC_PERIOD04, ACC_PERIOD05, ACC_PERIOD06, ACC_PERIOD07, ACC_PERIOD08, ACC_PERIOD09, ACC_PERIOD10, ACC_PERIOD11, ACC_PERIOD12, Original_ACCPERIODNO, Original_ACC_YEAR, Original_ACC_CODE, Original_ACC_OPENING, Original_ACC_PERIOD01, Original_ACC_PERIOD02, Original_ACC_PERIOD03, Original_ACC_PERIOD04, Original_ACC_PERIOD05, Original_ACC_PERIOD06, Original_ACC_PERIOD07, Original_ACC_PERIOD08, Original_ACC_PERIOD09, Original_ACC_PERIOD10, Original_ACC_PERIOD11, Original_ACC_PERIOD12, Original_ACCPERIODNO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_CURRENCYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_CURRENCY"
            tableMapping.ColumnMappings.Add("CURR_CODE", "CURR_CODE")
            tableMapping.ColumnMappings.Add("CURR_NAME", "CURR_NAME")
            tableMapping.ColumnMappings.Add("CURR_RATE", "CURR_RATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_CURRENCY] WHERE (([CURR_CODE] = @Original_CURR_CODE) AND ("& _ 
                "(@IsNull_CURR_NAME = 1 AND [CURR_NAME] IS NULL) OR ([CURR_NAME] = @Original_CURR"& _ 
                "_NAME)) AND ([CURR_RATE] = @Original_CURR_RATE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_CURRENCY] ([CURR_CODE], [CURR_NAME], [CURR_RATE]) VALUES ("& _ 
                "@CURR_CODE, @CURR_NAME, @CURR_RATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CURR_CODE, CURR_NAME, CURR_RATE FRO"& _ 
                "M MST_CURRENCY WHERE (CURR_CODE = @CURR_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_CURRENCY] SET [CURR_CODE] = @CURR_CODE, [CURR_NAME] = @CURR_NAM"& _ 
                "E, [CURR_RATE] = @CURR_RATE WHERE (([CURR_CODE] = @Original_CURR_CODE) AND ((@Is"& _ 
                "Null_CURR_NAME = 1 AND [CURR_NAME] IS NULL) OR ([CURR_NAME] = @Original_CURR_NAM"& _ 
                "E)) AND ([CURR_RATE] = @Original_CURR_RATE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CURR_CODE, CURR_NAME, CURR"& _ 
                "_RATE FROM MST_CURRENCY WHERE (CURR_CODE = @CURR_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CURR_CODE, CURR_NAME, CURR_RATE FROM dbo.MST_CURRENCY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSGLDataset.MST_CURRENCYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSGLDataset.MST_CURRENCYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSGLDataset.MST_CURRENCYDataTable = New CSGLDataset.MST_CURRENCYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSGLDataset.MST_CURRENCYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSGLDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_CURRENCY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CURR_CODE As String, ByVal Original_CURR_NAME As String, ByVal Original_CURR_RATE As Decimal) As Integer
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_CURR_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CURR_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CURR_RATE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CURR_CODE As String, ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal) As Integer
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CURR_CODE,String)
            End If
            If (CURR_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CURR_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CURR_RATE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CURR_CODE As String, ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal, ByVal Original_CURR_CODE As String, ByVal Original_CURR_NAME As String, ByVal Original_CURR_RATE As Decimal) As Integer
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CURR_CODE,String)
            End If
            If (CURR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CURR_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CURR_RATE,Decimal)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_CURR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CURR_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CURR_RATE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal, ByVal Original_CURR_CODE As String, ByVal Original_CURR_NAME As String, ByVal Original_CURR_RATE As Decimal) As Integer
            Return Me.Update(Original_CURR_CODE, CURR_NAME, CURR_RATE, Original_CURR_CODE, Original_CURR_NAME, Original_CURR_RATE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QueriesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckAccExists"
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckCurrencyExists"
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.InputOutput, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckAccExists(ByVal ACC_CODE As String, ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(0),Global.System.Data.SqlClient.SqlCommand)
            If (ACC_CODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ACC_CODE,String)
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(2).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckCurrencyExists(ByVal CURR_CODE As String, ByRef DATAEXISTS As Global.System.Nullable(Of Integer)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(1),Global.System.Data.SqlClient.SqlCommand)
            If (CURR_CODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(CURR_CODE,String)
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Integer)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Integer)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Integer)(CType(command.Parameters(2).Value,Integer))
            End If
            Return returnValue
        End Function
    End Class
End Namespace
