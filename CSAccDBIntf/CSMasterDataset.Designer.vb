'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1434
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CSMasterDataset"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CSMasterDataset
    Inherits Global.System.Data.DataSet
    
    Private tableMST_COMPANY As MST_COMPANYDataTable
    
    Private tableMST_CURRENCY As MST_CURRENCYDataTable
    
    Private tableMST_ACCOUNT As MST_ACCOUNTDataTable
    
    Private tableMST_BANK As MST_BANKDataTable
    
    Private tableMST_CUSTTYPE As MST_CUSTTYPEDataTable
    
    Private tableMST_SALESMAN As MST_SALESMANDataTable
    
    Private tableMST_TAX As MST_TAXDataTable
    
    Private tableMST_CUSTOMER As MST_CUSTOMERDataTable
    
    Private relationFK_MST_COMPANY_MST_CURRENCY As Global.System.Data.DataRelation
    
    Private relationFK_MST_COMPANY_AP As Global.System.Data.DataRelation
    
    Private relationFK_MST_COMPANY_APDISC As Global.System.Data.DataRelation
    
    Private relationFK_MST_COMPANY_AR As Global.System.Data.DataRelation
    
    Private relationFK_MST_COMPANY_ARDISC As Global.System.Data.DataRelation
    
    Private relationFK_MST_BANK_ACC_CODE As Global.System.Data.DataRelation
    
    Private relationFK_MST_TAX_MST_ACCOUNT As Global.System.Data.DataRelation
    
    Private relationFK_MST_CUSTOMER_MST_CURRENCY As Global.System.Data.DataRelation
    
    Private relationFK_MST_CUSTOMER_MST_CUSTTYPE As Global.System.Data.DataRelation
    
    Private relationFK_MST_CUSTOMER_MST_SALESMAN As Global.System.Data.DataRelation
    
    Private relationFK_MST_CUSTOMER_MST_TAX1 As Global.System.Data.DataRelation
    
    Private relationFK_MST_CUSTOMER_MST_TAX2 As Global.System.Data.DataRelation
    
    Private relationFK_MST_COMPANY_ACC_SALES As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MST_COMPANY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_COMPANYDataTable(ds.Tables("MST_COMPANY")))
            End If
            If (Not (ds.Tables("MST_CURRENCY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CURRENCYDataTable(ds.Tables("MST_CURRENCY")))
            End If
            If (Not (ds.Tables("MST_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCOUNTDataTable(ds.Tables("MST_ACCOUNT")))
            End If
            If (Not (ds.Tables("MST_BANK")) Is Nothing) Then
                MyBase.Tables.Add(New MST_BANKDataTable(ds.Tables("MST_BANK")))
            End If
            If (Not (ds.Tables("MST_CUSTTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CUSTTYPEDataTable(ds.Tables("MST_CUSTTYPE")))
            End If
            If (Not (ds.Tables("MST_SALESMAN")) Is Nothing) Then
                MyBase.Tables.Add(New MST_SALESMANDataTable(ds.Tables("MST_SALESMAN")))
            End If
            If (Not (ds.Tables("MST_TAX")) Is Nothing) Then
                MyBase.Tables.Add(New MST_TAXDataTable(ds.Tables("MST_TAX")))
            End If
            If (Not (ds.Tables("MST_CUSTOMER")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CUSTOMERDataTable(ds.Tables("MST_CUSTOMER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_COMPANY() As MST_COMPANYDataTable
        Get
            Return Me.tableMST_COMPANY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_CURRENCY() As MST_CURRENCYDataTable
        Get
            Return Me.tableMST_CURRENCY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_ACCOUNT() As MST_ACCOUNTDataTable
        Get
            Return Me.tableMST_ACCOUNT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_BANK() As MST_BANKDataTable
        Get
            Return Me.tableMST_BANK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_CUSTTYPE() As MST_CUSTTYPEDataTable
        Get
            Return Me.tableMST_CUSTTYPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_SALESMAN() As MST_SALESMANDataTable
        Get
            Return Me.tableMST_SALESMAN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_TAX() As MST_TAXDataTable
        Get
            Return Me.tableMST_TAX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MST_CUSTOMER() As MST_CUSTOMERDataTable
        Get
            Return Me.tableMST_CUSTOMER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CSMasterDataset = CType(MyBase.Clone,CSMasterDataset)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MST_COMPANY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_COMPANYDataTable(ds.Tables("MST_COMPANY")))
            End If
            If (Not (ds.Tables("MST_CURRENCY")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CURRENCYDataTable(ds.Tables("MST_CURRENCY")))
            End If
            If (Not (ds.Tables("MST_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New MST_ACCOUNTDataTable(ds.Tables("MST_ACCOUNT")))
            End If
            If (Not (ds.Tables("MST_BANK")) Is Nothing) Then
                MyBase.Tables.Add(New MST_BANKDataTable(ds.Tables("MST_BANK")))
            End If
            If (Not (ds.Tables("MST_CUSTTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CUSTTYPEDataTable(ds.Tables("MST_CUSTTYPE")))
            End If
            If (Not (ds.Tables("MST_SALESMAN")) Is Nothing) Then
                MyBase.Tables.Add(New MST_SALESMANDataTable(ds.Tables("MST_SALESMAN")))
            End If
            If (Not (ds.Tables("MST_TAX")) Is Nothing) Then
                MyBase.Tables.Add(New MST_TAXDataTable(ds.Tables("MST_TAX")))
            End If
            If (Not (ds.Tables("MST_CUSTOMER")) Is Nothing) Then
                MyBase.Tables.Add(New MST_CUSTOMERDataTable(ds.Tables("MST_CUSTOMER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMST_COMPANY = CType(MyBase.Tables("MST_COMPANY"),MST_COMPANYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_COMPANY) Is Nothing) Then
                Me.tableMST_COMPANY.InitVars
            End If
        End If
        Me.tableMST_CURRENCY = CType(MyBase.Tables("MST_CURRENCY"),MST_CURRENCYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_CURRENCY) Is Nothing) Then
                Me.tableMST_CURRENCY.InitVars
            End If
        End If
        Me.tableMST_ACCOUNT = CType(MyBase.Tables("MST_ACCOUNT"),MST_ACCOUNTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_ACCOUNT) Is Nothing) Then
                Me.tableMST_ACCOUNT.InitVars
            End If
        End If
        Me.tableMST_BANK = CType(MyBase.Tables("MST_BANK"),MST_BANKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_BANK) Is Nothing) Then
                Me.tableMST_BANK.InitVars
            End If
        End If
        Me.tableMST_CUSTTYPE = CType(MyBase.Tables("MST_CUSTTYPE"),MST_CUSTTYPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_CUSTTYPE) Is Nothing) Then
                Me.tableMST_CUSTTYPE.InitVars
            End If
        End If
        Me.tableMST_SALESMAN = CType(MyBase.Tables("MST_SALESMAN"),MST_SALESMANDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_SALESMAN) Is Nothing) Then
                Me.tableMST_SALESMAN.InitVars
            End If
        End If
        Me.tableMST_TAX = CType(MyBase.Tables("MST_TAX"),MST_TAXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_TAX) Is Nothing) Then
                Me.tableMST_TAX.InitVars
            End If
        End If
        Me.tableMST_CUSTOMER = CType(MyBase.Tables("MST_CUSTOMER"),MST_CUSTOMERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMST_CUSTOMER) Is Nothing) Then
                Me.tableMST_CUSTOMER.InitVars
            End If
        End If
        Me.relationFK_MST_COMPANY_MST_CURRENCY = Me.Relations("FK_MST_COMPANY_MST_CURRENCY")
        Me.relationFK_MST_COMPANY_AP = Me.Relations("FK_MST_COMPANY_AP")
        Me.relationFK_MST_COMPANY_APDISC = Me.Relations("FK_MST_COMPANY_APDISC")
        Me.relationFK_MST_COMPANY_AR = Me.Relations("FK_MST_COMPANY_AR")
        Me.relationFK_MST_COMPANY_ARDISC = Me.Relations("FK_MST_COMPANY_ARDISC")
        Me.relationFK_MST_BANK_ACC_CODE = Me.Relations("FK_MST_BANK_ACC_CODE")
        Me.relationFK_MST_TAX_MST_ACCOUNT = Me.Relations("FK_MST_TAX_MST_ACCOUNT")
        Me.relationFK_MST_CUSTOMER_MST_CURRENCY = Me.Relations("FK_MST_CUSTOMER_MST_CURRENCY")
        Me.relationFK_MST_CUSTOMER_MST_CUSTTYPE = Me.Relations("FK_MST_CUSTOMER_MST_CUSTTYPE")
        Me.relationFK_MST_CUSTOMER_MST_SALESMAN = Me.Relations("FK_MST_CUSTOMER_MST_SALESMAN")
        Me.relationFK_MST_CUSTOMER_MST_TAX1 = Me.Relations("FK_MST_CUSTOMER_MST_TAX1")
        Me.relationFK_MST_CUSTOMER_MST_TAX2 = Me.Relations("FK_MST_CUSTOMER_MST_TAX2")
        Me.relationFK_MST_COMPANY_ACC_SALES = Me.Relations("FK_MST_COMPANY_ACC_SALES")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CSMasterDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CSMasterDataset.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMST_COMPANY = New MST_COMPANYDataTable
        MyBase.Tables.Add(Me.tableMST_COMPANY)
        Me.tableMST_CURRENCY = New MST_CURRENCYDataTable
        MyBase.Tables.Add(Me.tableMST_CURRENCY)
        Me.tableMST_ACCOUNT = New MST_ACCOUNTDataTable
        MyBase.Tables.Add(Me.tableMST_ACCOUNT)
        Me.tableMST_BANK = New MST_BANKDataTable
        MyBase.Tables.Add(Me.tableMST_BANK)
        Me.tableMST_CUSTTYPE = New MST_CUSTTYPEDataTable
        MyBase.Tables.Add(Me.tableMST_CUSTTYPE)
        Me.tableMST_SALESMAN = New MST_SALESMANDataTable(false)
        MyBase.Tables.Add(Me.tableMST_SALESMAN)
        Me.tableMST_TAX = New MST_TAXDataTable
        MyBase.Tables.Add(Me.tableMST_TAX)
        Me.tableMST_CUSTOMER = New MST_CUSTOMERDataTable
        MyBase.Tables.Add(Me.tableMST_CUSTOMER)
        Me.relationFK_MST_COMPANY_MST_CURRENCY = New Global.System.Data.DataRelation("FK_MST_COMPANY_MST_CURRENCY", New Global.System.Data.DataColumn() {Me.tableMST_CURRENCY.CURR_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_COMPANY.CURR_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_COMPANY_MST_CURRENCY)
        Me.relationFK_MST_COMPANY_AP = New Global.System.Data.DataRelation("FK_MST_COMPANY_AP", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_COMPANY.ACC_APColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_COMPANY_AP)
        Me.relationFK_MST_COMPANY_APDISC = New Global.System.Data.DataRelation("FK_MST_COMPANY_APDISC", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_COMPANY.ACC_APDISCColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_COMPANY_APDISC)
        Me.relationFK_MST_COMPANY_AR = New Global.System.Data.DataRelation("FK_MST_COMPANY_AR", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_COMPANY.ACC_ARColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_COMPANY_AR)
        Me.relationFK_MST_COMPANY_ARDISC = New Global.System.Data.DataRelation("FK_MST_COMPANY_ARDISC", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_COMPANY.ACC_ARDISCColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_COMPANY_ARDISC)
        Me.relationFK_MST_BANK_ACC_CODE = New Global.System.Data.DataRelation("FK_MST_BANK_ACC_CODE", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_BANK.ACC_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_BANK_ACC_CODE)
        Me.relationFK_MST_TAX_MST_ACCOUNT = New Global.System.Data.DataRelation("FK_MST_TAX_MST_ACCOUNT", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_TAX.TAX_ACCColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_TAX_MST_ACCOUNT)
        Me.relationFK_MST_CUSTOMER_MST_CURRENCY = New Global.System.Data.DataRelation("FK_MST_CUSTOMER_MST_CURRENCY", New Global.System.Data.DataColumn() {Me.tableMST_CURRENCY.CURR_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_CUSTOMER.CURR_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_CUSTOMER_MST_CURRENCY)
        Me.relationFK_MST_CUSTOMER_MST_CUSTTYPE = New Global.System.Data.DataRelation("FK_MST_CUSTOMER_MST_CUSTTYPE", New Global.System.Data.DataColumn() {Me.tableMST_CUSTTYPE.CUSTTYPE_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_CUSTOMER.CUSTTYPE_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_CUSTOMER_MST_CUSTTYPE)
        Me.relationFK_MST_CUSTOMER_MST_SALESMAN = New Global.System.Data.DataRelation("FK_MST_CUSTOMER_MST_SALESMAN", New Global.System.Data.DataColumn() {Me.tableMST_SALESMAN.SALES_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_CUSTOMER.SALES_CODEColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_CUSTOMER_MST_SALESMAN)
        Me.relationFK_MST_CUSTOMER_MST_TAX1 = New Global.System.Data.DataRelation("FK_MST_CUSTOMER_MST_TAX1", New Global.System.Data.DataColumn() {Me.tableMST_TAX.TAX_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_CUSTOMER.TAX_CODE1Column}, false)
        Me.Relations.Add(Me.relationFK_MST_CUSTOMER_MST_TAX1)
        Me.relationFK_MST_CUSTOMER_MST_TAX2 = New Global.System.Data.DataRelation("FK_MST_CUSTOMER_MST_TAX2", New Global.System.Data.DataColumn() {Me.tableMST_TAX.TAX_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_CUSTOMER.TAX_CODE2Column}, false)
        Me.Relations.Add(Me.relationFK_MST_CUSTOMER_MST_TAX2)
        Me.relationFK_MST_COMPANY_ACC_SALES = New Global.System.Data.DataRelation("FK_MST_COMPANY_ACC_SALES", New Global.System.Data.DataColumn() {Me.tableMST_ACCOUNT.ACC_CODEColumn}, New Global.System.Data.DataColumn() {Me.tableMST_COMPANY.ACC_SALESColumn}, false)
        Me.Relations.Add(Me.relationFK_MST_COMPANY_ACC_SALES)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_COMPANY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_CURRENCY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_ACCOUNT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_BANK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_CUSTTYPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_SALESMAN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_TAX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMST_CUSTOMER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CSMasterDataset = New CSMasterDataset
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.MST_SALESMAN.SALES_NAMEColumn.Expression = "LAST_NAME + ' '+FIRST_NAME"
    End Sub
    
    Public Delegate Sub MST_COMPANYRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_COMPANYRowChangeEvent)
    
    Public Delegate Sub MST_CURRENCYRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_CURRENCYRowChangeEvent)
    
    Public Delegate Sub MST_ACCOUNTRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_ACCOUNTRowChangeEvent)
    
    Public Delegate Sub MST_BANKRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_BANKRowChangeEvent)
    
    Public Delegate Sub MST_CUSTTYPERowChangeEventHandler(ByVal sender As Object, ByVal e As MST_CUSTTYPERowChangeEvent)
    
    Public Delegate Sub MST_SALESMANRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_SALESMANRowChangeEvent)
    
    Public Delegate Sub MST_TAXRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_TAXRowChangeEvent)
    
    Public Delegate Sub MST_CUSTOMERRowChangeEventHandler(ByVal sender As Object, ByVal e As MST_CUSTOMERRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_COMPANYDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOMPNO As Global.System.Data.DataColumn
        
        Private columnCOMP_NAME As Global.System.Data.DataColumn
        
        Private columnREG_CODE As Global.System.Data.DataColumn
        
        Private columnACC_YEAR As Global.System.Data.DataColumn
        
        Private columnCURR_CODE As Global.System.Data.DataColumn
        
        Private columnADDR1 As Global.System.Data.DataColumn
        
        Private columnADDR2 As Global.System.Data.DataColumn
        
        Private columnADDR3 As Global.System.Data.DataColumn
        
        Private columnADDR4 As Global.System.Data.DataColumn
        
        Private columnPHONENO As Global.System.Data.DataColumn
        
        Private columnFAXNO As Global.System.Data.DataColumn
        
        Private columnACC_AP As Global.System.Data.DataColumn
        
        Private columnACC_APDISC As Global.System.Data.DataColumn
        
        Private columnACC_AR As Global.System.Data.DataColumn
        
        Private columnACC_ARDISC As Global.System.Data.DataColumn
        
        Private columnACC_SALES As Global.System.Data.DataColumn
        
        Private columnSTART_MONTH As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_COMPANY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REG_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREG_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHONENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAXNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAXNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_APColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_AP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_APDISCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_APDISC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_ARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_AR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_ARDISCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_ARDISC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_SALESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_SALES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_MONTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_MONTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_COMPANYRow
            Get
                Return CType(Me.Rows(index),MST_COMPANYRow)
            End Get
        End Property
        
        Public Event MST_COMPANYRowChanging As MST_COMPANYRowChangeEventHandler
        
        Public Event MST_COMPANYRowChanged As MST_COMPANYRowChangeEventHandler
        
        Public Event MST_COMPANYRowDeleting As MST_COMPANYRowChangeEventHandler
        
        Public Event MST_COMPANYRowDeleted As MST_COMPANYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_COMPANYRow(ByVal row As MST_COMPANYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_COMPANYRow( _
                    ByVal COMP_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ACC_YEAR As Short,  _
                    ByVal parentMST_CURRENCYRowByFK_MST_COMPANY_MST_CURRENCY As MST_CURRENCYRow,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONENO As String,  _
                    ByVal FAXNO As String,  _
                    ByVal parentMST_ACCOUNTRowByFK_MST_COMPANY_AP As MST_ACCOUNTRow,  _
                    ByVal parentMST_ACCOUNTRowByFK_MST_COMPANY_APDISC As MST_ACCOUNTRow,  _
                    ByVal parentMST_ACCOUNTRowByFK_MST_COMPANY_AR As MST_ACCOUNTRow,  _
                    ByVal parentMST_ACCOUNTRowByFK_MST_COMPANY_ARDISC As MST_ACCOUNTRow,  _
                    ByVal parentMST_ACCOUNTRowByFK_MST_COMPANY_ACC_SALES As MST_ACCOUNTRow,  _
                    ByVal START_MONTH As Short) As MST_COMPANYRow
            Dim rowMST_COMPANYRow As MST_COMPANYRow = CType(Me.NewRow,MST_COMPANYRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, COMP_NAME, REG_CODE, ACC_YEAR, Nothing, ADDR1, ADDR2, ADDR3, ADDR4, PHONENO, FAXNO, Nothing, Nothing, Nothing, Nothing, Nothing, START_MONTH}
            If (Not (parentMST_CURRENCYRowByFK_MST_COMPANY_MST_CURRENCY) Is Nothing) Then
                columnValuesArray(4) = parentMST_CURRENCYRowByFK_MST_COMPANY_MST_CURRENCY(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_MST_COMPANY_AP) Is Nothing) Then
                columnValuesArray(11) = parentMST_ACCOUNTRowByFK_MST_COMPANY_AP(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_MST_COMPANY_APDISC) Is Nothing) Then
                columnValuesArray(12) = parentMST_ACCOUNTRowByFK_MST_COMPANY_APDISC(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_MST_COMPANY_AR) Is Nothing) Then
                columnValuesArray(13) = parentMST_ACCOUNTRowByFK_MST_COMPANY_AR(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_MST_COMPANY_ARDISC) Is Nothing) Then
                columnValuesArray(14) = parentMST_ACCOUNTRowByFK_MST_COMPANY_ARDISC(0)
            End If
            If (Not (parentMST_ACCOUNTRowByFK_MST_COMPANY_ACC_SALES) Is Nothing) Then
                columnValuesArray(15) = parentMST_ACCOUNTRowByFK_MST_COMPANY_ACC_SALES(0)
            End If
            rowMST_COMPANYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_COMPANYRow)
            Return rowMST_COMPANYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOMPNO(ByVal COMPNO As Integer) As MST_COMPANYRow
            Return CType(Me.Rows.Find(New Object() {COMPNO}),MST_COMPANYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_COMPANYDataTable = CType(MyBase.Clone,MST_COMPANYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_COMPANYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOMPNO = MyBase.Columns("COMPNO")
            Me.columnCOMP_NAME = MyBase.Columns("COMP_NAME")
            Me.columnREG_CODE = MyBase.Columns("REG_CODE")
            Me.columnACC_YEAR = MyBase.Columns("ACC_YEAR")
            Me.columnCURR_CODE = MyBase.Columns("CURR_CODE")
            Me.columnADDR1 = MyBase.Columns("ADDR1")
            Me.columnADDR2 = MyBase.Columns("ADDR2")
            Me.columnADDR3 = MyBase.Columns("ADDR3")
            Me.columnADDR4 = MyBase.Columns("ADDR4")
            Me.columnPHONENO = MyBase.Columns("PHONENO")
            Me.columnFAXNO = MyBase.Columns("FAXNO")
            Me.columnACC_AP = MyBase.Columns("ACC_AP")
            Me.columnACC_APDISC = MyBase.Columns("ACC_APDISC")
            Me.columnACC_AR = MyBase.Columns("ACC_AR")
            Me.columnACC_ARDISC = MyBase.Columns("ACC_ARDISC")
            Me.columnACC_SALES = MyBase.Columns("ACC_SALES")
            Me.columnSTART_MONTH = MyBase.Columns("START_MONTH")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOMPNO = New Global.System.Data.DataColumn("COMPNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPNO)
            Me.columnCOMP_NAME = New Global.System.Data.DataColumn("COMP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMP_NAME)
            Me.columnREG_CODE = New Global.System.Data.DataColumn("REG_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREG_CODE)
            Me.columnACC_YEAR = New Global.System.Data.DataColumn("ACC_YEAR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_YEAR)
            Me.columnCURR_CODE = New Global.System.Data.DataColumn("CURR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_CODE)
            Me.columnADDR1 = New Global.System.Data.DataColumn("ADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR1)
            Me.columnADDR2 = New Global.System.Data.DataColumn("ADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR2)
            Me.columnADDR3 = New Global.System.Data.DataColumn("ADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR3)
            Me.columnADDR4 = New Global.System.Data.DataColumn("ADDR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR4)
            Me.columnPHONENO = New Global.System.Data.DataColumn("PHONENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONENO)
            Me.columnFAXNO = New Global.System.Data.DataColumn("FAXNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAXNO)
            Me.columnACC_AP = New Global.System.Data.DataColumn("ACC_AP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_AP)
            Me.columnACC_APDISC = New Global.System.Data.DataColumn("ACC_APDISC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_APDISC)
            Me.columnACC_AR = New Global.System.Data.DataColumn("ACC_AR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_AR)
            Me.columnACC_ARDISC = New Global.System.Data.DataColumn("ACC_ARDISC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_ARDISC)
            Me.columnACC_SALES = New Global.System.Data.DataColumn("ACC_SALES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_SALES)
            Me.columnSTART_MONTH = New Global.System.Data.DataColumn("START_MONTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_MONTH)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOMPNO}, true))
            Me.columnCOMPNO.AutoIncrement = true
            Me.columnCOMPNO.AllowDBNull = false
            Me.columnCOMPNO.ReadOnly = true
            Me.columnCOMPNO.Unique = true
            Me.columnCOMP_NAME.AllowDBNull = false
            Me.columnCOMP_NAME.MaxLength = 50
            Me.columnREG_CODE.MaxLength = 15
            Me.columnACC_YEAR.AllowDBNull = false
            Me.columnCURR_CODE.AllowDBNull = false
            Me.columnCURR_CODE.MaxLength = 10
            Me.columnADDR1.MaxLength = 50
            Me.columnADDR2.MaxLength = 50
            Me.columnADDR3.MaxLength = 50
            Me.columnADDR4.MaxLength = 50
            Me.columnPHONENO.MaxLength = 15
            Me.columnFAXNO.MaxLength = 15
            Me.columnACC_AP.MaxLength = 10
            Me.columnACC_APDISC.MaxLength = 10
            Me.columnACC_AR.MaxLength = 10
            Me.columnACC_ARDISC.MaxLength = 10
            Me.columnACC_SALES.MaxLength = 10
            Me.columnSTART_MONTH.AllowDBNull = false
            Me.columnSTART_MONTH.DefaultValue = CType(1,Short)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_COMPANYRow() As MST_COMPANYRow
            Return CType(Me.NewRow,MST_COMPANYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_COMPANYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_COMPANYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_COMPANYRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowChanged(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_COMPANYRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowChanging(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_COMPANYRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowDeleted(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_COMPANYRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_COMPANYRowDeleting(Me, New MST_COMPANYRowChangeEvent(CType(e.Row,MST_COMPANYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_COMPANYRow(ByVal row As MST_COMPANYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_COMPANYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_CURRENCYDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCURR_CODE As Global.System.Data.DataColumn
        
        Private columnCURR_NAME As Global.System.Data.DataColumn
        
        Private columnCURR_RATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_CURRENCY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_CURRENCYRow
            Get
                Return CType(Me.Rows(index),MST_CURRENCYRow)
            End Get
        End Property
        
        Public Event MST_CURRENCYRowChanging As MST_CURRENCYRowChangeEventHandler
        
        Public Event MST_CURRENCYRowChanged As MST_CURRENCYRowChangeEventHandler
        
        Public Event MST_CURRENCYRowDeleting As MST_CURRENCYRowChangeEventHandler
        
        Public Event MST_CURRENCYRowDeleted As MST_CURRENCYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_CURRENCYRow(ByVal row As MST_CURRENCYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_CURRENCYRow(ByVal CURR_CODE As String, ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal) As MST_CURRENCYRow
            Dim rowMST_CURRENCYRow As MST_CURRENCYRow = CType(Me.NewRow,MST_CURRENCYRow)
            Dim columnValuesArray() As Object = New Object() {CURR_CODE, CURR_NAME, CURR_RATE}
            rowMST_CURRENCYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_CURRENCYRow)
            Return rowMST_CURRENCYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCURR_CODE(ByVal CURR_CODE As String) As MST_CURRENCYRow
            Return CType(Me.Rows.Find(New Object() {CURR_CODE}),MST_CURRENCYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_CURRENCYDataTable = CType(MyBase.Clone,MST_CURRENCYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_CURRENCYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCURR_CODE = MyBase.Columns("CURR_CODE")
            Me.columnCURR_NAME = MyBase.Columns("CURR_NAME")
            Me.columnCURR_RATE = MyBase.Columns("CURR_RATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCURR_CODE = New Global.System.Data.DataColumn("CURR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_CODE)
            Me.columnCURR_NAME = New Global.System.Data.DataColumn("CURR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_NAME)
            Me.columnCURR_RATE = New Global.System.Data.DataColumn("CURR_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_RATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCURR_CODE}, true))
            Me.columnCURR_CODE.AllowDBNull = false
            Me.columnCURR_CODE.Unique = true
            Me.columnCURR_CODE.MaxLength = 10
            Me.columnCURR_NAME.MaxLength = 30
            Me.columnCURR_RATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_CURRENCYRow() As MST_CURRENCYRow
            Return CType(Me.NewRow,MST_CURRENCYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_CURRENCYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_CURRENCYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_CURRENCYRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowChanged(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_CURRENCYRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowChanging(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_CURRENCYRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowDeleted(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_CURRENCYRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_CURRENCYRowDeleting(Me, New MST_CURRENCYRowChangeEvent(CType(e.Row,MST_CURRENCYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_CURRENCYRow(ByVal row As MST_CURRENCYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_CURRENCYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_ACCOUNTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        Private columnACC_NAME As Global.System.Data.DataColumn
        
        Private columnACC_TYPE As Global.System.Data.DataColumn
        
        Private columnRETAINED_EARNINGS As Global.System.Data.DataColumn
        
        Private columnIS_ACTIVE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_ACCOUNT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RETAINED_EARNINGSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRETAINED_EARNINGS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_ACTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_ACTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_ACCOUNTRow
            Get
                Return CType(Me.Rows(index),MST_ACCOUNTRow)
            End Get
        End Property
        
        Public Event MST_ACCOUNTRowChanging As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowChanged As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowDeleting As MST_ACCOUNTRowChangeEventHandler
        
        Public Event MST_ACCOUNTRowDeleted As MST_ACCOUNTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_ACCOUNTRow(ByVal row As MST_ACCOUNTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_ACCOUNTRow(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Byte, ByVal RETAINED_EARNINGS As Boolean, ByVal IS_ACTIVE As Boolean) As MST_ACCOUNTRow
            Dim rowMST_ACCOUNTRow As MST_ACCOUNTRow = CType(Me.NewRow,MST_ACCOUNTRow)
            Dim columnValuesArray() As Object = New Object() {ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE}
            rowMST_ACCOUNTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_ACCOUNTRow)
            Return rowMST_ACCOUNTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACC_CODE(ByVal ACC_CODE As String) As MST_ACCOUNTRow
            Return CType(Me.Rows.Find(New Object() {ACC_CODE}),MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_ACCOUNTDataTable = CType(MyBase.Clone,MST_ACCOUNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_ACCOUNTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
            Me.columnACC_NAME = MyBase.Columns("ACC_NAME")
            Me.columnACC_TYPE = MyBase.Columns("ACC_TYPE")
            Me.columnRETAINED_EARNINGS = MyBase.Columns("RETAINED_EARNINGS")
            Me.columnIS_ACTIVE = MyBase.Columns("IS_ACTIVE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.columnACC_NAME = New Global.System.Data.DataColumn("ACC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_NAME)
            Me.columnACC_TYPE = New Global.System.Data.DataColumn("ACC_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_TYPE)
            Me.columnRETAINED_EARNINGS = New Global.System.Data.DataColumn("RETAINED_EARNINGS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRETAINED_EARNINGS)
            Me.columnIS_ACTIVE = New Global.System.Data.DataColumn("IS_ACTIVE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_ACTIVE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACC_CODE}, true))
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.Unique = true
            Me.columnACC_CODE.MaxLength = 10
            Me.columnACC_NAME.MaxLength = 75
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_ACCOUNTRow() As MST_ACCOUNTRow
            Return CType(Me.NewRow,MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_ACCOUNTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_ACCOUNTRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowChanged(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_ACCOUNTRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowChanging(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_ACCOUNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowDeleted(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_ACCOUNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_ACCOUNTRowDeleting(Me, New MST_ACCOUNTRowChangeEvent(CType(e.Row,MST_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_ACCOUNTRow(ByVal row As MST_ACCOUNTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_ACCOUNTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_BANKDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBANKNO As Global.System.Data.DataColumn
        
        Private columnBANK_CODE As Global.System.Data.DataColumn
        
        Private columnBANK_NAME As Global.System.Data.DataColumn
        
        Private columnACC_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_BANK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANKNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANKNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_BANKRow
            Get
                Return CType(Me.Rows(index),MST_BANKRow)
            End Get
        End Property
        
        Public Event MST_BANKRowChanging As MST_BANKRowChangeEventHandler
        
        Public Event MST_BANKRowChanged As MST_BANKRowChangeEventHandler
        
        Public Event MST_BANKRowDeleting As MST_BANKRowChangeEventHandler
        
        Public Event MST_BANKRowDeleted As MST_BANKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_BANKRow(ByVal row As MST_BANKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_BANKRow(ByVal BANKNO As Integer, ByVal BANK_CODE As String, ByVal BANK_NAME As String, ByVal parentMST_ACCOUNTRowByFK_MST_BANK_ACC_CODE As MST_ACCOUNTRow) As MST_BANKRow
            Dim rowMST_BANKRow As MST_BANKRow = CType(Me.NewRow,MST_BANKRow)
            Dim columnValuesArray() As Object = New Object() {BANKNO, BANK_CODE, BANK_NAME, Nothing}
            If (Not (parentMST_ACCOUNTRowByFK_MST_BANK_ACC_CODE) Is Nothing) Then
                columnValuesArray(3) = parentMST_ACCOUNTRowByFK_MST_BANK_ACC_CODE(0)
            End If
            rowMST_BANKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_BANKRow)
            Return rowMST_BANKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBANKNO(ByVal BANKNO As Integer) As MST_BANKRow
            Return CType(Me.Rows.Find(New Object() {BANKNO}),MST_BANKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_BANKDataTable = CType(MyBase.Clone,MST_BANKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_BANKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBANKNO = MyBase.Columns("BANKNO")
            Me.columnBANK_CODE = MyBase.Columns("BANK_CODE")
            Me.columnBANK_NAME = MyBase.Columns("BANK_NAME")
            Me.columnACC_CODE = MyBase.Columns("ACC_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBANKNO = New Global.System.Data.DataColumn("BANKNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANKNO)
            Me.columnBANK_CODE = New Global.System.Data.DataColumn("BANK_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_CODE)
            Me.columnBANK_NAME = New Global.System.Data.DataColumn("BANK_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_NAME)
            Me.columnACC_CODE = New Global.System.Data.DataColumn("ACC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_CODE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBANKNO}, true))
            Me.columnBANKNO.AllowDBNull = false
            Me.columnBANKNO.Unique = true
            Me.columnBANK_CODE.AllowDBNull = false
            Me.columnBANK_CODE.MaxLength = 10
            Me.columnBANK_NAME.AllowDBNull = false
            Me.columnBANK_NAME.MaxLength = 50
            Me.columnACC_CODE.AllowDBNull = false
            Me.columnACC_CODE.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_BANKRow() As MST_BANKRow
            Return CType(Me.NewRow,MST_BANKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_BANKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_BANKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_BANKRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_BANKRowChanged(Me, New MST_BANKRowChangeEvent(CType(e.Row,MST_BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_BANKRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_BANKRowChanging(Me, New MST_BANKRowChangeEvent(CType(e.Row,MST_BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_BANKRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_BANKRowDeleted(Me, New MST_BANKRowChangeEvent(CType(e.Row,MST_BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_BANKRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_BANKRowDeleting(Me, New MST_BANKRowChangeEvent(CType(e.Row,MST_BANKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_BANKRow(ByVal row As MST_BANKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_BANKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_CUSTTYPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCUSTTYPE_CODE As Global.System.Data.DataColumn
        
        Private columnCUSTTYPE_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_CUSTTYPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTTYPE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTTYPE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTTYPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTTYPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_CUSTTYPERow
            Get
                Return CType(Me.Rows(index),MST_CUSTTYPERow)
            End Get
        End Property
        
        Public Event MST_CUSTTYPERowChanging As MST_CUSTTYPERowChangeEventHandler
        
        Public Event MST_CUSTTYPERowChanged As MST_CUSTTYPERowChangeEventHandler
        
        Public Event MST_CUSTTYPERowDeleting As MST_CUSTTYPERowChangeEventHandler
        
        Public Event MST_CUSTTYPERowDeleted As MST_CUSTTYPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_CUSTTYPERow(ByVal row As MST_CUSTTYPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_CUSTTYPERow(ByVal CUSTTYPE_CODE As String, ByVal CUSTTYPE_NAME As String) As MST_CUSTTYPERow
            Dim rowMST_CUSTTYPERow As MST_CUSTTYPERow = CType(Me.NewRow,MST_CUSTTYPERow)
            Dim columnValuesArray() As Object = New Object() {CUSTTYPE_CODE, CUSTTYPE_NAME}
            rowMST_CUSTTYPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_CUSTTYPERow)
            Return rowMST_CUSTTYPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCUSTTYPE_CODE(ByVal CUSTTYPE_CODE As String) As MST_CUSTTYPERow
            Return CType(Me.Rows.Find(New Object() {CUSTTYPE_CODE}),MST_CUSTTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_CUSTTYPEDataTable = CType(MyBase.Clone,MST_CUSTTYPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_CUSTTYPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCUSTTYPE_CODE = MyBase.Columns("CUSTTYPE_CODE")
            Me.columnCUSTTYPE_NAME = MyBase.Columns("CUSTTYPE_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCUSTTYPE_CODE = New Global.System.Data.DataColumn("CUSTTYPE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTTYPE_CODE)
            Me.columnCUSTTYPE_NAME = New Global.System.Data.DataColumn("CUSTTYPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTTYPE_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCUSTTYPE_CODE}, true))
            Me.columnCUSTTYPE_CODE.AllowDBNull = false
            Me.columnCUSTTYPE_CODE.Unique = true
            Me.columnCUSTTYPE_CODE.MaxLength = 10
            Me.columnCUSTTYPE_NAME.AllowDBNull = false
            Me.columnCUSTTYPE_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_CUSTTYPERow() As MST_CUSTTYPERow
            Return CType(Me.NewRow,MST_CUSTTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_CUSTTYPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_CUSTTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_CUSTTYPERowChangedEvent) Is Nothing) Then
                RaiseEvent MST_CUSTTYPERowChanged(Me, New MST_CUSTTYPERowChangeEvent(CType(e.Row,MST_CUSTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_CUSTTYPERowChangingEvent) Is Nothing) Then
                RaiseEvent MST_CUSTTYPERowChanging(Me, New MST_CUSTTYPERowChangeEvent(CType(e.Row,MST_CUSTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_CUSTTYPERowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_CUSTTYPERowDeleted(Me, New MST_CUSTTYPERowChangeEvent(CType(e.Row,MST_CUSTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_CUSTTYPERowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_CUSTTYPERowDeleting(Me, New MST_CUSTTYPERowChangeEvent(CType(e.Row,MST_CUSTTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_CUSTTYPERow(ByVal row As MST_CUSTTYPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_CUSTTYPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_SALESMANDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSALES_CODE As Global.System.Data.DataColumn
        
        Private columnLAST_NAME As Global.System.Data.DataColumn
        
        Private columnFIRST_NAME As Global.System.Data.DataColumn
        
        Private columnJOBTITLE As Global.System.Data.DataColumn
        
        Private columnHANDPHONE1 As Global.System.Data.DataColumn
        
        Private columnHANDPHONE2 As Global.System.Data.DataColumn
        
        Private columnHOMEPHONE As Global.System.Data.DataColumn
        
        Private columnEMAIL As Global.System.Data.DataColumn
        
        Private columnSALES_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "MST_SALESMAN"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALES_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALES_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LAST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIRST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIRST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JOBTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJOBTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HANDPHONE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHANDPHONE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HANDPHONE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHANDPHONE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOMEPHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOMEPHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALES_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALES_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_SALESMANRow
            Get
                Return CType(Me.Rows(index),MST_SALESMANRow)
            End Get
        End Property
        
        Public Event MST_SALESMANRowChanging As MST_SALESMANRowChangeEventHandler
        
        Public Event MST_SALESMANRowChanged As MST_SALESMANRowChangeEventHandler
        
        Public Event MST_SALESMANRowDeleting As MST_SALESMANRowChangeEventHandler
        
        Public Event MST_SALESMANRowDeleted As MST_SALESMANRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_SALESMANRow(ByVal row As MST_SALESMANRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_SALESMANRow(ByVal SALES_CODE As String, ByVal LAST_NAME As String, ByVal FIRST_NAME As String, ByVal JOBTITLE As String, ByVal HANDPHONE1 As String, ByVal HANDPHONE2 As String, ByVal HOMEPHONE As String, ByVal EMAIL As String, ByVal SALES_NAME As String) As MST_SALESMANRow
            Dim rowMST_SALESMANRow As MST_SALESMANRow = CType(Me.NewRow,MST_SALESMANRow)
            Dim columnValuesArray() As Object = New Object() {SALES_CODE, LAST_NAME, FIRST_NAME, JOBTITLE, HANDPHONE1, HANDPHONE2, HOMEPHONE, EMAIL, SALES_NAME}
            rowMST_SALESMANRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_SALESMANRow)
            Return rowMST_SALESMANRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_SALESMANRow(ByVal SALES_CODE As String, ByVal LAST_NAME As String, ByVal FIRST_NAME As String, ByVal JOBTITLE As String, ByVal HANDPHONE1 As String, ByVal HANDPHONE2 As String, ByVal HOMEPHONE As String, ByVal EMAIL As String) As MST_SALESMANRow
            Dim rowMST_SALESMANRow As MST_SALESMANRow = CType(Me.NewRow,MST_SALESMANRow)
            Dim columnValuesArray() As Object = New Object() {SALES_CODE, LAST_NAME, FIRST_NAME, JOBTITLE, HANDPHONE1, HANDPHONE2, HOMEPHONE, EMAIL, Nothing}
            rowMST_SALESMANRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_SALESMANRow)
            Return rowMST_SALESMANRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySALES_CODE(ByVal SALES_CODE As String) As MST_SALESMANRow
            Return CType(Me.Rows.Find(New Object() {SALES_CODE}),MST_SALESMANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_SALESMANDataTable = CType(MyBase.Clone,MST_SALESMANDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_SALESMANDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSALES_CODE = MyBase.Columns("SALES_CODE")
            Me.columnLAST_NAME = MyBase.Columns("LAST_NAME")
            Me.columnFIRST_NAME = MyBase.Columns("FIRST_NAME")
            Me.columnJOBTITLE = MyBase.Columns("JOBTITLE")
            Me.columnHANDPHONE1 = MyBase.Columns("HANDPHONE1")
            Me.columnHANDPHONE2 = MyBase.Columns("HANDPHONE2")
            Me.columnHOMEPHONE = MyBase.Columns("HOMEPHONE")
            Me.columnEMAIL = MyBase.Columns("EMAIL")
            Me.columnSALES_NAME = MyBase.Columns("SALES_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSALES_CODE = New Global.System.Data.DataColumn("SALES_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALES_CODE)
            Me.columnLAST_NAME = New Global.System.Data.DataColumn("LAST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAST_NAME)
            Me.columnFIRST_NAME = New Global.System.Data.DataColumn("FIRST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIRST_NAME)
            Me.columnJOBTITLE = New Global.System.Data.DataColumn("JOBTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJOBTITLE)
            Me.columnHANDPHONE1 = New Global.System.Data.DataColumn("HANDPHONE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHANDPHONE1)
            Me.columnHANDPHONE2 = New Global.System.Data.DataColumn("HANDPHONE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHANDPHONE2)
            Me.columnHOMEPHONE = New Global.System.Data.DataColumn("HOMEPHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOMEPHONE)
            Me.columnEMAIL = New Global.System.Data.DataColumn("EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL)
            Me.columnSALES_NAME = New Global.System.Data.DataColumn("SALES_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALES_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSALES_CODE}, true))
            Me.columnSALES_CODE.AllowDBNull = false
            Me.columnSALES_CODE.Unique = true
            Me.columnSALES_CODE.MaxLength = 10
            Me.columnLAST_NAME.MaxLength = 30
            Me.columnFIRST_NAME.MaxLength = 30
            Me.columnJOBTITLE.MaxLength = 50
            Me.columnHANDPHONE1.MaxLength = 15
            Me.columnHANDPHONE2.MaxLength = 15
            Me.columnHOMEPHONE.MaxLength = 15
            Me.columnEMAIL.MaxLength = 50
            Me.columnSALES_NAME.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_SALESMANRow() As MST_SALESMANRow
            Return CType(Me.NewRow,MST_SALESMANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_SALESMANRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_SALESMANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.SALES_NAMEColumn.Expression = "LAST_NAME + ' '+FIRST_NAME"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_SALESMANRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_SALESMANRowChanged(Me, New MST_SALESMANRowChangeEvent(CType(e.Row,MST_SALESMANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_SALESMANRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_SALESMANRowChanging(Me, New MST_SALESMANRowChangeEvent(CType(e.Row,MST_SALESMANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_SALESMANRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_SALESMANRowDeleted(Me, New MST_SALESMANRowChangeEvent(CType(e.Row,MST_SALESMANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_SALESMANRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_SALESMANRowDeleting(Me, New MST_SALESMANRowChangeEvent(CType(e.Row,MST_SALESMANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_SALESMANRow(ByVal row As MST_SALESMANRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_SALESMANDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_TAXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTAX_CODE As Global.System.Data.DataColumn
        
        Private columnTAX_NAME As Global.System.Data.DataColumn
        
        Private columnTAX_RATE As Global.System.Data.DataColumn
        
        Private columnTAX_ACC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_TAX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_ACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_ACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_TAXRow
            Get
                Return CType(Me.Rows(index),MST_TAXRow)
            End Get
        End Property
        
        Public Event MST_TAXRowChanging As MST_TAXRowChangeEventHandler
        
        Public Event MST_TAXRowChanged As MST_TAXRowChangeEventHandler
        
        Public Event MST_TAXRowDeleting As MST_TAXRowChangeEventHandler
        
        Public Event MST_TAXRowDeleted As MST_TAXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_TAXRow(ByVal row As MST_TAXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_TAXRow(ByVal TAX_CODE As String, ByVal TAX_NAME As String, ByVal TAX_RATE As Double, ByVal parentMST_ACCOUNTRowByFK_MST_TAX_MST_ACCOUNT As MST_ACCOUNTRow) As MST_TAXRow
            Dim rowMST_TAXRow As MST_TAXRow = CType(Me.NewRow,MST_TAXRow)
            Dim columnValuesArray() As Object = New Object() {TAX_CODE, TAX_NAME, TAX_RATE, Nothing}
            If (Not (parentMST_ACCOUNTRowByFK_MST_TAX_MST_ACCOUNT) Is Nothing) Then
                columnValuesArray(3) = parentMST_ACCOUNTRowByFK_MST_TAX_MST_ACCOUNT(0)
            End If
            rowMST_TAXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_TAXRow)
            Return rowMST_TAXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTAX_CODE(ByVal TAX_CODE As String) As MST_TAXRow
            Return CType(Me.Rows.Find(New Object() {TAX_CODE}),MST_TAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_TAXDataTable = CType(MyBase.Clone,MST_TAXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_TAXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTAX_CODE = MyBase.Columns("TAX_CODE")
            Me.columnTAX_NAME = MyBase.Columns("TAX_NAME")
            Me.columnTAX_RATE = MyBase.Columns("TAX_RATE")
            Me.columnTAX_ACC = MyBase.Columns("TAX_ACC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTAX_CODE = New Global.System.Data.DataColumn("TAX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_CODE)
            Me.columnTAX_NAME = New Global.System.Data.DataColumn("TAX_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_NAME)
            Me.columnTAX_RATE = New Global.System.Data.DataColumn("TAX_RATE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_RATE)
            Me.columnTAX_ACC = New Global.System.Data.DataColumn("TAX_ACC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_ACC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTAX_CODE}, true))
            Me.columnTAX_CODE.AllowDBNull = false
            Me.columnTAX_CODE.Unique = true
            Me.columnTAX_CODE.MaxLength = 10
            Me.columnTAX_NAME.AllowDBNull = false
            Me.columnTAX_NAME.MaxLength = 30
            Me.columnTAX_RATE.AllowDBNull = false
            Me.columnTAX_ACC.AllowDBNull = false
            Me.columnTAX_ACC.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_TAXRow() As MST_TAXRow
            Return CType(Me.NewRow,MST_TAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_TAXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_TAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_TAXRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_TAXRowChanged(Me, New MST_TAXRowChangeEvent(CType(e.Row,MST_TAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_TAXRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_TAXRowChanging(Me, New MST_TAXRowChangeEvent(CType(e.Row,MST_TAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_TAXRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_TAXRowDeleted(Me, New MST_TAXRowChangeEvent(CType(e.Row,MST_TAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_TAXRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_TAXRowDeleting(Me, New MST_TAXRowChangeEvent(CType(e.Row,MST_TAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_TAXRow(ByVal row As MST_TAXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_TAXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MST_CUSTOMERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCUSTOMER_CODE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn
        
        Private columnREG_CODE As Global.System.Data.DataColumn
        
        Private columnADDR1 As Global.System.Data.DataColumn
        
        Private columnADDR2 As Global.System.Data.DataColumn
        
        Private columnADDR3 As Global.System.Data.DataColumn
        
        Private columnADDR4 As Global.System.Data.DataColumn
        
        Private columnPHONE As Global.System.Data.DataColumn
        
        Private columnFAX As Global.System.Data.DataColumn
        
        Private columnWEBPAGE As Global.System.Data.DataColumn
        
        Private columnEMAIL As Global.System.Data.DataColumn
        
        Private columnCONTACT1 As Global.System.Data.DataColumn
        
        Private columnC1PHONE As Global.System.Data.DataColumn
        
        Private columnC1FAX As Global.System.Data.DataColumn
        
        Private columnCONTACT2 As Global.System.Data.DataColumn
        
        Private columnC2PHONE As Global.System.Data.DataColumn
        
        Private columnC2FAX As Global.System.Data.DataColumn
        
        Private columnDISCDAY As Global.System.Data.DataColumn
        
        Private columnDISCPTG As Global.System.Data.DataColumn
        
        Private columnDUEDAY As Global.System.Data.DataColumn
        
        Private columnCURR_CODE As Global.System.Data.DataColumn
        
        Private columnIS_COD As Global.System.Data.DataColumn
        
        Private columnCREDIT_LIMIT As Global.System.Data.DataColumn
        
        Private columnTAX_CODE1 As Global.System.Data.DataColumn
        
        Private columnTAX_CODE2 As Global.System.Data.DataColumn
        
        Private columnSALES_CODE As Global.System.Data.DataColumn
        
        Private columnCUSTTYPE_CODE As Global.System.Data.DataColumn
        
        Private columnTAXEXAMPNO1 As Global.System.Data.DataColumn
        
        Private columnTAXEXAMPNO2 As Global.System.Data.DataColumn
        
        Private columnSHIPNAME As Global.System.Data.DataColumn
        
        Private columnSHIPADDR1 As Global.System.Data.DataColumn
        
        Private columnSHIPADDR2 As Global.System.Data.DataColumn
        
        Private columnSHIPADDR3 As Global.System.Data.DataColumn
        
        Private columnSHIPADDR4 As Global.System.Data.DataColumn
        
        Private columnIS_SUSPEND As Global.System.Data.DataColumn
        
        Private columnIS_PRINTSTM As Global.System.Data.DataColumn
        
        Private columnNOTES As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MST_CUSTOMER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REG_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREG_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WEBPAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWEBPAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTACT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C1PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC1PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C1FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC1FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTACT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C2PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC2PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C2FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC2FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCDAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCDAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCPTGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCPTG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUEDAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUEDAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREDIT_LIMITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREDIT_LIMIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_CODE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_CODE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAX_CODE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX_CODE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALES_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALES_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTTYPE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTTYPE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXEXAMPNO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXEXAMPNO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXEXAMPNO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXEXAMPNO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHIPNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHIPADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHIPADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHIPADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHIPADDR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPADDR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_SUSPENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_SUSPEND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_PRINTSTMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_PRINTSTM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MST_CUSTOMERRow
            Get
                Return CType(Me.Rows(index),MST_CUSTOMERRow)
            End Get
        End Property
        
        Public Event MST_CUSTOMERRowChanging As MST_CUSTOMERRowChangeEventHandler
        
        Public Event MST_CUSTOMERRowChanged As MST_CUSTOMERRowChangeEventHandler
        
        Public Event MST_CUSTOMERRowDeleting As MST_CUSTOMERRowChangeEventHandler
        
        Public Event MST_CUSTOMERRowDeleted As MST_CUSTOMERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMST_CUSTOMERRow(ByVal row As MST_CUSTOMERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMST_CUSTOMERRow( _
                    ByVal CUSTOMER_CODE As String,  _
                    ByVal CUSTOMER_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal WEBPAGE As String,  _
                    ByVal EMAIL As String,  _
                    ByVal CONTACT1 As String,  _
                    ByVal C1PHONE As String,  _
                    ByVal C1FAX As String,  _
                    ByVal CONTACT2 As String,  _
                    ByVal C2PHONE As String,  _
                    ByVal C2FAX As String,  _
                    ByVal DISCDAY As Integer,  _
                    ByVal DISCPTG As Decimal,  _
                    ByVal DUEDAY As Integer,  _
                    ByVal parentMST_CURRENCYRowByFK_MST_CUSTOMER_MST_CURRENCY As MST_CURRENCYRow,  _
                    ByVal IS_COD As Boolean,  _
                    ByVal CREDIT_LIMIT As Decimal,  _
                    ByVal parentMST_TAXRowByFK_MST_CUSTOMER_MST_TAX1 As MST_TAXRow,  _
                    ByVal parentMST_TAXRowByFK_MST_CUSTOMER_MST_TAX2 As MST_TAXRow,  _
                    ByVal parentMST_SALESMANRowByFK_MST_CUSTOMER_MST_SALESMAN As MST_SALESMANRow,  _
                    ByVal parentMST_CUSTTYPERowByFK_MST_CUSTOMER_MST_CUSTTYPE As MST_CUSTTYPERow,  _
                    ByVal TAXEXAMPNO1 As String,  _
                    ByVal TAXEXAMPNO2 As String,  _
                    ByVal SHIPNAME As String,  _
                    ByVal SHIPADDR1 As String,  _
                    ByVal SHIPADDR2 As String,  _
                    ByVal SHIPADDR3 As String,  _
                    ByVal SHIPADDR4 As String,  _
                    ByVal IS_SUSPEND As Boolean,  _
                    ByVal IS_PRINTSTM As Boolean,  _
                    ByVal NOTES As String) As MST_CUSTOMERRow
            Dim rowMST_CUSTOMERRow As MST_CUSTOMERRow = CType(Me.NewRow,MST_CUSTOMERRow)
            Dim columnValuesArray() As Object = New Object() {CUSTOMER_CODE, CUSTOMER_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONE, FAX, WEBPAGE, EMAIL, CONTACT1, C1PHONE, C1FAX, CONTACT2, C2PHONE, C2FAX, DISCDAY, DISCPTG, DUEDAY, Nothing, IS_COD, CREDIT_LIMIT, Nothing, Nothing, Nothing, Nothing, TAXEXAMPNO1, TAXEXAMPNO2, SHIPNAME, SHIPADDR1, SHIPADDR2, SHIPADDR3, SHIPADDR4, IS_SUSPEND, IS_PRINTSTM, NOTES}
            If (Not (parentMST_CURRENCYRowByFK_MST_CUSTOMER_MST_CURRENCY) Is Nothing) Then
                columnValuesArray(20) = parentMST_CURRENCYRowByFK_MST_CUSTOMER_MST_CURRENCY(0)
            End If
            If (Not (parentMST_TAXRowByFK_MST_CUSTOMER_MST_TAX1) Is Nothing) Then
                columnValuesArray(23) = parentMST_TAXRowByFK_MST_CUSTOMER_MST_TAX1(0)
            End If
            If (Not (parentMST_TAXRowByFK_MST_CUSTOMER_MST_TAX2) Is Nothing) Then
                columnValuesArray(24) = parentMST_TAXRowByFK_MST_CUSTOMER_MST_TAX2(0)
            End If
            If (Not (parentMST_SALESMANRowByFK_MST_CUSTOMER_MST_SALESMAN) Is Nothing) Then
                columnValuesArray(25) = parentMST_SALESMANRowByFK_MST_CUSTOMER_MST_SALESMAN(0)
            End If
            If (Not (parentMST_CUSTTYPERowByFK_MST_CUSTOMER_MST_CUSTTYPE) Is Nothing) Then
                columnValuesArray(26) = parentMST_CUSTTYPERowByFK_MST_CUSTOMER_MST_CUSTTYPE(0)
            End If
            rowMST_CUSTOMERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMST_CUSTOMERRow)
            Return rowMST_CUSTOMERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCUSTOMER_CODE(ByVal CUSTOMER_CODE As String) As MST_CUSTOMERRow
            Return CType(Me.Rows.Find(New Object() {CUSTOMER_CODE}),MST_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MST_CUSTOMERDataTable = CType(MyBase.Clone,MST_CUSTOMERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MST_CUSTOMERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCUSTOMER_CODE = MyBase.Columns("CUSTOMER_CODE")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnREG_CODE = MyBase.Columns("REG_CODE")
            Me.columnADDR1 = MyBase.Columns("ADDR1")
            Me.columnADDR2 = MyBase.Columns("ADDR2")
            Me.columnADDR3 = MyBase.Columns("ADDR3")
            Me.columnADDR4 = MyBase.Columns("ADDR4")
            Me.columnPHONE = MyBase.Columns("PHONE")
            Me.columnFAX = MyBase.Columns("FAX")
            Me.columnWEBPAGE = MyBase.Columns("WEBPAGE")
            Me.columnEMAIL = MyBase.Columns("EMAIL")
            Me.columnCONTACT1 = MyBase.Columns("CONTACT1")
            Me.columnC1PHONE = MyBase.Columns("C1PHONE")
            Me.columnC1FAX = MyBase.Columns("C1FAX")
            Me.columnCONTACT2 = MyBase.Columns("CONTACT2")
            Me.columnC2PHONE = MyBase.Columns("C2PHONE")
            Me.columnC2FAX = MyBase.Columns("C2FAX")
            Me.columnDISCDAY = MyBase.Columns("DISCDAY")
            Me.columnDISCPTG = MyBase.Columns("DISCPTG")
            Me.columnDUEDAY = MyBase.Columns("DUEDAY")
            Me.columnCURR_CODE = MyBase.Columns("CURR_CODE")
            Me.columnIS_COD = MyBase.Columns("IS_COD")
            Me.columnCREDIT_LIMIT = MyBase.Columns("CREDIT_LIMIT")
            Me.columnTAX_CODE1 = MyBase.Columns("TAX_CODE1")
            Me.columnTAX_CODE2 = MyBase.Columns("TAX_CODE2")
            Me.columnSALES_CODE = MyBase.Columns("SALES_CODE")
            Me.columnCUSTTYPE_CODE = MyBase.Columns("CUSTTYPE_CODE")
            Me.columnTAXEXAMPNO1 = MyBase.Columns("TAXEXAMPNO1")
            Me.columnTAXEXAMPNO2 = MyBase.Columns("TAXEXAMPNO2")
            Me.columnSHIPNAME = MyBase.Columns("SHIPNAME")
            Me.columnSHIPADDR1 = MyBase.Columns("SHIPADDR1")
            Me.columnSHIPADDR2 = MyBase.Columns("SHIPADDR2")
            Me.columnSHIPADDR3 = MyBase.Columns("SHIPADDR3")
            Me.columnSHIPADDR4 = MyBase.Columns("SHIPADDR4")
            Me.columnIS_SUSPEND = MyBase.Columns("IS_SUSPEND")
            Me.columnIS_PRINTSTM = MyBase.Columns("IS_PRINTSTM")
            Me.columnNOTES = MyBase.Columns("NOTES")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCUSTOMER_CODE = New Global.System.Data.DataColumn("CUSTOMER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_CODE)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnREG_CODE = New Global.System.Data.DataColumn("REG_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREG_CODE)
            Me.columnADDR1 = New Global.System.Data.DataColumn("ADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR1)
            Me.columnADDR2 = New Global.System.Data.DataColumn("ADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR2)
            Me.columnADDR3 = New Global.System.Data.DataColumn("ADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR3)
            Me.columnADDR4 = New Global.System.Data.DataColumn("ADDR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR4)
            Me.columnPHONE = New Global.System.Data.DataColumn("PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONE)
            Me.columnFAX = New Global.System.Data.DataColumn("FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX)
            Me.columnWEBPAGE = New Global.System.Data.DataColumn("WEBPAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWEBPAGE)
            Me.columnEMAIL = New Global.System.Data.DataColumn("EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL)
            Me.columnCONTACT1 = New Global.System.Data.DataColumn("CONTACT1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACT1)
            Me.columnC1PHONE = New Global.System.Data.DataColumn("C1PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC1PHONE)
            Me.columnC1FAX = New Global.System.Data.DataColumn("C1FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC1FAX)
            Me.columnCONTACT2 = New Global.System.Data.DataColumn("CONTACT2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACT2)
            Me.columnC2PHONE = New Global.System.Data.DataColumn("C2PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC2PHONE)
            Me.columnC2FAX = New Global.System.Data.DataColumn("C2FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC2FAX)
            Me.columnDISCDAY = New Global.System.Data.DataColumn("DISCDAY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCDAY)
            Me.columnDISCPTG = New Global.System.Data.DataColumn("DISCPTG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCPTG)
            Me.columnDUEDAY = New Global.System.Data.DataColumn("DUEDAY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUEDAY)
            Me.columnCURR_CODE = New Global.System.Data.DataColumn("CURR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_CODE)
            Me.columnIS_COD = New Global.System.Data.DataColumn("IS_COD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_COD)
            Me.columnCREDIT_LIMIT = New Global.System.Data.DataColumn("CREDIT_LIMIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREDIT_LIMIT)
            Me.columnTAX_CODE1 = New Global.System.Data.DataColumn("TAX_CODE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_CODE1)
            Me.columnTAX_CODE2 = New Global.System.Data.DataColumn("TAX_CODE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX_CODE2)
            Me.columnSALES_CODE = New Global.System.Data.DataColumn("SALES_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALES_CODE)
            Me.columnCUSTTYPE_CODE = New Global.System.Data.DataColumn("CUSTTYPE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTTYPE_CODE)
            Me.columnTAXEXAMPNO1 = New Global.System.Data.DataColumn("TAXEXAMPNO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXEXAMPNO1)
            Me.columnTAXEXAMPNO2 = New Global.System.Data.DataColumn("TAXEXAMPNO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXEXAMPNO2)
            Me.columnSHIPNAME = New Global.System.Data.DataColumn("SHIPNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPNAME)
            Me.columnSHIPADDR1 = New Global.System.Data.DataColumn("SHIPADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPADDR1)
            Me.columnSHIPADDR2 = New Global.System.Data.DataColumn("SHIPADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPADDR2)
            Me.columnSHIPADDR3 = New Global.System.Data.DataColumn("SHIPADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPADDR3)
            Me.columnSHIPADDR4 = New Global.System.Data.DataColumn("SHIPADDR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPADDR4)
            Me.columnIS_SUSPEND = New Global.System.Data.DataColumn("IS_SUSPEND", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_SUSPEND)
            Me.columnIS_PRINTSTM = New Global.System.Data.DataColumn("IS_PRINTSTM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_PRINTSTM)
            Me.columnNOTES = New Global.System.Data.DataColumn("NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTES)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCUSTOMER_CODE}, true))
            Me.columnCUSTOMER_CODE.AllowDBNull = false
            Me.columnCUSTOMER_CODE.Unique = true
            Me.columnCUSTOMER_CODE.MaxLength = 10
            Me.columnCUSTOMER_NAME.AllowDBNull = false
            Me.columnCUSTOMER_NAME.MaxLength = 50
            Me.columnREG_CODE.MaxLength = 15
            Me.columnADDR1.MaxLength = 50
            Me.columnADDR2.MaxLength = 50
            Me.columnADDR3.MaxLength = 50
            Me.columnADDR4.MaxLength = 50
            Me.columnPHONE.MaxLength = 15
            Me.columnFAX.MaxLength = 15
            Me.columnWEBPAGE.MaxLength = 50
            Me.columnEMAIL.MaxLength = 50
            Me.columnCONTACT1.MaxLength = 50
            Me.columnC1PHONE.MaxLength = 15
            Me.columnC1FAX.MaxLength = 15
            Me.columnCONTACT2.MaxLength = 50
            Me.columnC2PHONE.MaxLength = 15
            Me.columnC2FAX.MaxLength = 15
            Me.columnDISCDAY.AllowDBNull = false
            Me.columnDISCDAY.DefaultValue = CType(10,Integer)
            Me.columnDISCPTG.AllowDBNull = false
            Me.columnDISCPTG.DefaultValue = CType(0,Decimal)
            Me.columnDUEDAY.AllowDBNull = false
            Me.columnDUEDAY.DefaultValue = CType(30,Integer)
            Me.columnCURR_CODE.AllowDBNull = false
            Me.columnCURR_CODE.MaxLength = 10
            Me.columnIS_COD.AllowDBNull = false
            Me.columnCREDIT_LIMIT.AllowDBNull = false
            Me.columnTAX_CODE1.MaxLength = 10
            Me.columnTAX_CODE2.MaxLength = 10
            Me.columnSALES_CODE.MaxLength = 10
            Me.columnCUSTTYPE_CODE.MaxLength = 10
            Me.columnTAXEXAMPNO1.MaxLength = 15
            Me.columnTAXEXAMPNO2.MaxLength = 15
            Me.columnSHIPNAME.MaxLength = 50
            Me.columnSHIPADDR1.MaxLength = 50
            Me.columnSHIPADDR2.MaxLength = 50
            Me.columnSHIPADDR3.MaxLength = 50
            Me.columnSHIPADDR4.MaxLength = 50
            Me.columnIS_SUSPEND.AllowDBNull = false
            Me.columnIS_PRINTSTM.AllowDBNull = false
            Me.columnNOTES.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMST_CUSTOMERRow() As MST_CUSTOMERRow
            Return CType(Me.NewRow,MST_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MST_CUSTOMERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MST_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MST_CUSTOMERRowChangedEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowChanged(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MST_CUSTOMERRowChangingEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowChanging(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MST_CUSTOMERRowDeletedEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowDeleted(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MST_CUSTOMERRowDeletingEvent) Is Nothing) Then
                RaiseEvent MST_CUSTOMERRowDeleting(Me, New MST_CUSTOMERRowChangeEvent(CType(e.Row,MST_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMST_CUSTOMERRow(ByVal row As MST_CUSTOMERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CSMasterDataset = New CSMasterDataset
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MST_CUSTOMERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_COMPANYRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_COMPANY As MST_COMPANYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_COMPANY = CType(Me.Table,MST_COMPANYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPNO() As Integer
            Get
                Return CType(Me(Me.tableMST_COMPANY.COMPNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_COMPANY.COMPNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMP_NAME() As String
            Get
                Return CType(Me(Me.tableMST_COMPANY.COMP_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_COMPANY.COMP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REG_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.REG_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REG_CODE' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.REG_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_YEAR() As Short
            Get
                Return CType(Me(Me.tableMST_COMPANY.ACC_YEARColumn),Short)
            End Get
            Set
                Me(Me.tableMST_COMPANY.ACC_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_CODE() As String
            Get
                Return CType(Me(Me.tableMST_COMPANY.CURR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_COMPANY.CURR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR1' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR2' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR3' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ADDR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR4' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ADDR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHONENO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.PHONENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONENO' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.PHONENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAXNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.FAXNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAXNO' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.FAXNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_AP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ACC_APColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_AP' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ACC_APColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_APDISC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ACC_APDISCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_APDISC' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ACC_APDISCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_AR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ACC_ARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_AR' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ACC_ARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_ARDISC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ACC_ARDISCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_ARDISC' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ACC_ARDISCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_SALES() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_COMPANY.ACC_SALESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_SALES' in table 'MST_COMPANY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_COMPANY.ACC_SALESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_MONTH() As Short
            Get
                Return CType(Me(Me.tableMST_COMPANY.START_MONTHColumn),Short)
            End Get
            Set
                Me(Me.tableMST_COMPANY.START_MONTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_CURRENCYRow() As MST_CURRENCYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_COMPANY_MST_CURRENCY")),MST_CURRENCYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_COMPANY_MST_CURRENCY"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRowByFK_MST_COMPANY_AP() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_COMPANY_AP")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_COMPANY_AP"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRowByFK_MST_COMPANY_APDISC() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_COMPANY_APDISC")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_COMPANY_APDISC"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRowByFK_MST_COMPANY_AR() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_COMPANY_AR")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_COMPANY_AR"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRowByFK_MST_COMPANY_ARDISC() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_COMPANY_ARDISC")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_COMPANY_ARDISC"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRowByFK_MST_COMPANY_ACC_SALES() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_COMPANY_ACC_SALES")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_COMPANY_ACC_SALES"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREG_CODENull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.REG_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREG_CODENull()
            Me(Me.tableMST_COMPANY.REG_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR1Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR1Null()
            Me(Me.tableMST_COMPANY.ADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR2Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR2Null()
            Me(Me.tableMST_COMPANY.ADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR3Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR3Null()
            Me(Me.tableMST_COMPANY.ADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR4Null() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ADDR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR4Null()
            Me(Me.tableMST_COMPANY.ADDR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.PHONENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHONENONull()
            Me(Me.tableMST_COMPANY.PHONENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAXNONull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.FAXNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAXNONull()
            Me(Me.tableMST_COMPANY.FAXNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_APNull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ACC_APColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_APNull()
            Me(Me.tableMST_COMPANY.ACC_APColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_APDISCNull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ACC_APDISCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_APDISCNull()
            Me(Me.tableMST_COMPANY.ACC_APDISCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_ARNull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ACC_ARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_ARNull()
            Me(Me.tableMST_COMPANY.ACC_ARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_ARDISCNull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ACC_ARDISCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_ARDISCNull()
            Me(Me.tableMST_COMPANY.ACC_ARDISCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_SALESNull() As Boolean
            Return Me.IsNull(Me.tableMST_COMPANY.ACC_SALESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_SALESNull()
            Me(Me.tableMST_COMPANY.ACC_SALESColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_CURRENCYRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_CURRENCY As MST_CURRENCYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_CURRENCY = CType(Me.Table,MST_CURRENCYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_CODE() As String
            Get
                Return CType(Me(Me.tableMST_CURRENCY.CURR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CURRENCY.CURR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CURRENCY.CURR_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURR_NAME' in table 'MST_CURRENCY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CURRENCY.CURR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_RATE() As Decimal
            Get
                Return CType(Me(Me.tableMST_CURRENCY.CURR_RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableMST_CURRENCY.CURR_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURR_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_CURRENCY.CURR_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURR_NAMENull()
            Me(Me.tableMST_CURRENCY.CURR_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_COMPANYRows() As MST_COMPANYRow()
            If (Me.Table.ChildRelations("FK_MST_COMPANY_MST_CURRENCY") Is Nothing) Then
                Return New MST_COMPANYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_COMPANY_MST_CURRENCY")),MST_COMPANYRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_CUSTOMERRows() As MST_CUSTOMERRow()
            If (Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_CURRENCY") Is Nothing) Then
                Return New MST_CUSTOMERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_CURRENCY")),MST_CUSTOMERRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_ACCOUNTRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_ACCOUNT As MST_ACCOUNTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_ACCOUNT = CType(Me.Table,MST_ACCOUNTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableMST_ACCOUNT.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_NAME' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_TYPE' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RETAINED_EARNINGS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RETAINED_EARNINGS' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_ACTIVE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_ACTIVE' in table 'MST_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.ACC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_NAMENull()
            Me(Me.tableMST_ACCOUNT.ACC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.ACC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_TYPENull()
            Me(Me.tableMST_ACCOUNT.ACC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRETAINED_EARNINGSNull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRETAINED_EARNINGSNull()
            Me(Me.tableMST_ACCOUNT.RETAINED_EARNINGSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_ACTIVENull() As Boolean
            Return Me.IsNull(Me.tableMST_ACCOUNT.IS_ACTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_ACTIVENull()
            Me(Me.tableMST_ACCOUNT.IS_ACTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_COMPANYRowsByFK_MST_COMPANY_AP() As MST_COMPANYRow()
            If (Me.Table.ChildRelations("FK_MST_COMPANY_AP") Is Nothing) Then
                Return New MST_COMPANYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_COMPANY_AP")),MST_COMPANYRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_COMPANYRowsByFK_MST_COMPANY_APDISC() As MST_COMPANYRow()
            If (Me.Table.ChildRelations("FK_MST_COMPANY_APDISC") Is Nothing) Then
                Return New MST_COMPANYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_COMPANY_APDISC")),MST_COMPANYRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_COMPANYRowsByFK_MST_COMPANY_AR() As MST_COMPANYRow()
            If (Me.Table.ChildRelations("FK_MST_COMPANY_AR") Is Nothing) Then
                Return New MST_COMPANYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_COMPANY_AR")),MST_COMPANYRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_COMPANYRowsByFK_MST_COMPANY_ARDISC() As MST_COMPANYRow()
            If (Me.Table.ChildRelations("FK_MST_COMPANY_ARDISC") Is Nothing) Then
                Return New MST_COMPANYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_COMPANY_ARDISC")),MST_COMPANYRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_BANKRows() As MST_BANKRow()
            If (Me.Table.ChildRelations("FK_MST_BANK_ACC_CODE") Is Nothing) Then
                Return New MST_BANKRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_BANK_ACC_CODE")),MST_BANKRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_TAXRows() As MST_TAXRow()
            If (Me.Table.ChildRelations("FK_MST_TAX_MST_ACCOUNT") Is Nothing) Then
                Return New MST_TAXRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_TAX_MST_ACCOUNT")),MST_TAXRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_COMPANYRowsByFK_MST_COMPANY_ACC_SALES() As MST_COMPANYRow()
            If (Me.Table.ChildRelations("FK_MST_COMPANY_ACC_SALES") Is Nothing) Then
                Return New MST_COMPANYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_COMPANY_ACC_SALES")),MST_COMPANYRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_BANKRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_BANK As MST_BANKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_BANK = CType(Me.Table,MST_BANKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANKNO() As Integer
            Get
                Return CType(Me(Me.tableMST_BANK.BANKNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_BANK.BANKNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_CODE() As String
            Get
                Return CType(Me(Me.tableMST_BANK.BANK_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_BANK.BANK_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_NAME() As String
            Get
                Return CType(Me(Me.tableMST_BANK.BANK_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_BANK.BANK_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_CODE() As String
            Get
                Return CType(Me(Me.tableMST_BANK.ACC_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_BANK.ACC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRow() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_BANK_ACC_CODE")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_BANK_ACC_CODE"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_CUSTTYPERow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_CUSTTYPE As MST_CUSTTYPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_CUSTTYPE = CType(Me.Table,MST_CUSTTYPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTTYPE_CODE() As String
            Get
                Return CType(Me(Me.tableMST_CUSTTYPE.CUSTTYPE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CUSTTYPE.CUSTTYPE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTTYPE_NAME() As String
            Get
                Return CType(Me(Me.tableMST_CUSTTYPE.CUSTTYPE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CUSTTYPE.CUSTTYPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_CUSTOMERRows() As MST_CUSTOMERRow()
            If (Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_CUSTTYPE") Is Nothing) Then
                Return New MST_CUSTOMERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_CUSTTYPE")),MST_CUSTOMERRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_SALESMANRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_SALESMAN As MST_SALESMANDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_SALESMAN = CType(Me.Table,MST_SALESMANDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALES_CODE() As String
            Get
                Return CType(Me(Me.tableMST_SALESMAN.SALES_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_SALESMAN.SALES_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LAST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.LAST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAST_NAME' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.LAST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIRST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.FIRST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FIRST_NAME' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.FIRST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JOBTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.JOBTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JOBTITLE' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.JOBTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HANDPHONE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.HANDPHONE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HANDPHONE1' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.HANDPHONE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HANDPHONE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.HANDPHONE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HANDPHONE2' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.HANDPHONE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOMEPHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.HOMEPHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOMEPHONE' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.HOMEPHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALES_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_SALESMAN.SALES_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALES_NAME' in table 'MST_SALESMAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_SALESMAN.SALES_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLAST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.LAST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLAST_NAMENull()
            Me(Me.tableMST_SALESMAN.LAST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIRST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.FIRST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIRST_NAMENull()
            Me(Me.tableMST_SALESMAN.FIRST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJOBTITLENull() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.JOBTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJOBTITLENull()
            Me(Me.tableMST_SALESMAN.JOBTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHANDPHONE1Null() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.HANDPHONE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHANDPHONE1Null()
            Me(Me.tableMST_SALESMAN.HANDPHONE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHANDPHONE2Null() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.HANDPHONE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHANDPHONE2Null()
            Me(Me.tableMST_SALESMAN.HANDPHONE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOMEPHONENull() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.HOMEPHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOMEPHONENull()
            Me(Me.tableMST_SALESMAN.HOMEPHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAILNull() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAILNull()
            Me(Me.tableMST_SALESMAN.EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALES_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_SALESMAN.SALES_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALES_NAMENull()
            Me(Me.tableMST_SALESMAN.SALES_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_CUSTOMERRows() As MST_CUSTOMERRow()
            If (Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_SALESMAN") Is Nothing) Then
                Return New MST_CUSTOMERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_SALESMAN")),MST_CUSTOMERRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_TAXRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_TAX As MST_TAXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_TAX = CType(Me.Table,MST_TAXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_CODE() As String
            Get
                Return CType(Me(Me.tableMST_TAX.TAX_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_TAX.TAX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_NAME() As String
            Get
                Return CType(Me(Me.tableMST_TAX.TAX_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_TAX.TAX_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_RATE() As Double
            Get
                Return CType(Me(Me.tableMST_TAX.TAX_RATEColumn),Double)
            End Get
            Set
                Me(Me.tableMST_TAX.TAX_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_ACC() As String
            Get
                Return CType(Me(Me.tableMST_TAX.TAX_ACCColumn),String)
            End Get
            Set
                Me(Me.tableMST_TAX.TAX_ACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_ACCOUNTRow() As MST_ACCOUNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_TAX_MST_ACCOUNT")),MST_ACCOUNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_TAX_MST_ACCOUNT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_CUSTOMERRowsByFK_MST_CUSTOMER_MST_TAX1() As MST_CUSTOMERRow()
            If (Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_TAX1") Is Nothing) Then
                Return New MST_CUSTOMERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_TAX1")),MST_CUSTOMERRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMST_CUSTOMERRowsByFK_MST_CUSTOMER_MST_TAX2() As MST_CUSTOMERRow()
            If (Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_TAX2") Is Nothing) Then
                Return New MST_CUSTOMERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MST_CUSTOMER_MST_TAX2")),MST_CUSTOMERRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MST_CUSTOMERRow
        Inherits Global.System.Data.DataRow
        
        Private tableMST_CUSTOMER As MST_CUSTOMERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMST_CUSTOMER = CType(Me.Table,MST_CUSTOMERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_CODE() As String
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.CUSTOMER_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CUSTOMER_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_NAME() As String
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.CUSTOMER_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CUSTOMER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REG_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.REG_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REG_CODE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.REG_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR1' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR2' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR3' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.ADDR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR4' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.ADDR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAX' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WEBPAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.WEBPAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WEBPAGE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.WEBPAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTACT1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.CONTACT1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONTACT1' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CONTACT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C1PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.C1PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C1PHONE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.C1PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C1FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.C1FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C1FAX' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.C1FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTACT2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.CONTACT2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONTACT2' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CONTACT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C2PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.C2PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C2PHONE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.C2PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C2FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.C2FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C2FAX' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.C2FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCDAY() As Integer
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.DISCDAYColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.DISCDAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCPTG() As Decimal
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.DISCPTGColumn),Decimal)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.DISCPTGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUEDAY() As Integer
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.DUEDAYColumn),Integer)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.DUEDAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_CODE() As String
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.CURR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CURR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_COD() As Boolean
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.IS_CODColumn),Boolean)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.IS_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREDIT_LIMIT() As Decimal
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.CREDIT_LIMITColumn),Decimal)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CREDIT_LIMITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_CODE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.TAX_CODE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_CODE1' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.TAX_CODE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX_CODE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.TAX_CODE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX_CODE2' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.TAX_CODE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALES_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.SALES_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALES_CODE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.SALES_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTTYPE_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.CUSTTYPE_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTTYPE_CODE' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.CUSTTYPE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXEXAMPNO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.TAXEXAMPNO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXEXAMPNO1' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.TAXEXAMPNO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXEXAMPNO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.TAXEXAMPNO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXEXAMPNO2' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.TAXEXAMPNO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHIPNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.SHIPNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPNAME' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.SHIPNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHIPADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.SHIPADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPADDR1' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.SHIPADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHIPADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.SHIPADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPADDR2' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.SHIPADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHIPADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.SHIPADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPADDR3' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.SHIPADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHIPADDR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.SHIPADDR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPADDR4' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.SHIPADDR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_SUSPEND() As Boolean
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.IS_SUSPENDColumn),Boolean)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.IS_SUSPENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_PRINTSTM() As Boolean
            Get
                Return CType(Me(Me.tableMST_CUSTOMER.IS_PRINTSTMColumn),Boolean)
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.IS_PRINTSTMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableMST_CUSTOMER.NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTES' in table 'MST_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMST_CUSTOMER.NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_CURRENCYRow() As MST_CURRENCYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_CURRENCY")),MST_CURRENCYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_CURRENCY"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_CUSTTYPERow() As MST_CUSTTYPERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_CUSTTYPE")),MST_CUSTTYPERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_CUSTTYPE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_SALESMANRow() As MST_SALESMANRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_SALESMAN")),MST_SALESMANRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_SALESMAN"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_TAXRowByFK_MST_CUSTOMER_MST_TAX1() As MST_TAXRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_TAX1")),MST_TAXRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_TAX1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST_TAXRowByFK_MST_CUSTOMER_MST_TAX2() As MST_TAXRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_TAX2")),MST_TAXRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MST_CUSTOMER_MST_TAX2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREG_CODENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.REG_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREG_CODENull()
            Me(Me.tableMST_CUSTOMER.REG_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR1Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR1Null()
            Me(Me.tableMST_CUSTOMER.ADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR2Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR2Null()
            Me(Me.tableMST_CUSTOMER.ADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR3Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR3Null()
            Me(Me.tableMST_CUSTOMER.ADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR4Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.ADDR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR4Null()
            Me(Me.tableMST_CUSTOMER.ADDR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHONENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHONENull()
            Me(Me.tableMST_CUSTOMER.PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAXNull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAXNull()
            Me(Me.tableMST_CUSTOMER.FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWEBPAGENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.WEBPAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWEBPAGENull()
            Me(Me.tableMST_CUSTOMER.WEBPAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAILNull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAILNull()
            Me(Me.tableMST_CUSTOMER.EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTACT1Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.CONTACT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTACT1Null()
            Me(Me.tableMST_CUSTOMER.CONTACT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC1PHONENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.C1PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC1PHONENull()
            Me(Me.tableMST_CUSTOMER.C1PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC1FAXNull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.C1FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC1FAXNull()
            Me(Me.tableMST_CUSTOMER.C1FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTACT2Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.CONTACT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTACT2Null()
            Me(Me.tableMST_CUSTOMER.CONTACT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC2PHONENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.C2PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC2PHONENull()
            Me(Me.tableMST_CUSTOMER.C2PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC2FAXNull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.C2FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC2FAXNull()
            Me(Me.tableMST_CUSTOMER.C2FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_CODE1Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.TAX_CODE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_CODE1Null()
            Me(Me.tableMST_CUSTOMER.TAX_CODE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAX_CODE2Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.TAX_CODE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAX_CODE2Null()
            Me(Me.tableMST_CUSTOMER.TAX_CODE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALES_CODENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.SALES_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALES_CODENull()
            Me(Me.tableMST_CUSTOMER.SALES_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTTYPE_CODENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.CUSTTYPE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTTYPE_CODENull()
            Me(Me.tableMST_CUSTOMER.CUSTTYPE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXEXAMPNO1Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.TAXEXAMPNO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXEXAMPNO1Null()
            Me(Me.tableMST_CUSTOMER.TAXEXAMPNO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXEXAMPNO2Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.TAXEXAMPNO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXEXAMPNO2Null()
            Me(Me.tableMST_CUSTOMER.TAXEXAMPNO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHIPNAMENull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.SHIPNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHIPNAMENull()
            Me(Me.tableMST_CUSTOMER.SHIPNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHIPADDR1Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.SHIPADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHIPADDR1Null()
            Me(Me.tableMST_CUSTOMER.SHIPADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHIPADDR2Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.SHIPADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHIPADDR2Null()
            Me(Me.tableMST_CUSTOMER.SHIPADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHIPADDR3Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.SHIPADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHIPADDR3Null()
            Me(Me.tableMST_CUSTOMER.SHIPADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHIPADDR4Null() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.SHIPADDR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHIPADDR4Null()
            Me(Me.tableMST_CUSTOMER.SHIPADDR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTESNull() As Boolean
            Return Me.IsNull(Me.tableMST_CUSTOMER.NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTESNull()
            Me(Me.tableMST_CUSTOMER.NOTESColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_COMPANYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_COMPANYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_COMPANYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_COMPANYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_CURRENCYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_CURRENCYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_CURRENCYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_CURRENCYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_ACCOUNTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_ACCOUNTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_ACCOUNTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_ACCOUNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_BANKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_BANKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_BANKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_BANKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_CUSTTYPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_CUSTTYPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_CUSTTYPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_CUSTTYPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_SALESMANRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_SALESMANRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_SALESMANRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_SALESMANRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_TAXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_TAXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_TAXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_TAXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MST_CUSTOMERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MST_CUSTOMERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MST_CUSTOMERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MST_CUSTOMERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CSMasterDatasetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_COMPANYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_COMPANY"
            tableMapping.ColumnMappings.Add("COMPNO", "COMPNO")
            tableMapping.ColumnMappings.Add("COMP_NAME", "COMP_NAME")
            tableMapping.ColumnMappings.Add("REG_CODE", "REG_CODE")
            tableMapping.ColumnMappings.Add("ACC_YEAR", "ACC_YEAR")
            tableMapping.ColumnMappings.Add("CURR_CODE", "CURR_CODE")
            tableMapping.ColumnMappings.Add("ADDR1", "ADDR1")
            tableMapping.ColumnMappings.Add("ADDR2", "ADDR2")
            tableMapping.ColumnMappings.Add("ADDR3", "ADDR3")
            tableMapping.ColumnMappings.Add("ADDR4", "ADDR4")
            tableMapping.ColumnMappings.Add("PHONENO", "PHONENO")
            tableMapping.ColumnMappings.Add("FAXNO", "FAXNO")
            tableMapping.ColumnMappings.Add("ACC_AP", "ACC_AP")
            tableMapping.ColumnMappings.Add("ACC_APDISC", "ACC_APDISC")
            tableMapping.ColumnMappings.Add("ACC_AR", "ACC_AR")
            tableMapping.ColumnMappings.Add("ACC_ARDISC", "ACC_ARDISC")
            tableMapping.ColumnMappings.Add("ACC_SALES", "ACC_SALES")
            tableMapping.ColumnMappings.Add("START_MONTH", "START_MONTH")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MST_COMPANY] WHERE (([COMPNO] = @Original_COMPNO) AND ([COMP_NAME] ="& _ 
                " @Original_COMP_NAME) AND ((@IsNull_REG_CODE = 1 AND [REG_CODE] IS NULL) OR ([RE"& _ 
                "G_CODE] = @Original_REG_CODE)) AND ([ACC_YEAR] = @Original_ACC_YEAR) AND ([CURR_"& _ 
                "CODE] = @Original_CURR_CODE) AND ((@IsNull_ADDR1 = 1 AND [ADDR1] IS NULL) OR ([A"& _ 
                "DDR1] = @Original_ADDR1)) AND ((@IsNull_ADDR2 = 1 AND [ADDR2] IS NULL) OR ([ADDR"& _ 
                "2] = @Original_ADDR2)) AND ((@IsNull_ADDR3 = 1 AND [ADDR3] IS NULL) OR ([ADDR3] "& _ 
                "= @Original_ADDR3)) AND ((@IsNull_ADDR4 = 1 AND [ADDR4] IS NULL) OR ([ADDR4] = @"& _ 
                "Original_ADDR4)) AND ((@IsNull_PHONENO = 1 AND [PHONENO] IS NULL) OR ([PHONENO] "& _ 
                "= @Original_PHONENO)) AND ((@IsNull_FAXNO = 1 AND [FAXNO] IS NULL) OR ([FAXNO] ="& _ 
                " @Original_FAXNO)) AND ((@IsNull_ACC_AP = 1 AND [ACC_AP] IS NULL) OR ([ACC_AP] ="& _ 
                " @Original_ACC_AP)) AND ((@IsNull_ACC_APDISC = 1 AND [ACC_APDISC] IS NULL) OR (["& _ 
                "ACC_APDISC] = @Original_ACC_APDISC)) AND ((@IsNull_ACC_AR = 1 AND [ACC_AR] IS NU"& _ 
                "LL) OR ([ACC_AR] = @Original_ACC_AR)) AND ((@IsNull_ACC_ARDISC = 1 AND [ACC_ARDI"& _ 
                "SC] IS NULL) OR ([ACC_ARDISC] = @Original_ACC_ARDISC)) AND ((@IsNull_ACC_SALES ="& _ 
                " 1 AND [ACC_SALES] IS NULL) OR ([ACC_SALES] = @Original_ACC_SALES)) AND ([START_"& _ 
                "MONTH] = @Original_START_MONTH))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMPNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REG_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONENO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAXNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAXNO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_AP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_APDISC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_APDISC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_APDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_APDISC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_AR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_ARDISC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_ARDISC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_ARDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_ARDISC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_SALES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_SALES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_SALES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_SALES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_START_MONTH", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MONTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MST_COMPANY] ([COMP_NAME], [REG_CODE], [ACC_YEAR], [CURR_CODE], [ADD"& _ 
                "R1], [ADDR2], [ADDR3], [ADDR4], [PHONENO], [FAXNO], [ACC_AP], [ACC_APDISC], [ACC"& _ 
                "_AR], [ACC_ARDISC], [ACC_SALES], [START_MONTH]) VALUES (@COMP_NAME, @REG_CODE, @"& _ 
                "ACC_YEAR, @CURR_CODE, @ADDR1, @ADDR2, @ADDR3, @ADDR4, @PHONENO, @FAXNO, @ACC_AP,"& _ 
                " @ACC_APDISC, @ACC_AR, @ACC_ARDISC, @ACC_SALES, @START_MONTH);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COMPNO, C"& _ 
                "OMP_NAME, REG_CODE, ACC_YEAR, CURR_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONENO, FA"& _ 
                "XNO, ACC_AP, ACC_APDISC, ACC_AR, ACC_ARDISC, ACC_SALES, START_MONTH FROM MST_COM"& _ 
                "PANY WHERE (COMPNO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHONENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAXNO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_APDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_APDISC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_ARDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_ARDISC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_SALES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_SALES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_MONTH", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MONTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MST_COMPANY] SET [COMP_NAME] = @COMP_NAME, [REG_CODE] = @REG_CODE, [ACC_Y"& _ 
                "EAR] = @ACC_YEAR, [CURR_CODE] = @CURR_CODE, [ADDR1] = @ADDR1, [ADDR2] = @ADDR2, "& _ 
                "[ADDR3] = @ADDR3, [ADDR4] = @ADDR4, [PHONENO] = @PHONENO, [FAXNO] = @FAXNO, [ACC"& _ 
                "_AP] = @ACC_AP, [ACC_APDISC] = @ACC_APDISC, [ACC_AR] = @ACC_AR, [ACC_ARDISC] = @"& _ 
                "ACC_ARDISC, [ACC_SALES] = @ACC_SALES, [START_MONTH] = @START_MONTH WHERE (([COMP"& _ 
                "NO] = @Original_COMPNO) AND ([COMP_NAME] = @Original_COMP_NAME) AND ((@IsNull_RE"& _ 
                "G_CODE = 1 AND [REG_CODE] IS NULL) OR ([REG_CODE] = @Original_REG_CODE)) AND ([A"& _ 
                "CC_YEAR] = @Original_ACC_YEAR) AND ([CURR_CODE] = @Original_CURR_CODE) AND ((@Is"& _ 
                "Null_ADDR1 = 1 AND [ADDR1] IS NULL) OR ([ADDR1] = @Original_ADDR1)) AND ((@IsNul"& _ 
                "l_ADDR2 = 1 AND [ADDR2] IS NULL) OR ([ADDR2] = @Original_ADDR2)) AND ((@IsNull_A"& _ 
                "DDR3 = 1 AND [ADDR3] IS NULL) OR ([ADDR3] = @Original_ADDR3)) AND ((@IsNull_ADDR"& _ 
                "4 = 1 AND [ADDR4] IS NULL) OR ([ADDR4] = @Original_ADDR4)) AND ((@IsNull_PHONENO"& _ 
                " = 1 AND [PHONENO] IS NULL) OR ([PHONENO] = @Original_PHONENO)) AND ((@IsNull_FA"& _ 
                "XNO = 1 AND [FAXNO] IS NULL) OR ([FAXNO] = @Original_FAXNO)) AND ((@IsNull_ACC_A"& _ 
                "P = 1 AND [ACC_AP] IS NULL) OR ([ACC_AP] = @Original_ACC_AP)) AND ((@IsNull_ACC_"& _ 
                "APDISC = 1 AND [ACC_APDISC] IS NULL) OR ([ACC_APDISC] = @Original_ACC_APDISC)) A"& _ 
                "ND ((@IsNull_ACC_AR = 1 AND [ACC_AR] IS NULL) OR ([ACC_AR] = @Original_ACC_AR)) "& _ 
                "AND ((@IsNull_ACC_ARDISC = 1 AND [ACC_ARDISC] IS NULL) OR ([ACC_ARDISC] = @Origi"& _ 
                "nal_ACC_ARDISC)) AND ((@IsNull_ACC_SALES = 1 AND [ACC_SALES] IS NULL) OR ([ACC_S"& _ 
                "ALES] = @Original_ACC_SALES)) AND ([START_MONTH] = @Original_START_MONTH));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT COMPNO, COMP_NAME, REG_CODE, ACC_YEAR, CURR_CODE, ADDR1, ADDR2, ADDR3, ADDR4"& _ 
                ", PHONENO, FAXNO, ACC_AP, ACC_APDISC, ACC_AR, ACC_ARDISC, ACC_SALES, START_MONTH"& _ 
                " FROM MST_COMPANY WHERE (COMPNO = @COMPNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHONENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAXNO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_APDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_APDISC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_AR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_ARDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_ARDISC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_SALES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_SALES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_MONTH", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MONTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMPNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REG_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_YEAR", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONENO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONENO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONENO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAXNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAXNO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAXNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_AP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_APDISC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_APDISC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_APDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_APDISC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_AR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_AR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_AR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_ARDISC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_ARDISC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_ARDISC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_ARDISC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_SALES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_SALES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_SALES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_SALES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_START_MONTH", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MONTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPNO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     COMPNO, COMP_NAME, REG_CODE, ACC_YEAR, CURR_CODE, ADDR1, ADDR2, ADDR3,"& _ 
                " ADDR4, PHONENO, FAXNO, ACC_AP, ACC_APDISC, ACC_AR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ACC_"& _ 
                "ARDISC, ACC_SALES, START_MONTH"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         MST_COMPANY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_COMPANYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_COMPANYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_COMPANYDataTable = New CSMasterDataset.MST_COMPANYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_COMPANYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_COMPANY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_COMPNO As Integer,  _
                    ByVal Original_COMP_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ACC_YEAR As Short,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONENO As String,  _
                    ByVal Original_FAXNO As String,  _
                    ByVal Original_ACC_AP As String,  _
                    ByVal Original_ACC_APDISC As String,  _
                    ByVal Original_ACC_AR As String,  _
                    ByVal Original_ACC_ARDISC As String,  _
                    ByVal Original_ACC_SALES As String,  _
                    ByVal Original_START_MONTH As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COMPNO,Integer)
            If (Original_COMP_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COMP_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COMP_NAME,String)
            End If
            If (Original_REG_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_REG_CODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ACC_YEAR,Short)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONENO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_PHONENO,String)
            End If
            If (Original_FAXNO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_FAXNO,String)
            End If
            If (Original_ACC_AP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ACC_AP,String)
            End If
            If (Original_ACC_APDISC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_ACC_APDISC,String)
            End If
            If (Original_ACC_AR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_ACC_AR,String)
            End If
            If (Original_ACC_ARDISC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_ACC_ARDISC,String)
            End If
            If (Original_ACC_SALES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_ACC_SALES,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_START_MONTH,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal COMP_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ACC_YEAR As Short,  _
                    ByVal CURR_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONENO As String,  _
                    ByVal FAXNO As String,  _
                    ByVal ACC_AP As String,  _
                    ByVal ACC_APDISC As String,  _
                    ByVal ACC_AR As String,  _
                    ByVal ACC_ARDISC As String,  _
                    ByVal ACC_SALES As String,  _
                    ByVal START_MONTH As Short) As Integer
            If (COMP_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COMP_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COMP_NAME,String)
            End If
            If (REG_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(REG_CODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ACC_YEAR,Short)
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CURR_CODE,String)
            End If
            If (ADDR1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ADDR1,String)
            End If
            If (ADDR2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ADDR2,String)
            End If
            If (ADDR3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ADDR3,String)
            End If
            If (ADDR4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ADDR4,String)
            End If
            If (PHONENO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PHONENO,String)
            End If
            If (FAXNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FAXNO,String)
            End If
            If (ACC_AP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ACC_AP,String)
            End If
            If (ACC_APDISC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ACC_APDISC,String)
            End If
            If (ACC_AR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ACC_AR,String)
            End If
            If (ACC_ARDISC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ACC_ARDISC,String)
            End If
            If (ACC_SALES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ACC_SALES,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(START_MONTH,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COMP_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ACC_YEAR As Short,  _
                    ByVal CURR_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONENO As String,  _
                    ByVal FAXNO As String,  _
                    ByVal ACC_AP As String,  _
                    ByVal ACC_APDISC As String,  _
                    ByVal ACC_AR As String,  _
                    ByVal ACC_ARDISC As String,  _
                    ByVal ACC_SALES As String,  _
                    ByVal START_MONTH As Short,  _
                    ByVal Original_COMPNO As Integer,  _
                    ByVal Original_COMP_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ACC_YEAR As Short,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONENO As String,  _
                    ByVal Original_FAXNO As String,  _
                    ByVal Original_ACC_AP As String,  _
                    ByVal Original_ACC_APDISC As String,  _
                    ByVal Original_ACC_AR As String,  _
                    ByVal Original_ACC_ARDISC As String,  _
                    ByVal Original_ACC_SALES As String,  _
                    ByVal Original_START_MONTH As Short,  _
                    ByVal COMPNO As Integer) As Integer
            If (COMP_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COMP_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COMP_NAME,String)
            End If
            If (REG_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(REG_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ACC_YEAR,Short)
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CURR_CODE,String)
            End If
            If (ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ADDR1,String)
            End If
            If (ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ADDR2,String)
            End If
            If (ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ADDR3,String)
            End If
            If (ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ADDR4,String)
            End If
            If (PHONENO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PHONENO,String)
            End If
            If (FAXNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(FAXNO,String)
            End If
            If (ACC_AP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ACC_AP,String)
            End If
            If (ACC_APDISC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ACC_APDISC,String)
            End If
            If (ACC_AR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ACC_AR,String)
            End If
            If (ACC_ARDISC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ACC_ARDISC,String)
            End If
            If (ACC_SALES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ACC_SALES,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(START_MONTH,Short)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_COMPNO,Integer)
            If (Original_COMP_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COMP_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_COMP_NAME,String)
            End If
            If (Original_REG_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_REG_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ACC_YEAR,Short)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONENO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_PHONENO,String)
            End If
            If (Original_FAXNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_FAXNO,String)
            End If
            If (Original_ACC_AP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_ACC_AP,String)
            End If
            If (Original_ACC_APDISC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ACC_APDISC,String)
            End If
            If (Original_ACC_AR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ACC_AR,String)
            End If
            If (Original_ACC_ARDISC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_ACC_ARDISC,String)
            End If
            If (Original_ACC_SALES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_ACC_SALES,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_START_MONTH,Short)
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(COMPNO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COMP_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ACC_YEAR As Short,  _
                    ByVal CURR_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONENO As String,  _
                    ByVal FAXNO As String,  _
                    ByVal ACC_AP As String,  _
                    ByVal ACC_APDISC As String,  _
                    ByVal ACC_AR As String,  _
                    ByVal ACC_ARDISC As String,  _
                    ByVal ACC_SALES As String,  _
                    ByVal START_MONTH As Short,  _
                    ByVal Original_COMPNO As Integer,  _
                    ByVal Original_COMP_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ACC_YEAR As Short,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONENO As String,  _
                    ByVal Original_FAXNO As String,  _
                    ByVal Original_ACC_AP As String,  _
                    ByVal Original_ACC_APDISC As String,  _
                    ByVal Original_ACC_AR As String,  _
                    ByVal Original_ACC_ARDISC As String,  _
                    ByVal Original_ACC_SALES As String,  _
                    ByVal Original_START_MONTH As Short) As Integer
            Return Me.Update(COMP_NAME, REG_CODE, ACC_YEAR, CURR_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONENO, FAXNO, ACC_AP, ACC_APDISC, ACC_AR, ACC_ARDISC, ACC_SALES, START_MONTH, Original_COMPNO, Original_COMP_NAME, Original_REG_CODE, Original_ACC_YEAR, Original_CURR_CODE, Original_ADDR1, Original_ADDR2, Original_ADDR3, Original_ADDR4, Original_PHONENO, Original_FAXNO, Original_ACC_AP, Original_ACC_APDISC, Original_ACC_AR, Original_ACC_ARDISC, Original_ACC_SALES, Original_START_MONTH, Original_COMPNO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_CURRENCYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_CURRENCY"
            tableMapping.ColumnMappings.Add("CURR_CODE", "CURR_CODE")
            tableMapping.ColumnMappings.Add("CURR_NAME", "CURR_NAME")
            tableMapping.ColumnMappings.Add("CURR_RATE", "CURR_RATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_CURRENCY] WHERE (([CURR_CODE] = @Original_CURR_CODE) AND ("& _ 
                "(@IsNull_CURR_NAME = 1 AND [CURR_NAME] IS NULL) OR ([CURR_NAME] = @Original_CURR"& _ 
                "_NAME)) AND ([CURR_RATE] = @Original_CURR_RATE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_CURRENCY] ([CURR_CODE], [CURR_NAME], [CURR_RATE]) VALUES ("& _ 
                "@CURR_CODE, @CURR_NAME, @CURR_RATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CURR_CODE, CURR_NAME, CURR_RATE FRO"& _ 
                "M MST_CURRENCY WHERE (CURR_CODE = @CURR_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_CURRENCY] SET [CURR_CODE] = @CURR_CODE, [CURR_NAME] = @CURR_NAM"& _ 
                "E, [CURR_RATE] = @CURR_RATE WHERE (([CURR_CODE] = @Original_CURR_CODE) AND ((@Is"& _ 
                "Null_CURR_NAME = 1 AND [CURR_NAME] IS NULL) OR ([CURR_NAME] = @Original_CURR_NAM"& _ 
                "E)) AND ([CURR_RATE] = @Original_CURR_RATE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CURR_CODE, CURR_NAME, CURR"& _ 
                "_RATE FROM MST_CURRENCY WHERE (CURR_CODE = @CURR_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "CURR_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CURR_CODE, CURR_NAME, CURR_RATE FROM dbo.MST_CURRENCY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_CURRENCYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_CURRENCYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_CURRENCYDataTable = New CSMasterDataset.MST_CURRENCYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_CURRENCYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_CURRENCY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CURR_CODE As String, ByVal Original_CURR_NAME As String, ByVal Original_CURR_RATE As Decimal) As Integer
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_CURR_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CURR_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CURR_RATE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CURR_CODE As String, ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal) As Integer
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CURR_CODE,String)
            End If
            If (CURR_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CURR_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CURR_RATE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CURR_CODE As String, ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal, ByVal Original_CURR_CODE As String, ByVal Original_CURR_NAME As String, ByVal Original_CURR_RATE As Decimal) As Integer
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CURR_CODE,String)
            End If
            If (CURR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CURR_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CURR_RATE,Decimal)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_CURR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CURR_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CURR_RATE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CURR_NAME As String, ByVal CURR_RATE As Decimal, ByVal Original_CURR_CODE As String, ByVal Original_CURR_NAME As String, ByVal Original_CURR_RATE As Decimal) As Integer
            Return Me.Update(Original_CURR_CODE, CURR_NAME, CURR_RATE, Original_CURR_CODE, Original_CURR_NAME, Original_CURR_RATE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_ACCOUNTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_ACCOUNT"
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            tableMapping.ColumnMappings.Add("ACC_NAME", "ACC_NAME")
            tableMapping.ColumnMappings.Add("ACC_TYPE", "ACC_TYPE")
            tableMapping.ColumnMappings.Add("RETAINED_EARNINGS", "RETAINED_EARNINGS")
            tableMapping.ColumnMappings.Add("IS_ACTIVE", "IS_ACTIVE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_ACCOUNT] WHERE (([ACC_CODE] = @Original_ACC_CODE) AND ((@I"& _ 
                "sNull_ACC_NAME = 1 AND [ACC_NAME] IS NULL) OR ([ACC_NAME] = @Original_ACC_NAME))"& _ 
                " AND ((@IsNull_ACC_TYPE = 1 AND [ACC_TYPE] IS NULL) OR ([ACC_TYPE] = @Original_A"& _ 
                "CC_TYPE)) AND ((@IsNull_RETAINED_EARNINGS = 1 AND [RETAINED_EARNINGS] IS NULL) O"& _ 
                "R ([RETAINED_EARNINGS] = @Original_RETAINED_EARNINGS)) AND ((@IsNull_IS_ACTIVE ="& _ 
                " 1 AND [IS_ACTIVE] IS NULL) OR ([IS_ACTIVE] = @Original_IS_ACTIVE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_ACTIVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_ACCOUNT] ([ACC_CODE], [ACC_NAME], [ACC_TYPE], [RETAINED_EA"& _ 
                "RNINGS], [IS_ACTIVE]) VALUES (@ACC_CODE, @ACC_NAME, @ACC_TYPE, @RETAINED_EARNING"& _ 
                "S, @IS_ACTIVE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTI"& _ 
                "VE FROM MST_ACCOUNT WHERE (ACC_CODE = @ACC_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_ACCOUNT] SET [ACC_CODE] = @ACC_CODE, [ACC_NAME] = @ACC_NAME, [A"& _ 
                "CC_TYPE] = @ACC_TYPE, [RETAINED_EARNINGS] = @RETAINED_EARNINGS, [IS_ACTIVE] = @I"& _ 
                "S_ACTIVE WHERE (([ACC_CODE] = @Original_ACC_CODE) AND ((@IsNull_ACC_NAME = 1 AND"& _ 
                " [ACC_NAME] IS NULL) OR ([ACC_NAME] = @Original_ACC_NAME)) AND ((@IsNull_ACC_TYP"& _ 
                "E = 1 AND [ACC_TYPE] IS NULL) OR ([ACC_TYPE] = @Original_ACC_TYPE)) AND ((@IsNul"& _ 
                "l_RETAINED_EARNINGS = 1 AND [RETAINED_EARNINGS] IS NULL) OR ([RETAINED_EARNINGS]"& _ 
                " = @Original_RETAINED_EARNINGS)) AND ((@IsNull_IS_ACTIVE = 1 AND [IS_ACTIVE] IS "& _ 
                "NULL) OR ([IS_ACTIVE] = @Original_IS_ACTIVE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_CODE, ACC_NAME, ACC_"& _ 
                "TYPE, RETAINED_EARNINGS, IS_ACTIVE FROM MST_ACCOUNT WHERE (ACC_CODE = @ACC_CODE)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETAINED_EARNINGS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETAINED_EARNINGS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_ACTIVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_ACTIVE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE FROM dbo.MST_AC"& _ 
                "COUNT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_ACCOUNTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_ACCOUNTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_ACCOUNTDataTable = New CSMasterDataset.MST_ACCOUNTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_ACCOUNTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_ACCOUNT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACC_NAME,String)
            End If
            If (Original_ACC_TYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_ACTIVE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            If (ACC_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ACC_NAME,String)
            End If
            If (ACC_TYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_ACTIVE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_CODE As String, ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean), ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACC_CODE,String)
            End If
            If (ACC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ACC_NAME,String)
            End If
            If (ACC_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_ACTIVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ACC_CODE,String)
            End If
            If (Original_ACC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ACC_NAME,String)
            End If
            If (Original_ACC_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ACC_TYPE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_RETAINED_EARNINGS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_RETAINED_EARNINGS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_ACTIVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_IS_ACTIVE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_NAME As String, ByVal ACC_TYPE As Global.System.Nullable(Of Byte), ByVal RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal IS_ACTIVE As Global.System.Nullable(Of Boolean), ByVal Original_ACC_CODE As String, ByVal Original_ACC_NAME As String, ByVal Original_ACC_TYPE As Global.System.Nullable(Of Byte), ByVal Original_RETAINED_EARNINGS As Global.System.Nullable(Of Boolean), ByVal Original_IS_ACTIVE As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_ACC_CODE, ACC_NAME, ACC_TYPE, RETAINED_EARNINGS, IS_ACTIVE, Original_ACC_CODE, Original_ACC_NAME, Original_ACC_TYPE, Original_RETAINED_EARNINGS, Original_IS_ACTIVE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_BANKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_BANK"
            tableMapping.ColumnMappings.Add("BANKNO", "BANKNO")
            tableMapping.ColumnMappings.Add("BANK_CODE", "BANK_CODE")
            tableMapping.ColumnMappings.Add("BANK_NAME", "BANK_NAME")
            tableMapping.ColumnMappings.Add("ACC_CODE", "ACC_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_BANK] WHERE (([BANKNO] = @Original_BANKNO) AND ([BANK_CODE"& _ 
                "] = @Original_BANK_CODE) AND ([BANK_NAME] = @Original_BANK_NAME) AND ([ACC_CODE]"& _ 
                " = @Original_ACC_CODE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BANKNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANKNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BANK_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BANK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_BANK] ([BANKNO], [BANK_CODE], [BANK_NAME], [ACC_CODE]) VAL"& _ 
                "UES (@BANKNO, @BANK_CODE, @BANK_NAME, @ACC_CODE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT BANKNO, BANK_CODE, BAN"& _ 
                "K_NAME, ACC_CODE FROM MST_BANK WHERE (BANKNO = @BANKNO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANKNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANKNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANK_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_BANK] SET [BANKNO] = @BANKNO, [BANK_CODE] = @BANK_CODE, [BANK_N"& _ 
                "AME] = @BANK_NAME, [ACC_CODE] = @ACC_CODE WHERE (([BANKNO] = @Original_BANKNO) A"& _ 
                "ND ([BANK_CODE] = @Original_BANK_CODE) AND ([BANK_NAME] = @Original_BANK_NAME) A"& _ 
                "ND ([ACC_CODE] = @Original_ACC_CODE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT BANKNO, BANK_CODE, BANK_NAME, ACC"& _ 
                "_CODE FROM MST_BANK WHERE (BANKNO = @BANKNO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANKNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANKNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANK_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BANKNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANKNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BANK_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BANK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANK_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT BANKNO, BANK_CODE, BANK_NAME, ACC_CODE FROM dbo.MST_BANK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_BANKDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_BANKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_BANKDataTable = New CSMasterDataset.MST_BANKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_BANKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_BANK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_BANKNO As Integer, ByVal Original_BANK_CODE As String, ByVal Original_BANK_NAME As String, ByVal Original_ACC_CODE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_BANKNO,Integer)
            If (Original_BANK_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BANK_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_BANK_CODE,String)
            End If
            If (Original_BANK_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BANK_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_BANK_NAME,String)
            End If
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ACC_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal BANKNO As Integer, ByVal BANK_CODE As String, ByVal BANK_NAME As String, ByVal ACC_CODE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(BANKNO,Integer)
            If (BANK_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BANK_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(BANK_CODE,String)
            End If
            If (BANK_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BANK_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BANK_NAME,String)
            End If
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ACC_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal BANKNO As Integer, ByVal BANK_CODE As String, ByVal BANK_NAME As String, ByVal ACC_CODE As String, ByVal Original_BANKNO As Integer, ByVal Original_BANK_CODE As String, ByVal Original_BANK_NAME As String, ByVal Original_ACC_CODE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(BANKNO,Integer)
            If (BANK_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BANK_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(BANK_CODE,String)
            End If
            If (BANK_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BANK_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BANK_NAME,String)
            End If
            If (ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ACC_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_BANKNO,Integer)
            If (Original_BANK_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BANK_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_BANK_CODE,String)
            End If
            If (Original_BANK_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BANK_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_BANK_NAME,String)
            End If
            If (Original_ACC_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ACC_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ACC_CODE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal BANK_CODE As String, ByVal BANK_NAME As String, ByVal ACC_CODE As String, ByVal Original_BANKNO As Integer, ByVal Original_BANK_CODE As String, ByVal Original_BANK_NAME As String, ByVal Original_ACC_CODE As String) As Integer
            Return Me.Update(Original_BANKNO, BANK_CODE, BANK_NAME, ACC_CODE, Original_BANKNO, Original_BANK_CODE, Original_BANK_NAME, Original_ACC_CODE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_CUSTTYPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_CUSTTYPE"
            tableMapping.ColumnMappings.Add("CUSTTYPE_CODE", "CUSTTYPE_CODE")
            tableMapping.ColumnMappings.Add("CUSTTYPE_NAME", "CUSTTYPE_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_CUSTTYPE] WHERE (([CUSTTYPE_CODE] = @Original_CUSTTYPE_COD"& _ 
                "E) AND ([CUSTTYPE_NAME] = @Original_CUSTTYPE_NAME))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_CUSTTYPE] ([CUSTTYPE_CODE], [CUSTTYPE_NAME]) VALUES (@CUST"& _ 
                "TYPE_CODE, @CUSTTYPE_NAME);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CUSTTYPE_CODE, CUSTTYPE_NAME FROM MST_CUSTTY"& _ 
                "PE WHERE (CUSTTYPE_CODE = @CUSTTYPE_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_CUSTTYPE] SET [CUSTTYPE_CODE] = @CUSTTYPE_CODE, [CUSTTYPE_NAME]"& _ 
                " = @CUSTTYPE_NAME WHERE (([CUSTTYPE_CODE] = @Original_CUSTTYPE_CODE) AND ([CUSTT"& _ 
                "YPE_NAME] = @Original_CUSTTYPE_NAME));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CUSTTYPE_CODE, CUSTTYPE_NAME FROM"& _ 
                " MST_CUSTTYPE WHERE (CUSTTYPE_CODE = @CUSTTYPE_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTTYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CUSTTYPE_CODE, CUSTTYPE_NAME FROM dbo.MST_CUSTTYPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_CUSTTYPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_CUSTTYPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_CUSTTYPEDataTable = New CSMasterDataset.MST_CUSTTYPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_CUSTTYPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_CUSTTYPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CUSTTYPE_CODE As String, ByVal Original_CUSTTYPE_NAME As String) As Integer
            If (Original_CUSTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTTYPE_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CUSTTYPE_CODE,String)
            End If
            If (Original_CUSTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTTYPE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CUSTTYPE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CUSTTYPE_CODE As String, ByVal CUSTTYPE_NAME As String) As Integer
            If (CUSTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTTYPE_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CUSTTYPE_CODE,String)
            End If
            If (CUSTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTTYPE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CUSTTYPE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CUSTTYPE_CODE As String, ByVal CUSTTYPE_NAME As String, ByVal Original_CUSTTYPE_CODE As String, ByVal Original_CUSTTYPE_NAME As String) As Integer
            If (CUSTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTTYPE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CUSTTYPE_CODE,String)
            End If
            If (CUSTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTTYPE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CUSTTYPE_NAME,String)
            End If
            If (Original_CUSTTYPE_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTTYPE_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_CUSTTYPE_CODE,String)
            End If
            If (Original_CUSTTYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTTYPE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CUSTTYPE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CUSTTYPE_NAME As String, ByVal Original_CUSTTYPE_CODE As String, ByVal Original_CUSTTYPE_NAME As String) As Integer
            Return Me.Update(Original_CUSTTYPE_CODE, CUSTTYPE_NAME, Original_CUSTTYPE_CODE, Original_CUSTTYPE_NAME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_SALESMANTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_SALESMAN"
            tableMapping.ColumnMappings.Add("SALES_CODE", "SALES_CODE")
            tableMapping.ColumnMappings.Add("LAST_NAME", "LAST_NAME")
            tableMapping.ColumnMappings.Add("FIRST_NAME", "FIRST_NAME")
            tableMapping.ColumnMappings.Add("JOBTITLE", "JOBTITLE")
            tableMapping.ColumnMappings.Add("HANDPHONE1", "HANDPHONE1")
            tableMapping.ColumnMappings.Add("HANDPHONE2", "HANDPHONE2")
            tableMapping.ColumnMappings.Add("HOMEPHONE", "HOMEPHONE")
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_SALESMAN] WHERE (([SALES_CODE] = @Original_SALES_CODE) AND"& _ 
                " ((@IsNull_LAST_NAME = 1 AND [LAST_NAME] IS NULL) OR ([LAST_NAME] = @Original_LA"& _ 
                "ST_NAME)) AND ((@IsNull_FIRST_NAME = 1 AND [FIRST_NAME] IS NULL) OR ([FIRST_NAME"& _ 
                "] = @Original_FIRST_NAME)) AND ((@IsNull_JOBTITLE = 1 AND [JOBTITLE] IS NULL) OR"& _ 
                " ([JOBTITLE] = @Original_JOBTITLE)) AND ((@IsNull_HANDPHONE1 = 1 AND [HANDPHONE1"& _ 
                "] IS NULL) OR ([HANDPHONE1] = @Original_HANDPHONE1)) AND ((@IsNull_HANDPHONE2 = "& _ 
                "1 AND [HANDPHONE2] IS NULL) OR ([HANDPHONE2] = @Original_HANDPHONE2)) AND ((@IsN"& _ 
                "ull_HOMEPHONE = 1 AND [HOMEPHONE] IS NULL) OR ([HOMEPHONE] = @Original_HOMEPHONE"& _ 
                ")) AND ((@IsNull_EMAIL = 1 AND [EMAIL] IS NULL) OR ([EMAIL] = @Original_EMAIL)))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LAST_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LAST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIRST_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIRST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_JOBTITLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOBTITLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JOBTITLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOBTITLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HANDPHONE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HANDPHONE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HANDPHONE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HANDPHONE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HOMEPHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HOMEPHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HOMEPHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HOMEPHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMAIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_SALESMAN] ([SALES_CODE], [LAST_NAME], [FIRST_NAME], [JOBTI"& _ 
                "TLE], [HANDPHONE1], [HANDPHONE2], [HOMEPHONE], [EMAIL]) VALUES (@SALES_CODE, @LA"& _ 
                "ST_NAME, @FIRST_NAME, @JOBTITLE, @HANDPHONE1, @HANDPHONE2, @HOMEPHONE, @EMAIL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SALES_CODE, LAST_NAME, FIRST_NAME, JOBTITLE, HANDPHONE1, HANDPHONE2, HOM"& _ 
                "EPHONE, EMAIL FROM MST_SALESMAN WHERE (SALES_CODE = @SALES_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIRST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JOBTITLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOBTITLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HANDPHONE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HANDPHONE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HOMEPHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HOMEPHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_SALESMAN] SET [SALES_CODE] = @SALES_CODE, [LAST_NAME] = @LAST_N"& _ 
                "AME, [FIRST_NAME] = @FIRST_NAME, [JOBTITLE] = @JOBTITLE, [HANDPHONE1] = @HANDPHO"& _ 
                "NE1, [HANDPHONE2] = @HANDPHONE2, [HOMEPHONE] = @HOMEPHONE, [EMAIL] = @EMAIL WHER"& _ 
                "E (([SALES_CODE] = @Original_SALES_CODE) AND ((@IsNull_LAST_NAME = 1 AND [LAST_N"& _ 
                "AME] IS NULL) OR ([LAST_NAME] = @Original_LAST_NAME)) AND ((@IsNull_FIRST_NAME ="& _ 
                " 1 AND [FIRST_NAME] IS NULL) OR ([FIRST_NAME] = @Original_FIRST_NAME)) AND ((@Is"& _ 
                "Null_JOBTITLE = 1 AND [JOBTITLE] IS NULL) OR ([JOBTITLE] = @Original_JOBTITLE)) "& _ 
                "AND ((@IsNull_HANDPHONE1 = 1 AND [HANDPHONE1] IS NULL) OR ([HANDPHONE1] = @Origi"& _ 
                "nal_HANDPHONE1)) AND ((@IsNull_HANDPHONE2 = 1 AND [HANDPHONE2] IS NULL) OR ([HAN"& _ 
                "DPHONE2] = @Original_HANDPHONE2)) AND ((@IsNull_HOMEPHONE = 1 AND [HOMEPHONE] IS"& _ 
                " NULL) OR ([HOMEPHONE] = @Original_HOMEPHONE)) AND ((@IsNull_EMAIL = 1 AND [EMAI"& _ 
                "L] IS NULL) OR ([EMAIL] = @Original_EMAIL)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SALES_CODE, LAST_NAME, FIR"& _ 
                "ST_NAME, JOBTITLE, HANDPHONE1, HANDPHONE2, HOMEPHONE, EMAIL FROM MST_SALESMAN WH"& _ 
                "ERE (SALES_CODE = @SALES_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIRST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JOBTITLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOBTITLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HANDPHONE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HANDPHONE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HOMEPHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HOMEPHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LAST_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LAST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIRST_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIRST_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_JOBTITLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOBTITLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JOBTITLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOBTITLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HANDPHONE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HANDPHONE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HANDPHONE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HANDPHONE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDPHONE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HOMEPHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HOMEPHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HOMEPHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HOMEPHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMAIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SALES_CODE, LAST_NAME, FIRST_NAME, JOBTITLE, HANDPHONE1, HANDPHONE2, HOMEP"& _ 
                "HONE, EMAIL FROM dbo.MST_SALESMAN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_SALESMANDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_SALESMANDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_SALESMANDataTable = New CSMasterDataset.MST_SALESMANDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_SALESMANDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_SALESMAN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SALES_CODE As String, ByVal Original_LAST_NAME As String, ByVal Original_FIRST_NAME As String, ByVal Original_JOBTITLE As String, ByVal Original_HANDPHONE1 As String, ByVal Original_HANDPHONE2 As String, ByVal Original_HOMEPHONE As String, ByVal Original_EMAIL As String) As Integer
            If (Original_SALES_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SALES_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SALES_CODE,String)
            End If
            If (Original_LAST_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LAST_NAME,String)
            End If
            If (Original_FIRST_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FIRST_NAME,String)
            End If
            If (Original_JOBTITLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_JOBTITLE,String)
            End If
            If (Original_HANDPHONE1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_HANDPHONE1,String)
            End If
            If (Original_HANDPHONE2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_HANDPHONE2,String)
            End If
            If (Original_HOMEPHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_HOMEPHONE,String)
            End If
            If (Original_EMAIL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_EMAIL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SALES_CODE As String, ByVal LAST_NAME As String, ByVal FIRST_NAME As String, ByVal JOBTITLE As String, ByVal HANDPHONE1 As String, ByVal HANDPHONE2 As String, ByVal HOMEPHONE As String, ByVal EMAIL As String) As Integer
            If (SALES_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SALES_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SALES_CODE,String)
            End If
            If (LAST_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LAST_NAME,String)
            End If
            If (FIRST_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FIRST_NAME,String)
            End If
            If (JOBTITLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(JOBTITLE,String)
            End If
            If (HANDPHONE1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(HANDPHONE1,String)
            End If
            If (HANDPHONE2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(HANDPHONE2,String)
            End If
            If (HOMEPHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(HOMEPHONE,String)
            End If
            If (EMAIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(EMAIL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SALES_CODE As String,  _
                    ByVal LAST_NAME As String,  _
                    ByVal FIRST_NAME As String,  _
                    ByVal JOBTITLE As String,  _
                    ByVal HANDPHONE1 As String,  _
                    ByVal HANDPHONE2 As String,  _
                    ByVal HOMEPHONE As String,  _
                    ByVal EMAIL As String,  _
                    ByVal Original_SALES_CODE As String,  _
                    ByVal Original_LAST_NAME As String,  _
                    ByVal Original_FIRST_NAME As String,  _
                    ByVal Original_JOBTITLE As String,  _
                    ByVal Original_HANDPHONE1 As String,  _
                    ByVal Original_HANDPHONE2 As String,  _
                    ByVal Original_HOMEPHONE As String,  _
                    ByVal Original_EMAIL As String) As Integer
            If (SALES_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SALES_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SALES_CODE,String)
            End If
            If (LAST_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LAST_NAME,String)
            End If
            If (FIRST_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FIRST_NAME,String)
            End If
            If (JOBTITLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(JOBTITLE,String)
            End If
            If (HANDPHONE1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(HANDPHONE1,String)
            End If
            If (HANDPHONE2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(HANDPHONE2,String)
            End If
            If (HOMEPHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(HOMEPHONE,String)
            End If
            If (EMAIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(EMAIL,String)
            End If
            If (Original_SALES_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SALES_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SALES_CODE,String)
            End If
            If (Original_LAST_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_LAST_NAME,String)
            End If
            If (Original_FIRST_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FIRST_NAME,String)
            End If
            If (Original_JOBTITLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_JOBTITLE,String)
            End If
            If (Original_HANDPHONE1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_HANDPHONE1,String)
            End If
            If (Original_HANDPHONE2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_HANDPHONE2,String)
            End If
            If (Original_HOMEPHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_HOMEPHONE,String)
            End If
            If (Original_EMAIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_EMAIL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LAST_NAME As String, ByVal FIRST_NAME As String, ByVal JOBTITLE As String, ByVal HANDPHONE1 As String, ByVal HANDPHONE2 As String, ByVal HOMEPHONE As String, ByVal EMAIL As String, ByVal Original_SALES_CODE As String, ByVal Original_LAST_NAME As String, ByVal Original_FIRST_NAME As String, ByVal Original_JOBTITLE As String, ByVal Original_HANDPHONE1 As String, ByVal Original_HANDPHONE2 As String, ByVal Original_HOMEPHONE As String, ByVal Original_EMAIL As String) As Integer
            Return Me.Update(Original_SALES_CODE, LAST_NAME, FIRST_NAME, JOBTITLE, HANDPHONE1, HANDPHONE2, HOMEPHONE, EMAIL, Original_SALES_CODE, Original_LAST_NAME, Original_FIRST_NAME, Original_JOBTITLE, Original_HANDPHONE1, Original_HANDPHONE2, Original_HOMEPHONE, Original_EMAIL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_TAXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_TAX"
            tableMapping.ColumnMappings.Add("TAX_CODE", "TAX_CODE")
            tableMapping.ColumnMappings.Add("TAX_NAME", "TAX_NAME")
            tableMapping.ColumnMappings.Add("TAX_RATE", "TAX_RATE")
            tableMapping.ColumnMappings.Add("TAX_ACC", "TAX_ACC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MST_TAX] WHERE (([TAX_CODE] = @Original_TAX_CODE) AND ([TAX_NA"& _ 
                "ME] = @Original_TAX_NAME) AND ([TAX_RATE] = @Original_TAX_RATE) AND ([TAX_ACC] ="& _ 
                " @Original_TAX_ACC))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_RATE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_ACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_ACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MST_TAX] ([TAX_CODE], [TAX_NAME], [TAX_RATE], [TAX_ACC]) VALUE"& _ 
                "S (@TAX_CODE, @TAX_NAME, @TAX_RATE, @TAX_ACC);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TAX_CODE, TAX_NAME, TAX_R"& _ 
                "ATE, TAX_ACC FROM MST_TAX WHERE (TAX_CODE = @TAX_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_RATE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_ACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_ACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MST_TAX] SET [TAX_CODE] = @TAX_CODE, [TAX_NAME] = @TAX_NAME, [TAX_R"& _ 
                "ATE] = @TAX_RATE, [TAX_ACC] = @TAX_ACC WHERE (([TAX_CODE] = @Original_TAX_CODE) "& _ 
                "AND ([TAX_NAME] = @Original_TAX_NAME) AND ([TAX_RATE] = @Original_TAX_RATE) AND "& _ 
                "([TAX_ACC] = @Original_TAX_ACC));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TAX_CODE, TAX_NAME, TAX_RATE, TAX_ACC "& _ 
                "FROM MST_TAX WHERE (TAX_CODE = @TAX_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_RATE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_ACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_ACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_RATE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_ACC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_ACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TAX_CODE, TAX_NAME, TAX_RATE, TAX_ACC FROM dbo.MST_TAX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_TAXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_TAXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_TAXDataTable = New CSMasterDataset.MST_TAXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_TAXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_TAX")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TAX_CODE As String, ByVal Original_TAX_NAME As String, ByVal Original_TAX_RATE As Double, ByVal Original_TAX_ACC As String) As Integer
            If (Original_TAX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TAX_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TAX_CODE,String)
            End If
            If (Original_TAX_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TAX_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TAX_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TAX_RATE,Double)
            If (Original_TAX_ACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TAX_ACC")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TAX_ACC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TAX_CODE As String, ByVal TAX_NAME As String, ByVal TAX_RATE As Double, ByVal TAX_ACC As String) As Integer
            If (TAX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TAX_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TAX_CODE,String)
            End If
            If (TAX_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TAX_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TAX_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TAX_RATE,Double)
            If (TAX_ACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TAX_ACC")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TAX_ACC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TAX_CODE As String, ByVal TAX_NAME As String, ByVal TAX_RATE As Double, ByVal TAX_ACC As String, ByVal Original_TAX_CODE As String, ByVal Original_TAX_NAME As String, ByVal Original_TAX_RATE As Double, ByVal Original_TAX_ACC As String) As Integer
            If (TAX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TAX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TAX_CODE,String)
            End If
            If (TAX_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TAX_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TAX_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TAX_RATE,Double)
            If (TAX_ACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TAX_ACC")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TAX_ACC,String)
            End If
            If (Original_TAX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TAX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_TAX_CODE,String)
            End If
            If (Original_TAX_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TAX_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TAX_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_TAX_RATE,Double)
            If (Original_TAX_ACC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TAX_ACC")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TAX_ACC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TAX_NAME As String, ByVal TAX_RATE As Double, ByVal TAX_ACC As String, ByVal Original_TAX_CODE As String, ByVal Original_TAX_NAME As String, ByVal Original_TAX_RATE As Double, ByVal Original_TAX_ACC As String) As Integer
            Return Me.Update(Original_TAX_CODE, TAX_NAME, TAX_RATE, TAX_ACC, Original_TAX_CODE, Original_TAX_NAME, Original_TAX_RATE, Original_TAX_ACC)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MST_CUSTOMERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MST_CUSTOMER"
            tableMapping.ColumnMappings.Add("CUSTOMER_CODE", "CUSTOMER_CODE")
            tableMapping.ColumnMappings.Add("CUSTOMER_NAME", "CUSTOMER_NAME")
            tableMapping.ColumnMappings.Add("REG_CODE", "REG_CODE")
            tableMapping.ColumnMappings.Add("ADDR1", "ADDR1")
            tableMapping.ColumnMappings.Add("ADDR2", "ADDR2")
            tableMapping.ColumnMappings.Add("ADDR3", "ADDR3")
            tableMapping.ColumnMappings.Add("ADDR4", "ADDR4")
            tableMapping.ColumnMappings.Add("PHONE", "PHONE")
            tableMapping.ColumnMappings.Add("FAX", "FAX")
            tableMapping.ColumnMappings.Add("WEBPAGE", "WEBPAGE")
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL")
            tableMapping.ColumnMappings.Add("CONTACT1", "CONTACT1")
            tableMapping.ColumnMappings.Add("C1PHONE", "C1PHONE")
            tableMapping.ColumnMappings.Add("C1FAX", "C1FAX")
            tableMapping.ColumnMappings.Add("CONTACT2", "CONTACT2")
            tableMapping.ColumnMappings.Add("C2PHONE", "C2PHONE")
            tableMapping.ColumnMappings.Add("C2FAX", "C2FAX")
            tableMapping.ColumnMappings.Add("DISCDAY", "DISCDAY")
            tableMapping.ColumnMappings.Add("DISCPTG", "DISCPTG")
            tableMapping.ColumnMappings.Add("DUEDAY", "DUEDAY")
            tableMapping.ColumnMappings.Add("CURR_CODE", "CURR_CODE")
            tableMapping.ColumnMappings.Add("IS_COD", "IS_COD")
            tableMapping.ColumnMappings.Add("CREDIT_LIMIT", "CREDIT_LIMIT")
            tableMapping.ColumnMappings.Add("TAX_CODE1", "TAX_CODE1")
            tableMapping.ColumnMappings.Add("TAX_CODE2", "TAX_CODE2")
            tableMapping.ColumnMappings.Add("SALES_CODE", "SALES_CODE")
            tableMapping.ColumnMappings.Add("CUSTTYPE_CODE", "CUSTTYPE_CODE")
            tableMapping.ColumnMappings.Add("TAXEXAMPNO1", "TAXEXAMPNO1")
            tableMapping.ColumnMappings.Add("TAXEXAMPNO2", "TAXEXAMPNO2")
            tableMapping.ColumnMappings.Add("SHIPNAME", "SHIPNAME")
            tableMapping.ColumnMappings.Add("SHIPADDR1", "SHIPADDR1")
            tableMapping.ColumnMappings.Add("SHIPADDR2", "SHIPADDR2")
            tableMapping.ColumnMappings.Add("SHIPADDR3", "SHIPADDR3")
            tableMapping.ColumnMappings.Add("SHIPADDR4", "SHIPADDR4")
            tableMapping.ColumnMappings.Add("IS_SUSPEND", "IS_SUSPEND")
            tableMapping.ColumnMappings.Add("IS_PRINTSTM", "IS_PRINTSTM")
            tableMapping.ColumnMappings.Add("NOTES", "NOTES")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MST_CUSTOMER] WHERE (([CUSTOMER_CODE] = @Original_CUSTOMER_CODE) AND"& _ 
                " ([CUSTOMER_NAME] = @Original_CUSTOMER_NAME) AND ((@IsNull_REG_CODE = 1 AND [REG"& _ 
                "_CODE] IS NULL) OR ([REG_CODE] = @Original_REG_CODE)) AND ((@IsNull_ADDR1 = 1 AN"& _ 
                "D [ADDR1] IS NULL) OR ([ADDR1] = @Original_ADDR1)) AND ((@IsNull_ADDR2 = 1 AND ["& _ 
                "ADDR2] IS NULL) OR ([ADDR2] = @Original_ADDR2)) AND ((@IsNull_ADDR3 = 1 AND [ADD"& _ 
                "R3] IS NULL) OR ([ADDR3] = @Original_ADDR3)) AND ((@IsNull_ADDR4 = 1 AND [ADDR4]"& _ 
                " IS NULL) OR ([ADDR4] = @Original_ADDR4)) AND ((@IsNull_PHONE = 1 AND [PHONE] IS"& _ 
                " NULL) OR ([PHONE] = @Original_PHONE)) AND ((@IsNull_FAX = 1 AND [FAX] IS NULL) "& _ 
                "OR ([FAX] = @Original_FAX)) AND ((@IsNull_WEBPAGE = 1 AND [WEBPAGE] IS NULL) OR "& _ 
                "([WEBPAGE] = @Original_WEBPAGE)) AND ((@IsNull_EMAIL = 1 AND [EMAIL] IS NULL) OR"& _ 
                " ([EMAIL] = @Original_EMAIL)) AND ((@IsNull_CONTACT1 = 1 AND [CONTACT1] IS NULL)"& _ 
                " OR ([CONTACT1] = @Original_CONTACT1)) AND ((@IsNull_C1PHONE = 1 AND [C1PHONE] I"& _ 
                "S NULL) OR ([C1PHONE] = @Original_C1PHONE)) AND ((@IsNull_C1FAX = 1 AND [C1FAX] "& _ 
                "IS NULL) OR ([C1FAX] = @Original_C1FAX)) AND ((@IsNull_CONTACT2 = 1 AND [CONTACT"& _ 
                "2] IS NULL) OR ([CONTACT2] = @Original_CONTACT2)) AND ((@IsNull_C2PHONE = 1 AND "& _ 
                "[C2PHONE] IS NULL) OR ([C2PHONE] = @Original_C2PHONE)) AND ((@IsNull_C2FAX = 1 A"& _ 
                "ND [C2FAX] IS NULL) OR ([C2FAX] = @Original_C2FAX)) AND ([DISCDAY] = @Original_D"& _ 
                "ISCDAY) AND ([DISCPTG] = @Original_DISCPTG) AND ([DUEDAY] = @Original_DUEDAY) AN"& _ 
                "D ([CURR_CODE] = @Original_CURR_CODE) AND ([IS_COD] = @Original_IS_COD) AND ([CR"& _ 
                "EDIT_LIMIT] = @Original_CREDIT_LIMIT) AND ((@IsNull_TAX_CODE1 = 1 AND [TAX_CODE1"& _ 
                "] IS NULL) OR ([TAX_CODE1] = @Original_TAX_CODE1)) AND ((@IsNull_TAX_CODE2 = 1 A"& _ 
                "ND [TAX_CODE2] IS NULL) OR ([TAX_CODE2] = @Original_TAX_CODE2)) AND ((@IsNull_SA"& _ 
                "LES_CODE = 1 AND [SALES_CODE] IS NULL) OR ([SALES_CODE] = @Original_SALES_CODE))"& _ 
                " AND ((@IsNull_CUSTTYPE_CODE = 1 AND [CUSTTYPE_CODE] IS NULL) OR ([CUSTTYPE_CODE"& _ 
                "] = @Original_CUSTTYPE_CODE)) AND ((@IsNull_TAXEXAMPNO1 = 1 AND [TAXEXAMPNO1] IS"& _ 
                " NULL) OR ([TAXEXAMPNO1] = @Original_TAXEXAMPNO1)) AND ((@IsNull_TAXEXAMPNO2 = 1"& _ 
                " AND [TAXEXAMPNO2] IS NULL) OR ([TAXEXAMPNO2] = @Original_TAXEXAMPNO2)) AND ((@I"& _ 
                "sNull_SHIPNAME = 1 AND [SHIPNAME] IS NULL) OR ([SHIPNAME] = @Original_SHIPNAME))"& _ 
                " AND ((@IsNull_SHIPADDR1 = 1 AND [SHIPADDR1] IS NULL) OR ([SHIPADDR1] = @Origina"& _ 
                "l_SHIPADDR1)) AND ((@IsNull_SHIPADDR2 = 1 AND [SHIPADDR2] IS NULL) OR ([SHIPADDR"& _ 
                "2] = @Original_SHIPADDR2)) AND ((@IsNull_SHIPADDR3 = 1 AND [SHIPADDR3] IS NULL) "& _ 
                "OR ([SHIPADDR3] = @Original_SHIPADDR3)) AND ((@IsNull_SHIPADDR4 = 1 AND [SHIPADD"& _ 
                "R4] IS NULL) OR ([SHIPADDR4] = @Original_SHIPADDR4)) AND ([IS_SUSPEND] = @Origin"& _ 
                "al_IS_SUSPEND) AND ([IS_PRINTSTM] = @Original_IS_PRINTSTM) AND ((@IsNull_NOTES ="& _ 
                " 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REG_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WEBPAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEBPAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WEBPAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEBPAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMAIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONTACT1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONTACT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C1PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C1PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C1FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C1FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONTACT2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONTACT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C2PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C2PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C2FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C2FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCDAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCPTG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "DISCPTG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DUEDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DUEDAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_COD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_COD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREDIT_LIMIT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREDIT_LIMIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAX_CODE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_CODE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAX_CODE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_CODE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SALES_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUSTTYPE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXEXAMPNO1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXEXAMPNO1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXEXAMPNO2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXEXAMPNO2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_SUSPEND", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_SUSPEND", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_PRINTSTM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_PRINTSTM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOTES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOTES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MST_CUSTOMER] ([CUSTOMER_CODE], [CUSTOMER_NAME], [REG_CODE], [ADDR1]"& _ 
                ", [ADDR2], [ADDR3], [ADDR4], [PHONE], [FAX], [WEBPAGE], [EMAIL], [CONTACT1], [C1"& _ 
                "PHONE], [C1FAX], [CONTACT2], [C2PHONE], [C2FAX], [DISCDAY], [DISCPTG], [DUEDAY],"& _ 
                " [CURR_CODE], [IS_COD], [CREDIT_LIMIT], [TAX_CODE1], [TAX_CODE2], [SALES_CODE], "& _ 
                "[CUSTTYPE_CODE], [TAXEXAMPNO1], [TAXEXAMPNO2], [SHIPNAME], [SHIPADDR1], [SHIPADD"& _ 
                "R2], [SHIPADDR3], [SHIPADDR4], [IS_SUSPEND], [IS_PRINTSTM], [NOTES]) VALUES (@CU"& _ 
                "STOMER_CODE, @CUSTOMER_NAME, @REG_CODE, @ADDR1, @ADDR2, @ADDR3, @ADDR4, @PHONE, "& _ 
                "@FAX, @WEBPAGE, @EMAIL, @CONTACT1, @C1PHONE, @C1FAX, @CONTACT2, @C2PHONE, @C2FAX"& _ 
                ", @DISCDAY, @DISCPTG, @DUEDAY, @CURR_CODE, @IS_COD, @CREDIT_LIMIT, @TAX_CODE1, @"& _ 
                "TAX_CODE2, @SALES_CODE, @CUSTTYPE_CODE, @TAXEXAMPNO1, @TAXEXAMPNO2, @SHIPNAME, @"& _ 
                "SHIPADDR1, @SHIPADDR2, @SHIPADDR3, @SHIPADDR4, @IS_SUSPEND, @IS_PRINTSTM, @NOTES"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CUSTOMER_CODE, CUSTOMER_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, P"& _ 
                "HONE, FAX, WEBPAGE, EMAIL, CONTACT1, C1PHONE, C1FAX, CONTACT2, C2PHONE, C2FAX, D"& _ 
                "ISCDAY, DISCPTG, DUEDAY, CURR_CODE, IS_COD, CREDIT_LIMIT, TAX_CODE1, TAX_CODE2, "& _ 
                "SALES_CODE, CUSTTYPE_CODE, TAXEXAMPNO1, TAXEXAMPNO2, SHIPNAME, SHIPADDR1, SHIPAD"& _ 
                "DR2, SHIPADDR3, SHIPADDR4, IS_SUSPEND, IS_PRINTSTM, NOTES FROM MST_CUSTOMER WHER"& _ 
                "E (CUSTOMER_CODE = @CUSTOMER_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WEBPAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEBPAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTACT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C1PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C1FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTACT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C2PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C2FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCDAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCPTG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "DISCPTG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DUEDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DUEDAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_COD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREDIT_LIMIT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREDIT_LIMIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXEXAMPNO1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXEXAMPNO2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_SUSPEND", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_SUSPEND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_PRINTSTM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_PRINTSTM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MST_CUSTOMER] SET [CUSTOMER_CODE] = @CUSTOMER_CODE, [CUSTOMER_NAME] = @CU"& _ 
                "STOMER_NAME, [REG_CODE] = @REG_CODE, [ADDR1] = @ADDR1, [ADDR2] = @ADDR2, [ADDR3]"& _ 
                " = @ADDR3, [ADDR4] = @ADDR4, [PHONE] = @PHONE, [FAX] = @FAX, [WEBPAGE] = @WEBPAG"& _ 
                "E, [EMAIL] = @EMAIL, [CONTACT1] = @CONTACT1, [C1PHONE] = @C1PHONE, [C1FAX] = @C1"& _ 
                "FAX, [CONTACT2] = @CONTACT2, [C2PHONE] = @C2PHONE, [C2FAX] = @C2FAX, [DISCDAY] ="& _ 
                " @DISCDAY, [DISCPTG] = @DISCPTG, [DUEDAY] = @DUEDAY, [CURR_CODE] = @CURR_CODE, ["& _ 
                "IS_COD] = @IS_COD, [CREDIT_LIMIT] = @CREDIT_LIMIT, [TAX_CODE1] = @TAX_CODE1, [TA"& _ 
                "X_CODE2] = @TAX_CODE2, [SALES_CODE] = @SALES_CODE, [CUSTTYPE_CODE] = @CUSTTYPE_C"& _ 
                "ODE, [TAXEXAMPNO1] = @TAXEXAMPNO1, [TAXEXAMPNO2] = @TAXEXAMPNO2, [SHIPNAME] = @S"& _ 
                "HIPNAME, [SHIPADDR1] = @SHIPADDR1, [SHIPADDR2] = @SHIPADDR2, [SHIPADDR3] = @SHIP"& _ 
                "ADDR3, [SHIPADDR4] = @SHIPADDR4, [IS_SUSPEND] = @IS_SUSPEND, [IS_PRINTSTM] = @IS"& _ 
                "_PRINTSTM, [NOTES] = @NOTES WHERE (([CUSTOMER_CODE] = @Original_CUSTOMER_CODE) A"& _ 
                "ND ([CUSTOMER_NAME] = @Original_CUSTOMER_NAME) AND ((@IsNull_REG_CODE = 1 AND [R"& _ 
                "EG_CODE] IS NULL) OR ([REG_CODE] = @Original_REG_CODE)) AND ((@IsNull_ADDR1 = 1 "& _ 
                "AND [ADDR1] IS NULL) OR ([ADDR1] = @Original_ADDR1)) AND ((@IsNull_ADDR2 = 1 AND"& _ 
                " [ADDR2] IS NULL) OR ([ADDR2] = @Original_ADDR2)) AND ((@IsNull_ADDR3 = 1 AND [A"& _ 
                "DDR3] IS NULL) OR ([ADDR3] = @Original_ADDR3)) AND ((@IsNull_ADDR4 = 1 AND [ADDR"& _ 
                "4] IS NULL) OR ([ADDR4] = @Original_ADDR4)) AND ((@IsNull_PHONE = 1 AND [PHONE] "& _ 
                "IS NULL) OR ([PHONE] = @Original_PHONE)) AND ((@IsNull_FAX = 1 AND [FAX] IS NULL"& _ 
                ") OR ([FAX] = @Original_FAX)) AND ((@IsNull_WEBPAGE = 1 AND [WEBPAGE] IS NULL) O"& _ 
                "R ([WEBPAGE] = @Original_WEBPAGE)) AND ((@IsNull_EMAIL = 1 AND [EMAIL] IS NULL) "& _ 
                "OR ([EMAIL] = @Original_EMAIL)) AND ((@IsNull_CONTACT1 = 1 AND [CONTACT1] IS NUL"& _ 
                "L) OR ([CONTACT1] = @Original_CONTACT1)) AND ((@IsNull_C1PHONE = 1 AND [C1PHONE]"& _ 
                " IS NULL) OR ([C1PHONE] = @Original_C1PHONE)) AND ((@IsNull_C1FAX = 1 AND [C1FAX"& _ 
                "] IS NULL) OR ([C1FAX] = @Original_C1FAX)) AND ((@IsNull_CONTACT2 = 1 AND [CONTA"& _ 
                "CT2] IS NULL) OR ([CONTACT2] = @Original_CONTACT2)) AND ((@IsNull_C2PHONE = 1 AN"& _ 
                "D [C2PHONE] IS NULL) OR ([C2PHONE] = @Original_C2PHONE)) AND ((@IsNull_C2FAX = 1"& _ 
                " AND [C2FAX] IS NULL) OR ([C2FAX] = @Original_C2FAX)) AND ([DISCDAY] = @Original"& _ 
                "_DISCDAY) AND ([DISCPTG] = @Original_DISCPTG) AND ([DUEDAY] = @Original_DUEDAY) "& _ 
                "AND ([CURR_CODE] = @Original_CURR_CODE) AND ([IS_COD] = @Original_IS_COD) AND (["& _ 
                "CREDIT_LIMIT] = @Original_CREDIT_LIMIT) AND ((@IsNull_TAX_CODE1 = 1 AND [TAX_COD"& _ 
                "E1] IS NULL) OR ([TAX_CODE1] = @Original_TAX_CODE1)) AND ((@IsNull_TAX_CODE2 = 1"& _ 
                " AND [TAX_CODE2] IS NULL) OR ([TAX_CODE2] = @Original_TAX_CODE2)) AND ((@IsNull_"& _ 
                "SALES_CODE = 1 AND [SALES_CODE] IS NULL) OR ([SALES_CODE] = @Original_SALES_CODE"& _ 
                ")) AND ((@IsNull_CUSTTYPE_CODE = 1 AND [CUSTTYPE_CODE] IS NULL) OR ([CUSTTYPE_CO"& _ 
                "DE] = @Original_CUSTTYPE_CODE)) AND ((@IsNull_TAXEXAMPNO1 = 1 AND [TAXEXAMPNO1] "& _ 
                "IS NULL) OR ([TAXEXAMPNO1] = @Original_TAXEXAMPNO1)) AND ((@IsNull_TAXEXAMPNO2 ="& _ 
                " 1 AND [TAXEXAMPNO2] IS NULL) OR ([TAXEXAMPNO2] = @Original_TAXEXAMPNO2)) AND (("& _ 
                "@IsNull_SHIPNAME = 1 AND [SHIPNAME] IS NULL) OR ([SHIPNAME] = @Original_SHIPNAME"& _ 
                ")) AND ((@IsNull_SHIPADDR1 = 1 AND [SHIPADDR1] IS NULL) OR ([SHIPADDR1] = @Origi"& _ 
                "nal_SHIPADDR1)) AND ((@IsNull_SHIPADDR2 = 1 AND [SHIPADDR2] IS NULL) OR ([SHIPAD"& _ 
                "DR2] = @Original_SHIPADDR2)) AND ((@IsNull_SHIPADDR3 = 1 AND [SHIPADDR3] IS NULL"& _ 
                ") OR ([SHIPADDR3] = @Original_SHIPADDR3)) AND ((@IsNull_SHIPADDR4 = 1 AND [SHIPA"& _ 
                "DDR4] IS NULL) OR ([SHIPADDR4] = @Original_SHIPADDR4)) AND ([IS_SUSPEND] = @Orig"& _ 
                "inal_IS_SUSPEND) AND ([IS_PRINTSTM] = @Original_IS_PRINTSTM) AND ((@IsNull_NOTES"& _ 
                " = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CUSTOMER_COD"& _ 
                "E, CUSTOMER_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONE, FAX, WEBPAGE, EMA"& _ 
                "IL, CONTACT1, C1PHONE, C1FAX, CONTACT2, C2PHONE, C2FAX, DISCDAY, DISCPTG, DUEDAY"& _ 
                ", CURR_CODE, IS_COD, CREDIT_LIMIT, TAX_CODE1, TAX_CODE2, SALES_CODE, CUSTTYPE_CO"& _ 
                "DE, TAXEXAMPNO1, TAXEXAMPNO2, SHIPNAME, SHIPADDR1, SHIPADDR2, SHIPADDR3, SHIPADD"& _ 
                "R4, IS_SUSPEND, IS_PRINTSTM, NOTES FROM MST_CUSTOMER WHERE (CUSTOMER_CODE = @CUS"& _ 
                "TOMER_CODE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WEBPAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEBPAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTACT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C1PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C1FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTACT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C2PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@C2FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2FAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCDAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCPTG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "DISCPTG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DUEDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DUEDAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_COD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREDIT_LIMIT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREDIT_LIMIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXEXAMPNO1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXEXAMPNO2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_SUSPEND", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_SUSPEND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_PRINTSTM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_PRINTSTM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTOMER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REG_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WEBPAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEBPAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WEBPAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEBPAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EMAIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMAIL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMAIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONTACT1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONTACT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C1PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C1PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C1FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C1FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C1FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONTACT2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONTACT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTACT2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C2PHONE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C2PHONE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_C2FAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2FAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_C2FAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "C2FAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCDAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCPTG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "DISCPTG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DUEDAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DUEDAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_COD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_COD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREDIT_LIMIT", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREDIT_LIMIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAX_CODE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_CODE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAX_CODE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAX_CODE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAX_CODE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SALES_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SALES_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUSTTYPE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTTYPE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXEXAMPNO1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXEXAMPNO1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TAXEXAMPNO2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TAXEXAMPNO2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXEXAMPNO2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIPADDR4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIPADDR4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPADDR4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_SUSPEND", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_SUSPEND", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_PRINTSTM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_PRINTSTM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOTES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOTES", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CUSTOMER_CODE, CUSTOMER_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONE,"& _ 
                " FAX, WEBPAGE, EMAIL, CONTACT1, C1PHONE, C1FAX, CONTACT2, C2PHONE, C2FAX, DISCDA"& _ 
                "Y, DISCPTG, DUEDAY, CURR_CODE, IS_COD, CREDIT_LIMIT, TAX_CODE1, TAX_CODE2, SALES"& _ 
                "_CODE, CUSTTYPE_CODE, TAXEXAMPNO1, TAXEXAMPNO2, SHIPNAME, SHIPADDR1, SHIPADDR2, "& _ 
                "SHIPADDR3, SHIPADDR4, IS_SUSPEND, IS_PRINTSTM, NOTES FROM MST_CUSTOMER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CSMasterDataset.MST_CUSTOMERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CSMasterDataset.MST_CUSTOMERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CSMasterDataset.MST_CUSTOMERDataTable = New CSMasterDataset.MST_CUSTOMERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CSMasterDataset.MST_CUSTOMERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CSMasterDataset) As Integer
            Return Me.Adapter.Update(dataSet, "MST_CUSTOMER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_CUSTOMER_CODE As String,  _
                    ByVal Original_CUSTOMER_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONE As String,  _
                    ByVal Original_FAX As String,  _
                    ByVal Original_WEBPAGE As String,  _
                    ByVal Original_EMAIL As String,  _
                    ByVal Original_CONTACT1 As String,  _
                    ByVal Original_C1PHONE As String,  _
                    ByVal Original_C1FAX As String,  _
                    ByVal Original_CONTACT2 As String,  _
                    ByVal Original_C2PHONE As String,  _
                    ByVal Original_C2FAX As String,  _
                    ByVal Original_DISCDAY As Integer,  _
                    ByVal Original_DISCPTG As Decimal,  _
                    ByVal Original_DUEDAY As Integer,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_IS_COD As Boolean,  _
                    ByVal Original_CREDIT_LIMIT As Decimal,  _
                    ByVal Original_TAX_CODE1 As String,  _
                    ByVal Original_TAX_CODE2 As String,  _
                    ByVal Original_SALES_CODE As String,  _
                    ByVal Original_CUSTTYPE_CODE As String,  _
                    ByVal Original_TAXEXAMPNO1 As String,  _
                    ByVal Original_TAXEXAMPNO2 As String,  _
                    ByVal Original_SHIPNAME As String,  _
                    ByVal Original_SHIPADDR1 As String,  _
                    ByVal Original_SHIPADDR2 As String,  _
                    ByVal Original_SHIPADDR3 As String,  _
                    ByVal Original_SHIPADDR4 As String,  _
                    ByVal Original_IS_SUSPEND As Boolean,  _
                    ByVal Original_IS_PRINTSTM As Boolean,  _
                    ByVal Original_NOTES As String) As Integer
            If (Original_CUSTOMER_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CUSTOMER_CODE,String)
            End If
            If (Original_CUSTOMER_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CUSTOMER_NAME,String)
            End If
            If (Original_REG_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_REG_CODE,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PHONE,String)
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_FAX,String)
            End If
            If (Original_WEBPAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_WEBPAGE,String)
            End If
            If (Original_EMAIL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_EMAIL,String)
            End If
            If (Original_CONTACT1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_CONTACT1,String)
            End If
            If (Original_C1PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_C1PHONE,String)
            End If
            If (Original_C1FAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_C1FAX,String)
            End If
            If (Original_CONTACT2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_CONTACT2,String)
            End If
            If (Original_C2PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_C2PHONE,String)
            End If
            If (Original_C2FAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_C2FAX,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_DISCDAY,Integer)
            Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_DISCPTG,Decimal)
            Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_DUEDAY,Integer)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_CURR_CODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_IS_COD,Boolean)
            Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_CREDIT_LIMIT,Decimal)
            If (Original_TAX_CODE1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_TAX_CODE1,String)
            End If
            If (Original_TAX_CODE2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_TAX_CODE2,String)
            End If
            If (Original_SALES_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_SALES_CODE,String)
            End If
            If (Original_CUSTTYPE_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_CUSTTYPE_CODE,String)
            End If
            If (Original_TAXEXAMPNO1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_TAXEXAMPNO1,String)
            End If
            If (Original_TAXEXAMPNO2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_TAXEXAMPNO2,String)
            End If
            If (Original_SHIPNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_SHIPNAME,String)
            End If
            If (Original_SHIPADDR1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_SHIPADDR1,String)
            End If
            If (Original_SHIPADDR2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_SHIPADDR2,String)
            End If
            If (Original_SHIPADDR3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_SHIPADDR3,String)
            End If
            If (Original_SHIPADDR4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_SHIPADDR4,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_IS_SUSPEND,Boolean)
            Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_IS_PRINTSTM,Boolean)
            If (Original_NOTES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_NOTES,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CUSTOMER_CODE As String,  _
                    ByVal CUSTOMER_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal WEBPAGE As String,  _
                    ByVal EMAIL As String,  _
                    ByVal CONTACT1 As String,  _
                    ByVal C1PHONE As String,  _
                    ByVal C1FAX As String,  _
                    ByVal CONTACT2 As String,  _
                    ByVal C2PHONE As String,  _
                    ByVal C2FAX As String,  _
                    ByVal DISCDAY As Integer,  _
                    ByVal DISCPTG As Decimal,  _
                    ByVal DUEDAY As Integer,  _
                    ByVal CURR_CODE As String,  _
                    ByVal IS_COD As Boolean,  _
                    ByVal CREDIT_LIMIT As Decimal,  _
                    ByVal TAX_CODE1 As String,  _
                    ByVal TAX_CODE2 As String,  _
                    ByVal SALES_CODE As String,  _
                    ByVal CUSTTYPE_CODE As String,  _
                    ByVal TAXEXAMPNO1 As String,  _
                    ByVal TAXEXAMPNO2 As String,  _
                    ByVal SHIPNAME As String,  _
                    ByVal SHIPADDR1 As String,  _
                    ByVal SHIPADDR2 As String,  _
                    ByVal SHIPADDR3 As String,  _
                    ByVal SHIPADDR4 As String,  _
                    ByVal IS_SUSPEND As Boolean,  _
                    ByVal IS_PRINTSTM As Boolean,  _
                    ByVal NOTES As String) As Integer
            If (CUSTOMER_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTOMER_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CUSTOMER_CODE,String)
            End If
            If (CUSTOMER_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTOMER_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CUSTOMER_NAME,String)
            End If
            If (REG_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(REG_CODE,String)
            End If
            If (ADDR1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADDR1,String)
            End If
            If (ADDR2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ADDR2,String)
            End If
            If (ADDR3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ADDR3,String)
            End If
            If (ADDR4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ADDR4,String)
            End If
            If (PHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PHONE,String)
            End If
            If (FAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FAX,String)
            End If
            If (WEBPAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(WEBPAGE,String)
            End If
            If (EMAIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(EMAIL,String)
            End If
            If (CONTACT1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(CONTACT1,String)
            End If
            If (C1PHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(C1PHONE,String)
            End If
            If (C1FAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(C1FAX,String)
            End If
            If (CONTACT2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CONTACT2,String)
            End If
            If (C2PHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(C2PHONE,String)
            End If
            If (C2FAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(C2FAX,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(DISCDAY,Integer)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(DISCPTG,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(DUEDAY,Integer)
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CURR_CODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(IS_COD,Boolean)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(CREDIT_LIMIT,Decimal)
            If (TAX_CODE1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(TAX_CODE1,String)
            End If
            If (TAX_CODE2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(TAX_CODE2,String)
            End If
            If (SALES_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SALES_CODE,String)
            End If
            If (CUSTTYPE_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(CUSTTYPE_CODE,String)
            End If
            If (TAXEXAMPNO1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(TAXEXAMPNO1,String)
            End If
            If (TAXEXAMPNO2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(TAXEXAMPNO2,String)
            End If
            If (SHIPNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(SHIPNAME,String)
            End If
            If (SHIPADDR1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SHIPADDR1,String)
            End If
            If (SHIPADDR2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(SHIPADDR2,String)
            End If
            If (SHIPADDR3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(SHIPADDR3,String)
            End If
            If (SHIPADDR4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(SHIPADDR4,String)
            End If
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(IS_SUSPEND,Boolean)
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(IS_PRINTSTM,Boolean)
            If (NOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(NOTES,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CUSTOMER_CODE As String,  _
                    ByVal CUSTOMER_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal WEBPAGE As String,  _
                    ByVal EMAIL As String,  _
                    ByVal CONTACT1 As String,  _
                    ByVal C1PHONE As String,  _
                    ByVal C1FAX As String,  _
                    ByVal CONTACT2 As String,  _
                    ByVal C2PHONE As String,  _
                    ByVal C2FAX As String,  _
                    ByVal DISCDAY As Integer,  _
                    ByVal DISCPTG As Decimal,  _
                    ByVal DUEDAY As Integer,  _
                    ByVal CURR_CODE As String,  _
                    ByVal IS_COD As Boolean,  _
                    ByVal CREDIT_LIMIT As Decimal,  _
                    ByVal TAX_CODE1 As String,  _
                    ByVal TAX_CODE2 As String,  _
                    ByVal SALES_CODE As String,  _
                    ByVal CUSTTYPE_CODE As String,  _
                    ByVal TAXEXAMPNO1 As String,  _
                    ByVal TAXEXAMPNO2 As String,  _
                    ByVal SHIPNAME As String,  _
                    ByVal SHIPADDR1 As String,  _
                    ByVal SHIPADDR2 As String,  _
                    ByVal SHIPADDR3 As String,  _
                    ByVal SHIPADDR4 As String,  _
                    ByVal IS_SUSPEND As Boolean,  _
                    ByVal IS_PRINTSTM As Boolean,  _
                    ByVal NOTES As String,  _
                    ByVal Original_CUSTOMER_CODE As String,  _
                    ByVal Original_CUSTOMER_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONE As String,  _
                    ByVal Original_FAX As String,  _
                    ByVal Original_WEBPAGE As String,  _
                    ByVal Original_EMAIL As String,  _
                    ByVal Original_CONTACT1 As String,  _
                    ByVal Original_C1PHONE As String,  _
                    ByVal Original_C1FAX As String,  _
                    ByVal Original_CONTACT2 As String,  _
                    ByVal Original_C2PHONE As String,  _
                    ByVal Original_C2FAX As String,  _
                    ByVal Original_DISCDAY As Integer,  _
                    ByVal Original_DISCPTG As Decimal,  _
                    ByVal Original_DUEDAY As Integer,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_IS_COD As Boolean,  _
                    ByVal Original_CREDIT_LIMIT As Decimal,  _
                    ByVal Original_TAX_CODE1 As String,  _
                    ByVal Original_TAX_CODE2 As String,  _
                    ByVal Original_SALES_CODE As String,  _
                    ByVal Original_CUSTTYPE_CODE As String,  _
                    ByVal Original_TAXEXAMPNO1 As String,  _
                    ByVal Original_TAXEXAMPNO2 As String,  _
                    ByVal Original_SHIPNAME As String,  _
                    ByVal Original_SHIPADDR1 As String,  _
                    ByVal Original_SHIPADDR2 As String,  _
                    ByVal Original_SHIPADDR3 As String,  _
                    ByVal Original_SHIPADDR4 As String,  _
                    ByVal Original_IS_SUSPEND As Boolean,  _
                    ByVal Original_IS_PRINTSTM As Boolean,  _
                    ByVal Original_NOTES As String) As Integer
            If (CUSTOMER_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTOMER_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CUSTOMER_CODE,String)
            End If
            If (CUSTOMER_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTOMER_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CUSTOMER_NAME,String)
            End If
            If (REG_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REG_CODE,String)
            End If
            If (ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADDR1,String)
            End If
            If (ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ADDR2,String)
            End If
            If (ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ADDR3,String)
            End If
            If (ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ADDR4,String)
            End If
            If (PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PHONE,String)
            End If
            If (FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FAX,String)
            End If
            If (WEBPAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(WEBPAGE,String)
            End If
            If (EMAIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(EMAIL,String)
            End If
            If (CONTACT1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(CONTACT1,String)
            End If
            If (C1PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(C1PHONE,String)
            End If
            If (C1FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(C1FAX,String)
            End If
            If (CONTACT2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CONTACT2,String)
            End If
            If (C2PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(C2PHONE,String)
            End If
            If (C2FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(C2FAX,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DISCDAY,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(DISCPTG,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(DUEDAY,Integer)
            If (CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(CURR_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(IS_COD,Boolean)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(CREDIT_LIMIT,Decimal)
            If (TAX_CODE1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(TAX_CODE1,String)
            End If
            If (TAX_CODE2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(TAX_CODE2,String)
            End If
            If (SALES_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(SALES_CODE,String)
            End If
            If (CUSTTYPE_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(CUSTTYPE_CODE,String)
            End If
            If (TAXEXAMPNO1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(TAXEXAMPNO1,String)
            End If
            If (TAXEXAMPNO2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(TAXEXAMPNO2,String)
            End If
            If (SHIPNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(SHIPNAME,String)
            End If
            If (SHIPADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SHIPADDR1,String)
            End If
            If (SHIPADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(SHIPADDR2,String)
            End If
            If (SHIPADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(SHIPADDR3,String)
            End If
            If (SHIPADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(SHIPADDR4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(IS_SUSPEND,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(IS_PRINTSTM,Boolean)
            If (NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(NOTES,String)
            End If
            If (Original_CUSTOMER_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_CUSTOMER_CODE,String)
            End If
            If (Original_CUSTOMER_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CUSTOMER_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_CUSTOMER_NAME,String)
            End If
            If (Original_REG_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_REG_CODE,String)
            End If
            If (Original_ADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_ADDR1,String)
            End If
            If (Original_ADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_ADDR2,String)
            End If
            If (Original_ADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_ADDR3,String)
            End If
            If (Original_ADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_ADDR4,String)
            End If
            If (Original_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_PHONE,String)
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_FAX,String)
            End If
            If (Original_WEBPAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_WEBPAGE,String)
            End If
            If (Original_EMAIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_EMAIL,String)
            End If
            If (Original_CONTACT1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_CONTACT1,String)
            End If
            If (Original_C1PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_C1PHONE,String)
            End If
            If (Original_C1FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_C1FAX,String)
            End If
            If (Original_CONTACT2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_CONTACT2,String)
            End If
            If (Original_C2PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_C2PHONE,String)
            End If
            If (Original_C2FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_C2FAX,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_DISCDAY,Integer)
            Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_DISCPTG,Decimal)
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_DUEDAY,Integer)
            If (Original_CURR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CURR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_CURR_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_IS_COD,Boolean)
            Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_CREDIT_LIMIT,Decimal)
            If (Original_TAX_CODE1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_TAX_CODE1,String)
            End If
            If (Original_TAX_CODE2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_TAX_CODE2,String)
            End If
            If (Original_SALES_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_SALES_CODE,String)
            End If
            If (Original_CUSTTYPE_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_CUSTTYPE_CODE,String)
            End If
            If (Original_TAXEXAMPNO1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_TAXEXAMPNO1,String)
            End If
            If (Original_TAXEXAMPNO2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_TAXEXAMPNO2,String)
            End If
            If (Original_SHIPNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_SHIPNAME,String)
            End If
            If (Original_SHIPADDR1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_SHIPADDR1,String)
            End If
            If (Original_SHIPADDR2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_SHIPADDR2,String)
            End If
            If (Original_SHIPADDR3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_SHIPADDR3,String)
            End If
            If (Original_SHIPADDR4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_SHIPADDR4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_IS_SUSPEND,Boolean)
            Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_IS_PRINTSTM,Boolean)
            If (Original_NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_NOTES,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CUSTOMER_NAME As String,  _
                    ByVal REG_CODE As String,  _
                    ByVal ADDR1 As String,  _
                    ByVal ADDR2 As String,  _
                    ByVal ADDR3 As String,  _
                    ByVal ADDR4 As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal WEBPAGE As String,  _
                    ByVal EMAIL As String,  _
                    ByVal CONTACT1 As String,  _
                    ByVal C1PHONE As String,  _
                    ByVal C1FAX As String,  _
                    ByVal CONTACT2 As String,  _
                    ByVal C2PHONE As String,  _
                    ByVal C2FAX As String,  _
                    ByVal DISCDAY As Integer,  _
                    ByVal DISCPTG As Decimal,  _
                    ByVal DUEDAY As Integer,  _
                    ByVal CURR_CODE As String,  _
                    ByVal IS_COD As Boolean,  _
                    ByVal CREDIT_LIMIT As Decimal,  _
                    ByVal TAX_CODE1 As String,  _
                    ByVal TAX_CODE2 As String,  _
                    ByVal SALES_CODE As String,  _
                    ByVal CUSTTYPE_CODE As String,  _
                    ByVal TAXEXAMPNO1 As String,  _
                    ByVal TAXEXAMPNO2 As String,  _
                    ByVal SHIPNAME As String,  _
                    ByVal SHIPADDR1 As String,  _
                    ByVal SHIPADDR2 As String,  _
                    ByVal SHIPADDR3 As String,  _
                    ByVal SHIPADDR4 As String,  _
                    ByVal IS_SUSPEND As Boolean,  _
                    ByVal IS_PRINTSTM As Boolean,  _
                    ByVal NOTES As String,  _
                    ByVal Original_CUSTOMER_CODE As String,  _
                    ByVal Original_CUSTOMER_NAME As String,  _
                    ByVal Original_REG_CODE As String,  _
                    ByVal Original_ADDR1 As String,  _
                    ByVal Original_ADDR2 As String,  _
                    ByVal Original_ADDR3 As String,  _
                    ByVal Original_ADDR4 As String,  _
                    ByVal Original_PHONE As String,  _
                    ByVal Original_FAX As String,  _
                    ByVal Original_WEBPAGE As String,  _
                    ByVal Original_EMAIL As String,  _
                    ByVal Original_CONTACT1 As String,  _
                    ByVal Original_C1PHONE As String,  _
                    ByVal Original_C1FAX As String,  _
                    ByVal Original_CONTACT2 As String,  _
                    ByVal Original_C2PHONE As String,  _
                    ByVal Original_C2FAX As String,  _
                    ByVal Original_DISCDAY As Integer,  _
                    ByVal Original_DISCPTG As Decimal,  _
                    ByVal Original_DUEDAY As Integer,  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_IS_COD As Boolean,  _
                    ByVal Original_CREDIT_LIMIT As Decimal,  _
                    ByVal Original_TAX_CODE1 As String,  _
                    ByVal Original_TAX_CODE2 As String,  _
                    ByVal Original_SALES_CODE As String,  _
                    ByVal Original_CUSTTYPE_CODE As String,  _
                    ByVal Original_TAXEXAMPNO1 As String,  _
                    ByVal Original_TAXEXAMPNO2 As String,  _
                    ByVal Original_SHIPNAME As String,  _
                    ByVal Original_SHIPADDR1 As String,  _
                    ByVal Original_SHIPADDR2 As String,  _
                    ByVal Original_SHIPADDR3 As String,  _
                    ByVal Original_SHIPADDR4 As String,  _
                    ByVal Original_IS_SUSPEND As Boolean,  _
                    ByVal Original_IS_PRINTSTM As Boolean,  _
                    ByVal Original_NOTES As String) As Integer
            Return Me.Update(Original_CUSTOMER_CODE, CUSTOMER_NAME, REG_CODE, ADDR1, ADDR2, ADDR3, ADDR4, PHONE, FAX, WEBPAGE, EMAIL, CONTACT1, C1PHONE, C1FAX, CONTACT2, C2PHONE, C2FAX, DISCDAY, DISCPTG, DUEDAY, CURR_CODE, IS_COD, CREDIT_LIMIT, TAX_CODE1, TAX_CODE2, SALES_CODE, CUSTTYPE_CODE, TAXEXAMPNO1, TAXEXAMPNO2, SHIPNAME, SHIPADDR1, SHIPADDR2, SHIPADDR3, SHIPADDR4, IS_SUSPEND, IS_PRINTSTM, NOTES, Original_CUSTOMER_CODE, Original_CUSTOMER_NAME, Original_REG_CODE, Original_ADDR1, Original_ADDR2, Original_ADDR3, Original_ADDR4, Original_PHONE, Original_FAX, Original_WEBPAGE, Original_EMAIL, Original_CONTACT1, Original_C1PHONE, Original_C1FAX, Original_CONTACT2, Original_C2PHONE, Original_C2FAX, Original_DISCDAY, Original_DISCPTG, Original_DUEDAY, Original_CURR_CODE, Original_IS_COD, Original_CREDIT_LIMIT, Original_TAX_CODE1, Original_TAX_CODE2, Original_SALES_CODE, Original_CUSTTYPE_CODE, Original_TAXEXAMPNO1, Original_TAXEXAMPNO2, Original_SHIPNAME, Original_SHIPADDR1, Original_SHIPADDR2, Original_SHIPADDR3, Original_SHIPADDR4, Original_IS_SUSPEND, Original_IS_PRINTSTM, Original_NOTES)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QueriesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(9) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckAPTranExists"
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckCustTypeExists"
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTTYPE_CODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckSalesmanExists"
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALES_CODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckTaxExists"
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckARTranExists"
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckARTranExistsByTax"
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAX_CODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(5),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckAPBankDetailsExists"
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANKNO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(6),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckAccHistoryExists"
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(7),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(8),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(8),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CLOSEYEAR"
            CType(Me._commandCollection(8),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(8),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(9),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.CSAccountDatabaseIntf.My.MySettings.Default.CSAccountDBConnectionString)
            CType(Me._commandCollection(9),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.CheckARTranExistsByCustomer"
            CType(Me._commandCollection(9),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(9),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(9),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTOMER_CODE", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(9),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAEXISTS", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.InputOutput, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckAPTranExists(ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(0),Global.System.Data.SqlClient.SqlCommand)
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(1).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(1).Value Is Nothing)  _
                        OrElse (command.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(1).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckCustTypeExists(ByVal CUSTTYPE_CODE As String, ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(1),Global.System.Data.SqlClient.SqlCommand)
            If (CUSTTYPE_CODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(CUSTTYPE_CODE,String)
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(2).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckSalesmanExists(ByVal SALES_CODE As String, ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(2),Global.System.Data.SqlClient.SqlCommand)
            If (SALES_CODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(SALES_CODE,String)
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(2).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckTaxExists(ByVal TAX_CODE As String, ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(3),Global.System.Data.SqlClient.SqlCommand)
            If (TAX_CODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(TAX_CODE,String)
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(2).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckARTranExists(ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(4),Global.System.Data.SqlClient.SqlCommand)
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(1).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(1).Value Is Nothing)  _
                        OrElse (command.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(1).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckARTranExistsByTax(ByVal TAX_CODE As String, ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(5),Global.System.Data.SqlClient.SqlCommand)
            If (TAX_CODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(TAX_CODE,String)
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(2).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckAPBankDetailsExists(ByVal BANKNO As Global.System.Nullable(Of Integer), ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(6),Global.System.Data.SqlClient.SqlCommand)
            If (BANKNO.HasValue = true) Then
                command.Parameters(1).Value = CType(BANKNO.Value,Integer)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(2).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckAccHistoryExists(ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(7),Global.System.Data.SqlClient.SqlCommand)
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(1).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(1).Value Is Nothing)  _
                        OrElse (command.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(1).Value,Boolean))
            End If
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CLOSEYEAR() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(8),Global.System.Data.SqlClient.SqlCommand)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckARTranExistsByCustomer(ByVal CUSTOMER_CODE As String, ByRef DATAEXISTS As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(9),Global.System.Data.SqlClient.SqlCommand)
            If (CUSTOMER_CODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(CUSTOMER_CODE,String)
            End If
            If (DATAEXISTS.HasValue = true) Then
                command.Parameters(2).Value = CType(DATAEXISTS.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                DATAEXISTS = New Global.System.Nullable(Of Boolean)
            Else
                DATAEXISTS = New Global.System.Nullable(Of Boolean)(CType(command.Parameters(2).Value,Boolean))
            End If
            Return returnValue
        End Function
    End Class
End Namespace
